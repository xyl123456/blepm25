###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         01/Sep/2017  16:24:10 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  E:\PM2.5\Components\stack\zdo\ZDApp.c              #
#    Command line       =  -f E:\PM2.5\Projects\zstack\Samples\GenericApp\CC2 #
#                          530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg         #
#                          (-DCPU32MHZ -DROOT=__near_func -DBLINK_LEDS) -f    #
#                          E:\PM2.5\Projects\zstack\Samples\GenericApp\CC2530 #
#                          DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg           #
#                          (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          E:\PM2.5\Components\stack\zdo\ZDApp.c -D           #
#                          ZIGBEEPRO -D NWK_AUTO_POLL -D ZTOOL_P1 -D          #
#                          xMT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D          #
#                          xPOWER_SAVING -lC E:\PM2.5\Projects\zstack\Samples #
#                          \GenericApp\CC2530DB\EndDeviceEB-Pro\List\ -lA     #
#                          E:\PM2.5\Projects\zstack\Samples\GenericApp\CC2530 #
#                          DB\EndDeviceEB-Pro\List\ --diag_suppress           #
#                          Pe001,Pa010 -o E:\PM2.5\Projects\zstack\Samples\Ge #
#                          nericApp\CC2530DB\EndDeviceEB-Pro\Obj\ -e --debug  #
#                          --core=plain --dptr=16,1 --data_model=large        #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I E:\PM2.5\Projects\zstack\S #
#                          amples\GenericApp\CC2530DB\ -I                     #
#                          E:\PM2.5\Projects\zstack\Samples\GenericApp\CC2530 #
#                          DB\..\SOURCE\ -I E:\PM2.5\Projects\zstack\Samples\ #
#                          GenericApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\ -I    #
#                          E:\PM2.5\Projects\zstack\Samples\GenericApp\CC2530 #
#                          DB\..\..\..\..\..\COMPONENTS\MT\ -I                #
#                          E:\PM2.5\Projects\zstack\Samples\GenericApp\CC2530 #
#                          DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I       #
#                          E:\PM2.5\Projects\zstack\Samples\GenericApp\CC2530 #
#                          DB\..\..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\  #
#                          -I E:\PM2.5\Projects\zstack\Samples\GenericApp\CC2 #
#                          530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\    #
#                          -I E:\PM2.5\Projects\zstack\Samples\GenericApp\CC2 #
#                          530DB\..\..\..\..\..\COMPONENTS\OSAL\INCLUDE\ -I   #
#                          E:\PM2.5\Projects\zstack\Samples\GenericApp\CC2530 #
#                          DB\..\..\..\..\..\COMPONENTS\STACK\AF\ -I          #
#                          E:\PM2.5\Projects\zstack\Samples\GenericApp\CC2530 #
#                          DB\..\..\..\..\..\COMPONENTS\STACK\NWK\ -I         #
#                          E:\PM2.5\Projects\zstack\Samples\GenericApp\CC2530 #
#                          DB\..\..\..\..\..\COMPONENTS\STACK\SEC\ -I         #
#                          E:\PM2.5\Projects\zstack\Samples\GenericApp\CC2530 #
#                          DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\ -I        #
#                          E:\PM2.5\Projects\zstack\Samples\GenericApp\CC2530 #
#                          DB\..\..\..\..\..\COMPONENTS\STACK\SYS\ -I         #
#                          E:\PM2.5\Projects\zstack\Samples\GenericApp\CC2530 #
#                          DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\ -I         #
#                          E:\PM2.5\Projects\zstack\Samples\GenericApp\CC2530 #
#                          DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\ -I          #
#                          E:\PM2.5\Projects\zstack\Samples\GenericApp\CC2530 #
#                          DB\..\..\..\..\..\COMPONENTS\ZMAC\ -I              #
#                          E:\PM2.5\Projects\zstack\Samples\GenericApp\CC2530 #
#                          DB\..\..\..\..\..\COMPONENTS\SERVICES\SADDR\ -I    #
#                          E:\PM2.5\Projects\zstack\Samples\GenericApp\CC2530 #
#                          DB\..\..\..\..\..\COMPONENTS\SERVICES\SDATA\ -I    #
#                          E:\PM2.5\Projects\zstack\Samples\GenericApp\CC2530 #
#                          DB\..\..\..\..\..\COMPONENTS\MAC\INCLUDE\ -I       #
#                          E:\PM2.5\Projects\zstack\Samples\GenericApp\CC2530 #
#                          DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I    #
#                          E:\PM2.5\Projects\zstack\Samples\GenericApp\CC2530 #
#                          DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\  #
#                          -I E:\PM2.5\Projects\zstack\Samples\GenericApp\CC2 #
#                          530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf0 #
#                          4\SINGLE_CHIP\ -Ohz                                #
#    List file          =  E:\PM2.5\Projects\zstack\Samples\GenericApp\CC2530 #
#                          DB\EndDeviceEB-Pro\List\ZDApp.lst                  #
#    Object file        =  E:\PM2.5\Projects\zstack\Samples\GenericApp\CC2530 #
#                          DB\EndDeviceEB-Pro\Obj\ZDApp.r51                   #
#                                                                             #
#                                                                             #
###############################################################################

E:\PM2.5\Components\stack\zdo\ZDApp.c
      1          /**************************************************************************************************
      2            Filename:       ZDApp.c
      3            Revised:        $Date: 2010-01-04 12:16:55 -0800 (Mon, 04 Jan 2010) $
      4            Revision:       $Revision: 21428 $
      5          
      6            Description:    This file contains the interface to the Zigbee Device Application. This is the
      7                            Application part that the use can change. This also contains the Task functions.
      8          
      9          
     10            Copyright 2004-2009 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License").  You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product.  Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED “AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE, 
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com. 
     39          **************************************************************************************************/
     40          
     41          /*********************************************************************
     42           * INCLUDES
     43           */
     44          #include "ZComDef.h"
     45          #include "ZMac.h"
     46          #include "OSAL.h"
     47          #include "OSAL_Tasks.h"
     48          #include "OSAL_PwrMgr.h"
     49          #include "OSAL_Nv.h"
     50          #include "AF.h"
     51          #include "APSMEDE.h"
     52          #include "NLMEDE.h"
     53          #include "AddrMgr.h"
     54          #include "ZDProfile.h"
     55          #include "ZDObject.h"
     56          #include "ZDConfig.h"
     57          #include "ZDSecMgr.h"
     58          #include "ZDApp.h"
     59          #include "DebugTrace.h"
     60          #include "nwk_util.h"
     61          #include "OnBoard.h"
     62          #include "ZGlobals.h"
     63          #include "ZDNwkMgr.h"
     64          #include "rtg.h"
     65          
     66          #include "ssp.h"
     67          
     68          /* HAL */
     69          #include "hal_led.h"
     70          #include "hal_lcd.h"
     71          #include "hal_key.h"
     72          
     73          #if defined( MT_MAC_FUNC ) || defined( MT_MAC_CB_FUNC )
     74            #error "ERROR! MT_MAC functionalities should be disabled on ZDO devices"
     75          #endif
     76          /*********************************************************************
     77           * MACROS
     78           */
     79          
     80          /*********************************************************************
     81           * CONSTANTS
     82           */
     83          #if !defined( NWK_START_DELAY )
     84            #define NWK_START_DELAY             100   // in milliseconds
     85          #endif
     86          
     87          #if !defined( EXTENDED_JOINING_RANDOM_MASK )
     88            #define EXTENDED_JOINING_RANDOM_MASK 0x007F
     89          #endif
     90          
     91          #if !defined( BEACON_REQUEST_DELAY )
     92            #define BEACON_REQUEST_DELAY        100   // in milliseconds
     93          #endif
     94          
     95          #if !defined( BEACON_REQ_DELAY_MASK )
     96            #define BEACON_REQ_DELAY_MASK       0x007F
     97          #endif
     98          
     99          #define MAX_RESUME_RETRY            3
    100          
    101          #define MAX_DEVICE_UNAUTH_TIMEOUT   5000  // 5 seconds
    102          
    103          // Beacon Order Settings (see NLMEDE.h)
    104          #define DEFAULT_BEACON_ORDER        BEACON_ORDER_NO_BEACONS
    105          #define DEFAULT_SUPERFRAME_ORDER    DEFAULT_BEACON_ORDER
    106          
    107          #if !defined( MAX_NWK_FRAMECOUNTER_CHANGES )
    108            // The number of times the frame counter can change before
    109            // saving to NV
    110            #define MAX_NWK_FRAMECOUNTER_CHANGES    1000
    111          #endif
    112          
    113          // Leave control bits
    114          #define ZDAPP_LEAVE_CTRL_INIT 0
    115          #define ZDAPP_LEAVE_CTRL_SET  1
    116          #define ZDAPP_LEAVE_CTRL_RA   2
    117          
    118          // Standard time to update NWK NV data
    119          #define ZDAPP_UPDATE_NWK_NV_TIME 700
    120          
    121          // Address Manager Stub Implementation
    122          #define ZDApp_NwkWriteNVRequest AddrMgrWriteNVRequest
    123          
    124          // Size of the ZDO callback function table zdoCBFunc[]
    125          #define MAX_ZDO_CB_FUNC 1
    126          
    127          
    128          /*********************************************************************
    129           * GLOBAL VARIABLES
    130           */
    131          
    132          #if defined( LCD_SUPPORTED )
    133            uint8 MatchRsps = 0;
    134          #endif
    135          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    136          uint8 zdoDiscCounter = 1;
   \                     zdoDiscCounter:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zdoDiscCounter>`
   \   000001                REQUIRE __INIT_XDATA_I
    137          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    138          zAddrType_t ZDAppNwkAddr;
   \                     ZDAppNwkAddr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z
    139          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    140          uint8 zdappMgmtNwkDiscRspTransSeq;
   \                     zdappMgmtNwkDiscRspTransSeq:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    141          uint8 zdappMgmtNwkDiscReqInProgress = FALSE;
   \                     zdappMgmtNwkDiscReqInProgress:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    142          zAddrType_t zdappMgmtNwkDiscRspAddr;
   \                     zdappMgmtNwkDiscRspAddr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    143          uint8 zdappMgmtNwkDiscStartIndex;
   \                     zdappMgmtNwkDiscStartIndex:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    144          uint8 zdappMgmtSavedNwkState;
   \                     zdappMgmtSavedNwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    145          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    146          uint16 nwkFrameCounterChanges = 0;
   \                     nwkFrameCounterChanges:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    147          uint8 continueJoining = TRUE;
   \                     continueJoining:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for continueJoining>`
   \   000001                REQUIRE __INIT_XDATA_I
    148          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    149          uint8  _tmpRejoinState;
   \                     _tmpRejoinState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    150          
    151          // The extended PanID used in ZDO layer for rejoin.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    152          uint8 ZDO_UseExtendedPANID[Z_EXTADDR_LEN];
   \                     ZDO_UseExtendedPANID:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
    153          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    154          pfnZdoCb zdoCBFunc[MAX_ZDO_CB_FUNC];
   \                     zdoCBFunc:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    155          
    156          /*********************************************************************
    157           * EXTERNAL VARIABLES
    158           */
    159          
    160          /*********************************************************************
    161           * EXTERNAL FUNCTIONS
    162           */
    163          
    164          /*********************************************************************
    165           * LOCAL FUNCTIONS
    166           */
    167          
    168          void ZDApp_NetworkStartEvt( void );
    169          void ZDApp_DeviceAuthEvt( void );
    170          void ZDApp_SaveNetworkStateEvt( void );
    171          
    172          uint8 ZDApp_ReadNetworkRestoreState( void );
    173          uint8 ZDApp_RestoreNetworkState( void );
    174          void ZDAppDetermineDeviceType( void );
    175          void ZDApp_InitUserDesc( void );
    176          void ZDAppCheckForHoldKey( void );
    177          void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr );
    178          void ZDApp_ProcessNetworkJoin( void );
    179          void ZDApp_SetCoordAddress( uint8 endPoint, uint8 dstEP );
    180          void ZDApp_SaveNwkKey( void );
    181          uint8 ZDApp_RestoreNwkKey( void );
    182            
    183          void ZDApp_SecInit( uint8 state );
    184          UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events );
    185          void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr );
    186          
    187          void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf );
    188          
    189          void ZDApp_ResetTimerStart( uint16 delay );
    190          void ZDApp_ResetTimerCancel( void );
    191          void ZDApp_LeaveCtrlInit( void );
    192          void ZDApp_LeaveCtrlSet( uint8 ra );
    193          uint8 ZDApp_LeaveCtrlBypass( void );
    194          void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay );
    195          void ZDApp_LeaveReset( uint8 ra );
    196          void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
    197                                  uint8 removeChildren );
    198          void ZDApp_NodeProfileSync( ZDO_NetworkDiscoveryCfm_t* cfm );
    199          void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg );
    200          void ZDApp_RegisterCBs( void );
    201          
    202          /*********************************************************************
    203           * LOCAL VARIABLES
    204           */
    205          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    206          uint8 ZDAppTaskID;
   \                     ZDAppTaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    207          uint8 nwkStatus;
   \                     nwkStatus:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    208          endPointDesc_t *ZDApp_AutoFindMode_epDesc = (endPointDesc_t *)NULL;
   \                     ZDApp_AutoFindMode_epDesc:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    209          uint8 ZDApp_LeaveCtrl;
   \                     ZDApp_LeaveCtrl:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    210          
    211          #if defined( HOLD_AUTO_START )
    212            devStates_t devState = DEV_HOLD;
    213          #else

   \                                 In  segment XDATA_I, align 1, keep-with-next
    214            devStates_t devState = DEV_INIT;
   \                     devState:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for devState>`
   \   000001                REQUIRE __INIT_XDATA_I
    215          #endif
    216          
    217          #if ( ZG_BUILD_RTRONLY_TYPE ) || ( ZG_BUILD_ENDDEVICE_TYPE )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    218            devStartModes_t devStartMode = MODE_JOIN;     // Assume joining
   \                     devStartMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    219            //devStartModes_t devStartMode = MODE_RESUME; // if already "directly joined"
    220                                  // to parent. Set to make the device do an Orphan scan.
    221          #else
    222            // Set the default to coodinator
    223            devStartModes_t devStartMode = MODE_HARD;
    224          #endif
    225          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    226          uint8 retryCnt;
   \                     retryCnt:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    227          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    228          endPointDesc_t ZDApp_epDesc =
   \                     ZDApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for ZDApp_epDesc>`
   \   000006                REQUIRE __INIT_XDATA_I
    229          {
    230            ZDO_EP,
    231            &ZDAppTaskID,
    232            (SimpleDescriptionFormat_t *)NULL,  // No Simple description for ZDO
    233            (afNetworkLatencyReq_t)0            // No Network Latency req
    234          };
    235          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    236          uint16 ZDApp_SavedPollRate = POLL_RATE;
   \                     ZDApp_SavedPollRate:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for ZDApp_SavedPollRate>`
   \   000002                REQUIRE __INIT_XDATA_I
    237          
    238          /*********************************************************************
    239           * @fn      ZDApp_Init
    240           *
    241           * @brief   ZDApp Initialization function.
    242           *
    243           * @param   task_id - ZDApp Task ID
    244           *
    245           * @return  None
    246           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    247          void ZDApp_Init( uint8 task_id )
   \                     ZDApp_Init:
    248          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    249            // Save the task ID
    250            ZDAppTaskID = task_id;
   \   000006   90....       MOV     DPTR,#ZDAppTaskID
   \   000009   F0           MOVX    @DPTR,A
    251          
    252            // Initialize the ZDO global device short address storage
    253            ZDAppNwkAddr.addrMode = Addr16Bit;
   \   00000A   90....       MOV     DPTR,#ZDAppNwkAddr + 8
   \   00000D   7402         MOV     A,#0x2
   \   00000F   F0           MOVX    @DPTR,A
    254            ZDAppNwkAddr.addr.shortAddr = INVALID_NODE_ADDR;
   \   000010   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000013   74FE         MOV     A,#-0x2
   \   000015   F0           MOVX    @DPTR,A
   \   000016   A3           INC     DPTR
   \   000017   04           INC     A
   \   000018   F0           MOVX    @DPTR,A
    255            (void)NLME_GetExtAddr();  // Load the saveExtAddr pointer.
   \   000019                ; Setup parameters for call to function NLME_GetExtAddr
   \   000019   12....       LCALL   ??NLME_GetExtAddr?relay
    256          
    257            // Check for manual "Hold Auto Start"
    258            ZDAppCheckForHoldKey();
   \   00001C                ; Setup parameters for call to function ZDAppCheckForHoldKey
   \   00001C   12....       LCALL   ??ZDAppCheckForHoldKey?relay
    259          
    260            // Initialize ZDO items and setup the device - type of device to create.
    261            ZDO_Init();
   \   00001F                ; Setup parameters for call to function ZDO_Init
   \   00001F   12....       LCALL   ??ZDO_Init?relay
    262          
    263            // Register the endpoint description with the AF
    264            // This task doesn't have a Simple description, but we still need
    265            // to register the endpoint.
    266            afRegister( (endPointDesc_t *)&ZDApp_epDesc );
   \   000022                ; Setup parameters for call to function afRegister
   \   000022   7A..         MOV     R2,#ZDApp_epDesc & 0xff
   \   000024   7B..         MOV     R3,#(ZDApp_epDesc >> 8) & 0xff
   \   000026   12....       LCALL   ??afRegister?relay
    267          
    268          #if defined( ZDO_USERDESC_RESPONSE )
    269            ZDApp_InitUserDesc();
   \   000029                ; Setup parameters for call to function ZDApp_InitUserDesc
   \   000029   12....       LCALL   ??ZDApp_InitUserDesc?relay
    270          #endif // ZDO_USERDESC_RESPONSE
    271          
    272            // Start the device?
    273            if ( devState != DEV_HOLD )
   \   00002C   90....       MOV     DPTR,#devState
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   6009         JZ      ??ZDApp_Init_0
    274            {
    275              ZDOInitDevice( 0 );
   \   000032                ; Setup parameters for call to function ZDOInitDevice
   \   000032   7A00         MOV     R2,#0x0
   \   000034   7B00         MOV     R3,#0x0
   \   000036   12....       LCALL   ??ZDOInitDevice?relay
   \   000039   800D         SJMP    ??ZDApp_Init_1
    276            }
    277            else
    278            {
    279              // Blink LED to indicate HOLD_START
    280              HalLedBlink ( HAL_LED_4, 0, 50, 500 );
   \                     ??ZDApp_Init_0:
   \   00003B                ; Setup parameters for call to function HalLedBlink
   \   00003B   7CF4         MOV     R4,#-0xc
   \   00003D   7D01         MOV     R5,#0x1
   \   00003F   7B32         MOV     R3,#0x32
   \   000041   7A00         MOV     R2,#0x0
   \   000043   7908         MOV     R1,#0x8
   \   000045   12....       LCALL   ??HalLedBlink?relay
    281            }
    282            
    283            ZDApp_RegisterCBs();
   \                     ??ZDApp_Init_1:
   \   000048                ; Setup parameters for call to function ZDApp_RegisterCBs
   \   000048   12....       LCALL   ??ZDApp_RegisterCBs?relay
    284          } /* ZDApp_Init() */
   \   00004B   02....       LJMP    ??Subroutine28_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine28_0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    285          
    286          /*********************************************************************
    287           * @fn          ZDApp_SecInit
    288           *
    289           * @brief       ZDApp initialize security.
    290           *
    291           * @param       state - device initialization state
    292           *
    293           * @return      none
    294           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    295          void ZDApp_SecInit( uint8 state )
   \                     ZDApp_SecInit:
    296          {  
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    297            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
    298            {
    299              // Set the Trust Center bit
    300              ZDO_Config_Node_Descriptor.ServerMask |= PRIM_TRUST_CENTER;
    301            }
    302          
    303            if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
    304            {
    305              ZDO_Config_Node_Descriptor.CapabilityFlags |= CAPINFO_SECURITY_CAPABLE;
    306            }
    307              
    308            // Initialize ZigBee Device Security Manager
    309            ZDSecMgrInit(state);
   \   000005                ; Setup parameters for call to function ZDSecMgrInit
   \   000005   12....       LCALL   ??ZDSecMgrInit?relay
    310          
    311            if ( ZG_SECURE_ENABLED )
    312            {
    313              if ( state != ZDO_INITDEV_RESTORED_NETWORK_STATE )
    314              {
    315                nwkFrameCounter = 0;
    316            
    317                if( _NIB.nwkKeyLoaded == FALSE )
    318                {
    319                  if ( ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE          ) ||
    320                       ( ( zgSecurityMode == ZG_SECURITY_RESIDENTIAL ) && zgPreConfigKeys )    )
    321                  {
    322                      SSP_UpdateNwkKey( (byte*)zgPreConfigKey, 0);
    323                      SSP_SwitchNwkKey( 0 );
    324                  }
    325                }
    326              }
    327            }    
    328          }
   \   000008   02....       LJMP    ??Subroutine28_0 & 0xFFFF
    329          
    330          /*********************************************************************
    331           * @fn      ZDApp_event_loop()
    332           *
    333           * @brief   Main event loop for Zigbee device objects task. This function
    334           *          should be called at periodic intervals.
    335           *
    336           * @param   task_id - Task ID
    337           * @param   events  - Bitmap of events
    338           *
    339           * @return  none
    340           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    341          UINT16 ZDApp_event_loop( uint8 task_id, UINT16 events )
   \                     ZDApp_event_loop:
    342          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    343            /*
    344            uint8 *msg_ptr;
    345          
    346            if ( events & SYS_EVENT_MSG )
    347            {
    348              while ( (msg_ptr = osal_msg_receive( ZDAppTaskID )) )
    349              {
    350                ZDApp_ProcessOSALMsg( (osal_event_hdr_t *)msg_ptr );
    351          
    352                // Release the memory
    353                osal_msg_deallocate( msg_ptr );
    354              }
    355          
    356              // Return unprocessed events
    357              return (events ^ SYS_EVENT_MSG);
    358            }
    359          
    360            if ( events & ZDO_NETWORK_INIT )
    361            {
    362              // Initialize apps and start the network
    363              devState = DEV_INIT;
    364              
    365              ZDO_StartDevice( (uint8)ZDO_Config_Node_Descriptor.LogicalType, devStartMode,
    366                               DEFAULT_BEACON_ORDER, DEFAULT_SUPERFRAME_ORDER );
    367          
    368              // Return unprocessed events
    369              return (events ^ ZDO_NETWORK_INIT);
    370            }
    371          
    372            if ( ZSTACK_ROUTER_BUILD )
    373            {
    374              if ( events & ZDO_NETWORK_START )
    375              {
    376                ZDApp_NetworkStartEvt();
    377            
    378                // Return unprocessed events
    379                return (events ^ ZDO_NETWORK_START);
    380              }
    381          
    382              if ( events & ZDO_ROUTER_START )
    383              {
    384                if ( nwkStatus == ZSuccess )
    385                {
    386                  if ( devState == DEV_END_DEVICE )
    387                    devState = DEV_ROUTER;
    388            
    389                  osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
    390                }
    391                else
    392                {
    393                  // remain as end device!!
    394                }
    395                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
    396            
    397                // Return unprocessed events
    398                return (events ^ ZDO_ROUTER_START);
    399              }
    400            }
    401            
    402            if ( events & ZDO_STATE_CHANGE_EVT )
    403            {
    404              ZDO_UpdateNwkStatus( devState );
    405              
    406              // At start up, do one MTO route discovery if the device is a concentrator
    407              if ( zgConcentratorEnable == TRUE ) 
    408              {
    409                // Start next event
    410                osal_start_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT, 100 );
    411              }
    412              
    413              // Return unprocessed events
    414              return (events ^ ZDO_STATE_CHANGE_EVT);
    415            }
    416          
    417            if ( events & ZDO_COMMAND_CNF )
    418            {
    419              // User defined logic
    420          
    421              // Return unprocessed events
    422              return (events ^ ZDO_COMMAND_CNF);
    423            }
    424            
    425            if ( events & ZDO_NWK_UPDATE_NV )
    426            {
    427              ZDApp_SaveNetworkStateEvt();
    428          
    429              // Return unprocessed events
    430              return (events ^ ZDO_NWK_UPDATE_NV);
    431            }
    432          
    433            if ( events & ZDO_DEVICE_RESET )
    434            {
    435              // The device has been in the UNAUTH state, so reset
    436              // Note: there will be no return from this call
    437              SystemReset();
    438            }
    439          
    440            if ( ZG_SECURE_ENABLED )
    441            {
    442              return ( ZDApp_ProcessSecEvent( task_id, events ) );
    443            }
    444            else
    445            {
    446              // Discard or make more handlers
    447              return 0;
    448            }
    449            */
    450            return 0;
   \   000000                REQUIRE ?Subroutine1
   \   000000                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7A00         MOV     R2,#0x0
   \   000002   7B00         MOV     R3,#0x0
   \   000004   02....       LJMP    ?BRET
    451          }
    452          
    453          /*********************************************************************
    454           * @fn      ZDApp_ProcessSecEvent()
    455           *
    456           * @brief   Process incoming security events.
    457           *
    458           * @param   task_id - Task ID
    459           * @param   events  - Bitmap of events
    460           *
    461           * @return  none
    462           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    463          UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events )
   \                     ZDApp_ProcessSecEvent:
    464          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    465            (void)task_id;  // Intentionally unreferenced parameter
    466            /*
    467            if ( ZSTACK_ROUTER_BUILD )
    468            {
    469              if ( events & ZDO_NEW_DEVICE )
    470              {
    471                // process the new device event
    472                if ( ZDSecMgrNewDeviceEvent() == TRUE )
    473                {
    474                  osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, 1000 );
    475                }
    476          
    477                // Return unprocessed events
    478                return (events ^ ZDO_NEW_DEVICE);
    479              }
    480            }
    481          
    482            if ( (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH) 
    483                || (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD) )
    484            {
    485              if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
    486              { 
    487                if ( events & ZDO_SECMGR_EVENT )
    488                {
    489                  ZDSecMgrEvent();
    490          
    491                  // Return unprocessed events
    492                  return (events ^ ZDO_SECMGR_EVENT);
    493                }
    494              }
    495            }
    496            
    497            if ( events & ZDO_DEVICE_AUTH )
    498            {
    499              ZDApp_DeviceAuthEvt();
    500          
    501              // Return unprocessed events
    502              return (events ^ ZDO_DEVICE_AUTH);
    503            }
    504          
    505            if ( events & ZDO_FRAMECOUNTER_CHANGE )
    506            {
    507              if ( nwkFrameCounterChanges++ > MAX_NWK_FRAMECOUNTER_CHANGES )
    508                ZDApp_SaveNwkKey();
    509          
    510              // Return unprocessed events
    511              return (events ^ ZDO_FRAMECOUNTER_CHANGE);
    512            }
    513            */
    514            // Discard or make more handlers
    515            return 0;
   \   000000   80..         SJMP    ?Subroutine1
    516          }
    517          
    518          /*********************************************************************
    519           * Application Functions
    520           */
    521          
    522          /*********************************************************************
    523           * @fn      ZDOInitDevice
    524           *
    525           * @brief   Start the device in the network.  This function will read
    526           *   ZCD_NV_STARTUP_OPTION (NV item) to determine whether or not to
    527           *   restore the network state of the device.
    528           *
    529           * @param   startDelay - timeDelay to start device (in milliseconds).
    530           *      There is a jitter added to this delay:
    531           *              ((NWK_START_DELAY + startDelay)
    532           *              + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK))
    533           *
    534           * NOTE:    If the application would like to force a "new" join, the
    535           *          application should set the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    536           *          bit in the ZCD_NV_STARTUP_OPTION NV item before calling
    537           *          this function. "new" join means to not restore the network
    538           *          state of the device. Use zgWriteStartupOptions() to set these
    539           *          options.
    540           *
    541           * @return
    542           *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
    543           *          restored.
    544           *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was initialized.
    545           *          This could mean that ZCD_NV_STARTUP_OPTION said to not restore, or
    546           *          it could mean that there was no network state to restore.
    547           *    ZDO_INITDEV_LEAVE_NOT_STARTED - Before the reset, a network leave was issued
    548           *          with the rejoin option set to TRUE.  So, the device was not
    549           *          started in the network (one time only).  The next time this
    550           *          function is called it will start.
    551           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    552          uint8 ZDOInitDevice( uint16 startDelay )
   \                     ZDOInitDevice:
    553          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EA           MOV     A,R2
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   EB           MOV     A,R3
   \   000014   F0           MOVX    @DPTR,A
    554            uint8 networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
    555            uint16 extendedDelay = 0;
    556          
    557            if ( devState == DEV_HOLD )
   \   000015   90....       MOV     DPTR,#devState
   \   000018   E0           MOVX    A,@DPTR
   \   000019   7005         JNZ     ??ZDOInitDevice_0
    558            {    
    559              // Initialize the RAM items table, in case an NV item has been updated.
    560              zgInitItems( FALSE );
   \   00001B                ; Setup parameters for call to function zgInitItems
   \   00001B   7900         MOV     R1,#0x0
   \   00001D   12....       LCALL   ??zgInitItems?relay
    561            }
    562          
    563            ZDConfig_InitDescriptors();
   \                     ??ZDOInitDevice_0:
   \   000020                ; Setup parameters for call to function ZDConfig_InitDescriptors
   \   000020   12....       LCALL   ??ZDConfig_InitDescriptors?relay
    564            //devtag.071807.todo - fix this temporary solution
    565            _NIB.CapabilityInfo = ZDO_Config_Node_Descriptor.CapabilityFlags;
   \   000023   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000026   E0           MOVX    A,@DPTR
   \   000027   90....       MOV     DPTR,#_NIB + 14
   \   00002A   F0           MOVX    @DPTR,A
    566            
    567            devState = DEV_INIT;    // Remove the Hold state
   \   00002B   90....       MOV     DPTR,#devState
   \   00002E   7401         MOV     A,#0x1
   \   000030   F0           MOVX    @DPTR,A
    568          
    569            // Initialize leave control logic
    570            ZDApp_LeaveCtrlInit();
   \   000031                ; Setup parameters for call to function ZDApp_LeaveCtrlInit
   \   000031   12....       LCALL   ??ZDApp_LeaveCtrlInit?relay
    571          
    572            // Check leave control reset settings
    573            ZDApp_LeaveCtrlStartup( &devState, &startDelay );
   \   000034                ; Setup parameters for call to function ZDApp_LeaveCtrlStartup
   \   000034   85..82       MOV     DPL,?XSP + 0
   \   000037   85..83       MOV     DPH,?XSP + 1
   \   00003A   AC82         MOV     R4,DPL
   \   00003C   AD83         MOV     R5,DPH
   \   00003E   7A..         MOV     R2,#devState & 0xff
   \   000040   7B..         MOV     R3,#(devState >> 8) & 0xff
   \   000042   12....       LCALL   ??ZDApp_LeaveCtrlStartup?relay
    574          
    575            // Leave may make the hold state come back
    576            if ( devState == DEV_HOLD )
   \   000045   90....       MOV     DPTR,#devState
   \   000048   E0           MOVX    A,@DPTR
   \   000049   700E         JNZ     ??ZDOInitDevice_1
    577            {
    578              // Set the NV startup option to force a "new" join.
    579              zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   00004B                ; Setup parameters for call to function zgWriteStartupOptions
   \   00004B   7A02         MOV     R2,#0x2
   \   00004D   79FF         MOV     R1,#-0x1
   \   00004F   12....       LCALL   ??zgWriteStartupOptions?relay
    580          
    581              // Notify the applications 
    582              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000052                ; Setup parameters for call to function osal_set_event
   \   000052   12....       LCALL   ?Subroutine11 & 0xFFFF
    583              
    584              return ( ZDO_INITDEV_LEAVE_NOT_STARTED );   // Don't join - (one time).
   \                     ??CrossCallReturnLabel_26:
   \   000055   7902         MOV     R1,#0x2
   \   000057   8036         SJMP    ??ZDOInitDevice_2
    585            }
    586          
    587          #if defined ( NV_RESTORE )
    588            // Get Keypad directly to see if a reset nv is needed.
    589            // Hold down the SW_BYPASS_NV key (defined in OnBoard.h)
    590            // while booting to skip past NV Restore.
    591            if ( HalKeyRead() == SW_BYPASS_NV )
    592              networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
    593            else
    594            {
    595              // Determine if NV should be restored
    596              networkStateNV = ZDApp_ReadNetworkRestoreState();
    597            }
    598          
    599            if ( networkStateNV == ZDO_INITDEV_RESTORED_NETWORK_STATE )
    600            {
    601              networkStateNV = ZDApp_RestoreNetworkState();
    602            }
    603            else
    604            {
    605              // Wipe out the network state in NV
    606              NLME_InitNV();
    607              NLME_SetDefaultNV();
    608            }
    609          #endif
    610          
    611            if ( networkStateNV == ZDO_INITDEV_NEW_NETWORK_STATE )
    612            {
    613              ZDAppDetermineDeviceType();
   \                     ??ZDOInitDevice_1:
   \   000059                ; Setup parameters for call to function ZDAppDetermineDeviceType
   \   000059   12....       LCALL   ??ZDAppDetermineDeviceType?relay
    614          
    615              // Only delay if joining network - not restoring network state
    616              extendedDelay = (uint16)((NWK_START_DELAY + startDelay)
    617                        + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK));
   \   00005C                ; Setup parameters for call to function osal_rand
   \   00005C   12....       LCALL   ??osal_rand?relay
   \   00005F   85..82       MOV     DPL,?XSP + 0
   \   000062   85..83       MOV     DPH,?XSP + 1
   \   000065   EA           MOV     A,R2
   \   000066   547F         ANL     A,#0x7f
   \   000068   F8           MOV     R0,A
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   28           ADD     A,R0
   \   00006B   F8           MOV     R0,A
   \   00006C   A3           INC     DPTR
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   3400         ADDC    A,#0x0
   \   000070   F9           MOV     R1,A
   \   000071   E8           MOV     A,R0
   \   000072   2464         ADD     A,#0x64
   \   000074   FE           MOV     R6,A
   \   000075   E9           MOV     A,R1
   \   000076   3400         ADDC    A,#0x0
   \   000078   FF           MOV     R7,A
    618            }
    619          
    620            // Initialize the security for type of device
    621            ZDApp_SecInit( networkStateNV );
   \   000079                ; Setup parameters for call to function ZDSecMgrInit
   \   000079   7901         MOV     R1,#0x1
   \   00007B   12....       LCALL   ??ZDSecMgrInit?relay
    622            
    623            // Trigger the network start
    624            ZDApp_NetworkInit( extendedDelay );
   \   00007E                ; Setup parameters for call to function ZDApp_NetworkInit
   \   00007E   EE           MOV     A,R6
   \   00007F   FA           MOV     R2,A
   \   000080   EF           MOV     A,R7
   \   000081   FB           MOV     R3,A
   \   000082   12....       LCALL   ??ZDApp_NetworkInit?relay
    625          
    626            // set broadcast address mask to support broadcast filtering
    627            NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
   \   000085                ; Setup parameters for call to function NLME_SetBroadcastFilter
   \   000085   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000088   E0           MOVX    A,@DPTR
   \   000089   F9           MOV     R1,A
   \   00008A   12....       LCALL   ??NLME_SetBroadcastFilter?relay
    628            
    629            return ( networkStateNV );
   \   00008D   7901         MOV     R1,#0x1
   \                     ??ZDOInitDevice_2:
   \   00008F   02....       LJMP    ?Subroutine4 & 0xFFFF
    630          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   7A10         MOV     R2,#0x10
   \   000002                REQUIRE ??Subroutine23_0
   \   000002                ; // Fall through to label ??Subroutine23_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine23_0:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   90....       MOV     DPTR,#ZDAppTaskID
   \   000005   E0           MOVX    A,@DPTR
   \   000006   F9           MOV     R1,A
   \   000007   12....       LCALL   ??osal_set_event?relay
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7402         MOV     A,#0x2
   \   000002                REQUIRE ??Subroutine26_0
   \   000002                ; // Fall through to label ??Subroutine26_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine26_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine27_0
   \   000003                ; // Fall through to label ??Subroutine27_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine27_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    631          
    632          /*********************************************************************
    633           * @fn      ZDApp_ReadNetworkRestoreState
    634           *
    635           * @brief   Read the ZCD_NV_STARTUP_OPTION NV Item to state whether
    636           *          or not to restore the network state.
    637           *          If the read value has the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    638           *          bit set return the ZDO_INITDEV_NEW_NETWORK_STATE.
    639           *
    640           * @param   none
    641           *
    642           * @return  ZDO_INITDEV_NEW_NETWORK_STATE
    643           *          or ZDO_INITDEV_RESTORED_NETWORK_STATE based on whether or
    644           *          not ZCD_STARTOPT_DEFAULT_NETWORK_STATE bit is set in
    645           *          ZCD_NV_STARTUP_OPTION
    646           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    647          uint8 ZDApp_ReadNetworkRestoreState( void )
   \                     ZDApp_ReadNetworkRestoreState:
    648          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    649            uint8 networkStateNV = ZDO_INITDEV_RESTORED_NETWORK_STATE;
   \   000005   7E00         MOV     R6,#0x0
    650          
    651            // Look for the New Network State option.
    652            if ( zgReadStartupOptions() & ZCD_STARTOPT_DEFAULT_NETWORK_STATE )
   \   000007                ; Setup parameters for call to function zgReadStartupOptions
   \   000007   12....       LCALL   ??zgReadStartupOptions?relay
   \   00000A   E9           MOV     A,R1
   \   00000B   A2E1         MOV     C,0xE0 /* A   */.1
   \   00000D   5001         JNC     ??ZDApp_ReadNetworkRestoreState_0
    653            {
    654              networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
   \   00000F   0E           INC     R6
    655            }
    656          
    657            return ( networkStateNV );
   \                     ??ZDApp_ReadNetworkRestoreState_0:
   \   000010   EE           MOV     A,R6
   \   000011   F9           MOV     R1,A
   \   000012   02....       LJMP    ??Subroutine28_0 & 0xFFFF
    658          }
    659          
    660          /*********************************************************************
    661           * @fn      ZDAppDetermineDeviceType()
    662           *
    663           * @brief   Determines the type of device to start. 
    664           *
    665           *          Looks at zgDeviceLogicalType and determines what type of
    666           *          device to start.  The types are:
    667           *            ZG_DEVICETYPE_COORDINATOR
    668           *            ZG_DEVICETYPE_ROUTER
    669           *            ZG_DEVICETYPE_ENDDEVICE
    670           *
    671           * @param   none
    672           *
    673           * @return  none
    674           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    675          void ZDAppDetermineDeviceType( void )
   \                     ZDAppDetermineDeviceType:
    676          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    677            if ( zgDeviceLogicalType == ZG_DEVICETYPE_COORDINATOR )
   \   000004   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000007   E0           MOVX    A,@DPTR
   \   000008   700E         JNZ     ??ZDAppDetermineDeviceType_0
    678            {
    679              devStartMode = MODE_HARD;     // Start as a coordinator
   \   00000A   90....       MOV     DPTR,#devStartMode
   \   00000D   7402         MOV     A,#0x2
   \   00000F   F0           MOVX    @DPTR,A
    680              ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
   \   000010   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000013   E0           MOVX    A,@DPTR
   \   000014   54F8         ANL     A,#0xf8
   \   000016   802E         SJMP    ??ZDAppDetermineDeviceType_1
    681            }
    682            else
    683            {
    684              if ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER  )
   \                     ??ZDAppDetermineDeviceType_0:
   \   000018   6401         XRL     A,#0x1
   \   00001A   700A         JNZ     ??ZDAppDetermineDeviceType_2
    685                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_ROUTER;
   \   00001C   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   54F8         ANL     A,#0xf8
   \   000022   4401         ORL     A,#0x1
   \   000024   800D         SJMP    ??ZDAppDetermineDeviceType_3
    686              else if ( zgDeviceLogicalType == ZG_DEVICETYPE_ENDDEVICE )
   \                     ??ZDAppDetermineDeviceType_2:
   \   000026   E0           MOVX    A,@DPTR
   \   000027   6402         XRL     A,#0x2
   \   000029   7009         JNZ     ??ZDAppDetermineDeviceType_4
    687                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
   \   00002B   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   54F8         ANL     A,#0xf8
   \   000031   4402         ORL     A,#0x2
   \                     ??ZDAppDetermineDeviceType_3:
   \   000033   F0           MOVX    @DPTR,A
    688              
    689              // If AIB_apsUseExtendedPANID is set to a non-zero value by commissioning
    690              // The device shall do rejoin the network. Otherwise, do normal join
    691              if ( nwk_ExtPANIDValid( AIB_apsUseExtendedPANID ) == false )
   \                     ??ZDAppDetermineDeviceType_4:
   \   000034                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   000034   7A..         MOV     R2,#AIB_apsUseExtendedPANID & 0xff
   \   000036   7B..         MOV     R3,#(AIB_apsUseExtendedPANID >> 8) & 0xff
   \   000038   12....       LCALL   ??nwk_ExtPANIDValid?relay
   \   00003B   E9           MOV     A,R1
   \   00003C   90....       MOV     DPTR,#devStartMode
   \   00003F   7003         JNZ     ??ZDAppDetermineDeviceType_5
    692              {
    693                devStartMode = MODE_JOIN;     // Assume joining
   \   000041   E4           CLR     A
   \   000042   8002         SJMP    ??ZDAppDetermineDeviceType_1
    694              }
    695              else
    696              {
    697                devStartMode = MODE_REJOIN;  
   \                     ??ZDAppDetermineDeviceType_5:
   \   000044   7403         MOV     A,#0x3
   \                     ??ZDAppDetermineDeviceType_1:
   \   000046   F0           MOVX    @DPTR,A
    698              }
    699            }
    700          }
   \   000047   02....       LJMP    ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    701          
    702          /*********************************************************************
    703           * @fn      ZDApp_NetworkStartEvt()
    704           *
    705           * @brief   Process the Network Start Event
    706           *
    707           * @param   none
    708           *
    709           * @return  none
    710           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    711          void ZDApp_NetworkStartEvt( void )
   \                     ZDApp_NetworkStartEvt:
    712          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    713            if ( nwkStatus == ZSuccess )
   \   000004   90....       MOV     DPTR,#nwkStatus
   \   000007   E0           MOVX    A,@DPTR
   \   000008   7012         JNZ     ??ZDApp_NetworkStartEvt_0
    714            {
    715              // Successfully started a ZigBee network
    716              if ( devState == DEV_COORD_STARTING )
   \   00000A   90....       MOV     DPTR,#devState
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6408         XRL     A,#0x8
   \   000010   7003         JNZ     ??ZDApp_NetworkStartEvt_1
    717              {
    718                devState = DEV_ZB_COORD;
   \   000012   7409         MOV     A,#0x9
   \   000014   F0           MOVX    @DPTR,A
    719              }
    720          
    721              osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
   \                     ??ZDApp_NetworkStartEvt_1:
   \   000015                ; Setup parameters for call to function osal_pwrmgr_device
   \   000015   7900         MOV     R1,#0x0
   \   000017   12....       LCALL   ??osal_pwrmgr_device?relay
    722              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   00001A                ; Setup parameters for call to function osal_set_event
   \   00001A   802B         SJMP    ??ZDApp_NetworkStartEvt_2
    723            }
    724            else
    725            {
    726              // Try again with a higher energy threshold !!
    727              if ( ( NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT ) < 0xff )
   \                     ??ZDApp_NetworkStartEvt_0:
   \   00001C                ; Setup parameters for call to function NLME_GetEnergyThreshold
   \   00001C   12....       LCALL   ??NLME_GetEnergyThreshold?relay
   \   00001F   E9           MOV     A,R1
   \   000020   2410         ADD     A,#0x10
   \   000022   F8           MOV     R0,A
   \   000023   E4           CLR     A
   \   000024   3400         ADDC    A,#0x0
   \   000026   F9           MOV     R1,A
   \   000027   E8           MOV     A,R0
   \   000028   94FF         SUBB    A,#-0x1
   \   00002A   E9           MOV     A,R1
   \   00002B   9400         SUBB    A,#0x0
   \   00002D   C3           CLR     C
   \   00002E   65D0         XRL     A,PSW
   \   000030   33           RLC     A
   \   000031   500E         JNC     ??ZDApp_NetworkStartEvt_3
    728              {
    729                NLME_SetEnergyThreshold( (uint8)(NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT) );
   \   000033                ; Setup parameters for call to function NLME_SetEnergyThreshold
   \   000033                ; Setup parameters for call to function NLME_GetEnergyThreshold
   \   000033   12....       LCALL   ??NLME_GetEnergyThreshold?relay
   \   000036   E9           MOV     A,R1
   \   000037   2410         ADD     A,#0x10
   \   000039   F9           MOV     R1,A
   \   00003A   12....       LCALL   ??NLME_SetEnergyThreshold?relay
    730                osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
   \   00003D                ; Setup parameters for call to function osal_set_event
   \   00003D   7A01         MOV     R2,#0x1
   \   00003F   8008         SJMP    ??ZDApp_NetworkStartEvt_4
    731              }
    732              else
    733              {
    734                // Failed to start network. Enter a dormant state (until user intervenes)
    735                devState = DEV_INIT;
   \                     ??ZDApp_NetworkStartEvt_3:
   \   000041   90....       MOV     DPTR,#devState
   \   000044   7401         MOV     A,#0x1
   \   000046   F0           MOVX    @DPTR,A
    736                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000047                ; Setup parameters for call to function osal_set_event
   \                     ??ZDApp_NetworkStartEvt_2:
   \   000047   7A10         MOV     R2,#0x10
    737              }
    738            }
   \                     ??ZDApp_NetworkStartEvt_4:
   \   000049   12....       LCALL   ??Subroutine23_0 & 0xFFFF
    739          }
   \                     ??CrossCallReturnLabel_30:
   \   00004C   02....       LJMP    ?Subroutine2 & 0xFFFF
    740          
    741          /*********************************************************************
    742           * @fn      ZDApp_DeviceAuthEvt()
    743           *
    744           * @brief   Process the Device Authentic Event
    745           *
    746           * @param   none
    747           *
    748           * @return  none
    749           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    750          void ZDApp_DeviceAuthEvt( void )
   \                     ZDApp_DeviceAuthEvt:
    751          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    752            // received authentication from trust center
    753            if ( devState == DEV_END_DEVICE_UNAUTH )
   \   000004   90....       MOV     DPTR,#devState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6405         XRL     A,#0x5
   \   00000A   701F         JNZ     ??ZDApp_DeviceAuthEvt_0
    754            {
    755              // Stop the reset timer so it doesn't reset
    756              ZDApp_ResetTimerCancel();
   \   00000C                ; Setup parameters for call to function ZDApp_ResetTimerCancel
   \   00000C   12....       LCALL   ??ZDApp_ResetTimerCancel?relay
    757          
    758              devState = DEV_END_DEVICE;
   \   00000F   12....       LCALL   ?Subroutine8 & 0xFFFF
    759              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
    760          
    761              // Set the Power Manager Device
    762          #if defined ( POWER_SAVING )
    763              osal_pwrmgr_device( PWRMGR_BATTERY );
    764          #endif
    765          
    766              if ( ZSTACK_ROUTER_BUILD )
    767              {
    768                if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
    769                {
    770                  // NOTE: first two parameters are not used, see NLMEDE.h for details
    771                  NLME_StartRouterRequest( 0, 0, false );
    772                }
    773              }
    774          
    775              // Notify to save info into NV
    776              ZDApp_NVUpdate();
    777          
    778              // Save off the security
    779              ZDApp_SaveNwkKey();
   \                     ??CrossCallReturnLabel_0:
   \   000012                ; Setup parameters for call to function ZDApp_SaveNwkKey
   \   000012   12....       LCALL   ??ZDApp_SaveNwkKey?relay
    780          
    781              ZDApp_AnnounceNewAddress();
   \   000015                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000015   12....       LCALL   ??ZDApp_AnnounceNewAddress?relay
    782              
    783              if ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE) == 0 )
   \   000018   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   A2E3         MOV     C,0xE0 /* A   */.3
   \   00001E   400B         JC      ??ZDApp_DeviceAuthEvt_0
    784              {
    785                NLME_SetPollRate( ZDApp_SavedPollRate );
   \   000020                ; Setup parameters for call to function NLME_SetPollRate
   \   000020   90....       MOV     DPTR,#ZDApp_SavedPollRate
   \   000023   E0           MOVX    A,@DPTR
   \   000024   FA           MOV     R2,A
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   FB           MOV     R3,A
   \   000028   12....       LCALL   ??NLME_SetPollRate?relay
    786              }
    787            }
    788            else
    789            {
    790              ZDApp_NVUpdate();
    791            }
    792          }
   \                     ??ZDApp_DeviceAuthEvt_0:
   \   00002B   02....       LJMP    ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   90....       MOV     DPTR,#devState
   \   000003   7406         MOV     A,#0x6
   \   000005   F0           MOVX    @DPTR,A
   \   000006                ; Setup parameters for call to function osal_set_event
   \   000006                ; Setup parameters for call to function osal_set_event
   \   000006   7A10         MOV     R2,#0x10
   \   000008   7B00         MOV     R3,#0x0
   \   00000A   90....       MOV     DPTR,#ZDAppTaskID
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F9           MOV     R1,A
   \   00000F   12....       LCALL   ??osal_set_event?relay
   \   000012   22           RET
    793          
    794          /*********************************************************************
    795           * @fn      ZDApp_SaveNetworkStateEvt()
    796           *
    797           * @brief   Process the Save the Network State Event
    798           *
    799           * @param   none
    800           *
    801           * @return  none
    802           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    803          void ZDApp_SaveNetworkStateEvt( void )
   \                     ZDApp_SaveNetworkStateEvt:
    804          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    805          #if defined ( NV_RESTORE )
    806           #if defined ( NV_TURN_OFF_RADIO )
    807            // Turn off the radio's receiver during an NV update
    808            uint8 RxOnIdle;
    809            uint8 x = false;
    810            ZMacGetReq( ZMacRxOnIdle, &RxOnIdle );
    811            ZMacSetReq( ZMacRxOnIdle, &x );
    812           #endif
    813          
    814            // Update the Network State in NV
    815            NLME_UpdateNV( NWK_NV_NIB_ENABLE        |
    816                           NWK_NV_DEVICELIST_ENABLE |
    817                           NWK_NV_BINDING_ENABLE    |
    818                           NWK_NV_ADDRMGR_ENABLE );
    819          
    820            // Reset the NV startup option to resume from NV by
    821            // clearing the "New" join option.
    822            zgWriteStartupOptions( FALSE, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
    823          
    824           #if defined ( NV_TURN_OFF_RADIO )
    825            ZMacSetReq( ZMacRxOnIdle, &RxOnIdle );
    826           #endif
    827          #endif  // NV_RESTORE
    828          }
   \   000000   02....       LJMP    ?BRET
    829          
    830          /*********************************************************************
    831           * @fn      ZDApp_RestoreNetworkState()
    832           *
    833           * @brief   This function will restore the network state of the
    834           *          device if the network state is stored in NV.
    835           *
    836           * @param   none
    837           *
    838           * @return
    839           *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
    840           *          restored.
    841           *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was not used.
    842           *          This could mean that zgStartupOption said to not restore, or
    843           *          it could mean that there was no network state to restore.
    844           *
    845           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    846          uint8 ZDApp_RestoreNetworkState( void )
   \                     ZDApp_RestoreNetworkState:
    847          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    848            uint8 nvStat;
    849            nwkActiveKeyItems keyItems;
    850          
    851            // Initialize NWK NV items
    852            nvStat = NLME_InitNV();
   \   000005                ; Setup parameters for call to function NLME_InitNV
   \   000005   12....       LCALL   ??NLME_InitNV?relay
   \   000008   E9           MOV     A,R1
   \   000009   FE           MOV     R6,A
    853          
    854            if ( nvStat != NV_OPER_FAILED )
   \   00000A   740A         MOV     A,#0xa
   \   00000C   6E           XRL     A,R6
   \   00000D   6031         JZ      ??ZDApp_RestoreNetworkState_0
    855            {
    856              if ( NLME_RestoreFromNV() )
   \   00000F                ; Setup parameters for call to function NLME_RestoreFromNV
   \   00000F   12....       LCALL   ??NLME_RestoreFromNV?relay
   \   000012   E9           MOV     A,R1
   \   000013   602B         JZ      ??ZDApp_RestoreNetworkState_0
    857              {
    858                // Are we a coordinator
    859                ZDAppNwkAddr.addr.shortAddr = NLME_GetShortAddr();
   \   000015                ; Setup parameters for call to function NLME_GetShortAddr
   \   000015   12....       LCALL   ??NLME_GetShortAddr?relay
   \   000018   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00001B   EA           MOV     A,R2
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   A3           INC     DPTR
   \   00001E   EB           MOV     A,R3
   \   00001F   F0           MOVX    @DPTR,A
    860                if ( ZDAppNwkAddr.addr.shortAddr == 0 )
   \   000020   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000023   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000026   E8           MOV     A,R0
   \   000027   49           ORL     A,R1
   \   000028   7007         JNZ     ??ZDApp_RestoreNetworkState_1
    861                  ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
   \   00002A   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   54F8         ANL     A,#0xf8
   \   000030   F0           MOVX    @DPTR,A
    862                devStartMode = MODE_RESUME;
   \                     ??ZDApp_RestoreNetworkState_1:
   \   000031   90....       MOV     DPTR,#devStartMode
   \   000034   7401         MOV     A,#0x1
   \   000036   12....       LCALL   ?Subroutine9 & 0xFFFF
    863                osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
    864              }
    865              else
    866                nvStat = NV_ITEM_UNINIT;
    867          
    868              if ( ZG_SECURE_ENABLED )
    869              {
    870                nwkFrameCounterChanges = 0;
    871                osal_memset( &keyItems, 0, sizeof( nwkActiveKeyItems ) );
    872                osal_nv_item_init( ZCD_NV_NWKKEY, sizeof(nwkActiveKeyItems), (void *)&keyItems );
    873          
    874                if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
    875                {
    876                  ZDApp_RestoreNwkKey();
    877                }
    878              }
    879          
    880              // The default for RxOnWhenIdle is true for Routers and false for end devices
    881              // [setup in the NLME_RestoreFromNV()].  Change it here if you want something
    882              // other than default.
    883            }
    884          
    885            if ( nvStat == ZSUCCESS )
   \                     ??CrossCallReturnLabel_2:
   \   000039   EE           MOV     A,R6
   \   00003A   7004         JNZ     ??ZDApp_RestoreNetworkState_0
    886              return ( ZDO_INITDEV_RESTORED_NETWORK_STATE );
   \   00003C   7900         MOV     R1,#0x0
   \   00003E   8002         SJMP    ??ZDApp_RestoreNetworkState_2
    887            else
    888              return ( ZDO_INITDEV_NEW_NETWORK_STATE );
   \                     ??ZDApp_RestoreNetworkState_0:
   \   000040   7901         MOV     R1,#0x1
   \                     ??ZDApp_RestoreNetworkState_2:
   \   000042   02....       LJMP    ??Subroutine28_0 & 0xFFFF
    889          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function sAddrExtCpy
   \   000001                ; Setup parameters for call to function sAddrExtCpy
   \   000001   7C..         MOV     R4,#(_NIB + 53) & 0xff
   \   000003   7D..         MOV     R5,#((_NIB + 53) >> 8) & 0xff
   \   000005   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   000007   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000009   12....       LCALL   ??sAddrExtCpy?relay
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET
    890          
    891          /*********************************************************************
    892           * @fn      ZDApp_InitUserDesc()
    893           *
    894           * @brief   Initialize the User Descriptor, the descriptor is read from NV
    895           *          when needed.  If you want to initialize the User descriptor to
    896           *          something other than all zero, do it here.
    897           *
    898           * @param   none
    899           *
    900           * @return  none
    901           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    902          void ZDApp_InitUserDesc( void )
   \                     ZDApp_InitUserDesc:
    903          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV     A,#-0x11
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    904            UserDescriptorFormat_t ZDO_DefaultUserDescriptor;
    905          
    906            // Initialize the User Descriptor, the descriptor is read from NV
    907            // when needed.  If you want to initialize the User descriptor to something
    908            // other than all zero, do it here.
    909            osal_memset( &ZDO_DefaultUserDescriptor, 0, sizeof( UserDescriptorFormat_t ) );
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C11         MOV     R4,#0x11
   \   00000C   12....       LCALL   ?Subroutine20 & 0xFFFF
    910            if ( ZSUCCESS == osal_nv_item_init( ZCD_NV_USERDESC,
    911                   sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
   \                     ??CrossCallReturnLabel_21:
   \   00000F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000012   7C11         MOV     R4,#0x11
   \   000014   7D00         MOV     R5,#0x0
   \   000016   7A81         MOV     R2,#-0x7f
   \   000018   7B00         MOV     R3,#0x0
   \   00001A   12....       LCALL   ??osal_nv_item_init?relay
   \   00001D   7402         MOV     A,#0x2
   \   00001F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000022   E9           MOV     A,R1
   \   000023   7033         JNZ     ??ZDApp_InitUserDesc_0
    912            {
    913              if ( ZSUCCESS == osal_nv_read( ZCD_NV_USERDESC, 0,
    914                   sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
   \   000025                ; Setup parameters for call to function osal_nv_read
   \   000025   78..         MOV     R0,#?V0 + 0
   \   000027   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002A   75..11       MOV     ?V0 + 0,#0x11
   \   00002D   75..00       MOV     ?V0 + 1,#0x0
   \   000030   78..         MOV     R0,#?V0 + 0
   \   000032   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000035   7C00         MOV     R4,#0x0
   \   000037   7D00         MOV     R5,#0x0
   \   000039   7A81         MOV     R2,#-0x7f
   \   00003B   7B00         MOV     R3,#0x0
   \   00003D   12....       LCALL   ??osal_nv_read?relay
   \   000040   7404         MOV     A,#0x4
   \   000042   12....       LCALL   ?DEALLOC_XSTACK8
   \   000045   E9           MOV     A,R1
   \   000046   7010         JNZ     ??ZDApp_InitUserDesc_0
    915              {
    916                if ( ZDO_DefaultUserDescriptor.len != 0 )
   \   000048   85..82       MOV     DPL,?XSP + 0
   \   00004B   85..83       MOV     DPH,?XSP + 1
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   6007         JZ      ??ZDApp_InitUserDesc_0
    917                {
    918                  ZDO_Config_Node_Descriptor.UserDescAvail = TRUE;
   \   000051   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000054   E0           MOVX    A,@DPTR
   \   000055   D2E4         SETB    0xE0 /* A   */.4
   \   000057   F0           MOVX    @DPTR,A
    919                }
    920              }
    921            }
    922          }
   \                     ??ZDApp_InitUserDesc_0:
   \   000058   7411         MOV     A,#0x11
   \   00005A   02....       LJMP    ??Subroutine26_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   7D00         MOV     R5,#0x0
   \   000002   7900         MOV     R1,#0x0
   \   000004   85..82       MOV     DPL,?XSP + 0
   \   000007   85..83       MOV     DPH,?XSP + 1
   \   00000A   AA82         MOV     R2,DPL
   \   00000C   AB83         MOV     R3,DPH
   \   00000E   12....       LCALL   ??osal_memset?relay
   \   000011                ; Setup parameters for call to function osal_nv_item_init
   \   000011                ; Setup parameters for call to function osal_nv_write
   \   000011   85..82       MOV     DPL,?XSP + 0
   \   000014   85..83       MOV     DPH,?XSP + 1
   \   000017   8582..       MOV     ?V0 + 0,DPL
   \   00001A   8583..       MOV     ?V0 + 1,DPH
   \   00001D   78..         MOV     R0,#?V0 + 0
   \   00001F   22           RET
    923          
    924          /*********************************************************************
    925           * @fn      ZDAppCheckForHoldKey()
    926           *
    927           * @brief   Check for key to set the device into Hold Auto Start
    928           *
    929           * @param   none
    930           *
    931           * @return  none
    932           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    933          void ZDAppCheckForHoldKey( void )
   \                     ZDAppCheckForHoldKey:
    934          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    935          #if (defined HAL_KEY) && (HAL_KEY == TRUE)
    936            // Get Keypad directly to see if a HOLD_START is needed.
    937            // Hold down the SW_BYPASS_START key (see OnBoard.h)
    938            // while booting to avoid starting up the device.
    939            if ( HalKeyRead () == SW_BYPASS_START)
   \   000004                ; Setup parameters for call to function HalKeyRead
   \   000004   12....       LCALL   ??HalKeyRead?relay
   \   000007   E9           MOV     A,R1
   \   000008   6401         XRL     A,#0x1
   \   00000A   7005         JNZ     ??ZDAppCheckForHoldKey_0
    940            {
    941              // Change the device state to HOLD on start up
    942              devState = DEV_HOLD;
   \   00000C   90....       MOV     DPTR,#devState
   \   00000F   E4           CLR     A
   \   000010   F0           MOVX    @DPTR,A
    943            }
    944          #endif // HAL_KEY
    945          }
   \                     ??ZDAppCheckForHoldKey_0:
   \   000011   02....       LJMP    ?Subroutine2 & 0xFFFF
    946          
    947          /*********************************************************************
    948           * @fn      ZDApp_ProcessOSALMsg()
    949           *
    950           * @brief   Process the incoming task message.
    951           *
    952           * @param   msgPtr - message to process
    953           *
    954           * @return  none
    955           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    956          void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr )
   \                     ZDApp_ProcessOSALMsg:
    957          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    958            // Data Confirmation message fields
    959            uint8 sentEP;       // This should always be 0
    960            uint8 sentStatus;
    961            afDataConfirm_t *afDataConfirm;
    962            uint8 tmp;
    963          
    964            switch ( msgPtr->event )
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   E0           MOVX    A,@DPTR
   \   000013   14           DEC     A
   \   000014   6023         JZ      ??ZDApp_ProcessOSALMsg_0
   \   000016   14           DEC     A
   \   000017   7003         JNZ     $+5
   \   000019   02....       LJMP    ??ZDApp_ProcessOSALMsg_1 & 0xFFFF
   \   00001C   14           DEC     A
   \   00001D   7003         JNZ     $+5
   \   00001F   02....       LJMP    ??ZDApp_ProcessOSALMsg_2 & 0xFFFF
   \   000022   24E9         ADD     A,#-0x17
   \   000024   6007         JZ      ??ZDApp_ProcessOSALMsg_3
   \   000026   2447         ADD     A,#0x47
   \   000028   6009         JZ      ??ZDApp_ProcessOSALMsg_4
   \   00002A   02....       LJMP    ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
    965            {
    966              // Incoming ZDO Message
    967              case AF_INCOMING_MSG_CMD:
    968                ZDP_IncomingData( (afIncomingMSGPacket_t *)msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_3:
   \   00002D                ; Setup parameters for call to function ZDP_IncomingData
   \   00002D   12....       LCALL   ??ZDP_IncomingData?relay
    969                break;
   \   000030   02....       LJMP    ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
    970                
    971              case ZDO_CB_MSG:
    972                ZDApp_ProcessMsgCBs( (zdoIncomingMsg_t *)msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_4:
   \   000033                ; Setup parameters for call to function ZDApp_ProcessMsgCBs
   \   000033   12....       LCALL   ??ZDApp_ProcessMsgCBs?relay
    973                break;
   \   000036   02....       LJMP    ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
    974          
    975              case AF_DATA_CONFIRM_CMD:
    976                // This message is received as a confirmation of a data packet sent.
    977                // The status is of ZStatus_t type [defined in NLMEDE.h]
    978                // The message fields are defined in AF.h
    979                afDataConfirm = (afDataConfirm_t *)msgPtr;
    980                sentEP = afDataConfirm->endpoint;
    981                sentStatus = afDataConfirm->hdr.status;
    982          
    983                // Action taken when confirmation is received.
    984          #if defined ( ZIGBEE_FREQ_AGILITY )
    985                if ( pZDNwkMgr_ProcessDataConfirm )
    986                  pZDNwkMgr_ProcessDataConfirm( afDataConfirm );
    987          #endif
    988                (void)sentEP;
    989                (void)sentStatus;
    990                break;
    991          
    992              case ZDO_NWK_DISC_CNF:
    993                if (devState != DEV_NWK_DISC)
   \                     ??ZDApp_ProcessOSALMsg_0:
   \   000039   90....       MOV     DPTR,#devState
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   6402         XRL     A,#0x2
   \   00003F   6003         JZ      $+5
   \   000041   02....       LJMP    ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
    994                  break;
    995                
    996                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \   000044   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000047   E0           MOVX    A,@DPTR
   \   000048   6401         XRL     A,#0x1
   \   00004A   6008         JZ      ??ZDApp_ProcessOSALMsg_6
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   6402         XRL     A,#0x2
   \   00004F   6003         JZ      $+5
   \   000051   02....       LJMP    ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
    997                {
    998                  if ( (((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->hdr.status == ZDO_SUCCESS) && (zdoDiscCounter > NUM_DISC_ATTEMPTS) )
   \                     ??ZDApp_ProcessOSALMsg_6:
   \   000054   8E82         MOV     DPL,R6
   \   000056   8F83         MOV     DPH,R7
   \   000058   A3           INC     DPTR
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   6003         JZ      $+5
   \   00005C   02....       LJMP    ??ZDApp_ProcessOSALMsg_7 & 0xFFFF
   \   00005F   90....       MOV     DPTR,#zdoDiscCounter
   \   000062   E0           MOVX    A,@DPTR
   \   000063   C3           CLR     C
   \   000064   9403         SUBB    A,#0x3
   \   000066   5003         JNC     $+5
   \   000068   02....       LJMP    ??ZDApp_ProcessOSALMsg_7 & 0xFFFF
    999                  {
   1000                    if ( devStartMode == MODE_JOIN )
   \   00006B   EE           MOV     A,R6
   \   00006C   2403         ADD     A,#0x3
   \   00006E   F8           MOV     R0,A
   \   00006F   EF           MOV     A,R7
   \   000070   3400         ADDC    A,#0x0
   \   000072   F9           MOV     R1,A
   \   000073   88..         MOV     ?V0 + 0,R0
   \   000075   89..         MOV     ?V0 + 1,R1
   \   000077   EE           MOV     A,R6
   \   000078   2402         ADD     A,#0x2
   \   00007A   18           DEC     R0
   \   00007B   EF           MOV     A,R7
   \   00007C   3400         ADDC    A,#0x0
   \   00007E   F9           MOV     R1,A
   \   00007F   88..         MOV     ?V0 + 2,R0
   \   000081   89..         MOV     ?V0 + 3,R1
   \   000083   EE           MOV     A,R6
   \   000084   2404         ADD     A,#0x4
   \   000086   08           INC     R0
   \   000087   08           INC     R0
   \   000088   EF           MOV     A,R7
   \   000089   3400         ADDC    A,#0x0
   \   00008B   F9           MOV     R1,A
   \   00008C   88..         MOV     ?V0 + 4,R0
   \   00008E   89..         MOV     ?V0 + 5,R1
   \   000090   90....       MOV     DPTR,#devStartMode
   \   000093   E0           MOVX    A,@DPTR
   \   000094   7044         JNZ     ??ZDApp_ProcessOSALMsg_8
   1001                    {
   1002                      devState = DEV_NWK_JOINING;
   \   000096   90....       MOV     DPTR,#devState
   \   000099   7403         MOV     A,#0x3
   \   00009B   F0           MOVX    @DPTR,A
   1003            
   1004                      ZDApp_NodeProfileSync((ZDO_NetworkDiscoveryCfm_t *)msgPtr);
   \   00009C                ; Setup parameters for call to function ZDApp_NodeProfileSync
   \   00009C   12....       LCALL   ??ZDApp_NodeProfileSync?relay
   1005            
   1006                      if ( NLME_JoinRequest( ((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->extendedPANID,
   1007                           BUILD_UINT16( ((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->panIdLSB, ((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->panIdMSB ),
   1008                           ((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->logicalChannel,
   1009                           ZDO_Config_Node_Descriptor.CapabilityFlags ) != ZSuccess )
   \   00009F                ; Setup parameters for call to function NLME_JoinRequest
   \   00009F   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   0000A2   E0           MOVX    A,@DPTR
   \   0000A3   F5..         MOV     ?V0 + 6,A
   \   0000A5   78..         MOV     R0,#?V0 + 6
   \   0000A7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000AA   85..82       MOV     DPL,?V0 + 4
   \   0000AD   85..83       MOV     DPH,?V0 + 5
   \   0000B0   E0           MOVX    A,@DPTR
   \   0000B1   F9           MOV     R1,A
   \   0000B2   85..82       MOV     DPL,?V0 + 2
   \   0000B5   85..83       MOV     DPH,?V0 + 3
   \   0000B8   E0           MOVX    A,@DPTR
   \   0000B9   FC           MOV     R4,A
   \   0000BA   85..82       MOV     DPL,?V0 + 0
   \   0000BD   85..83       MOV     DPH,?V0 + 1
   \   0000C0   E0           MOVX    A,@DPTR
   \   0000C1   FB           MOV     R3,A
   \   0000C2   EC           MOV     A,R4
   \   0000C3   2400         ADD     A,#0x0
   \   0000C5   E4           CLR     A
   \   0000C6   3B           ADDC    A,R3
   \   0000C7   FD           MOV     R5,A
   \   0000C8   EE           MOV     A,R6
   \   0000C9   2406         ADD     A,#0x6
   \   0000CB   FA           MOV     R2,A
   \   0000CC   EF           MOV     A,R7
   \   0000CD   3400         ADDC    A,#0x0
   \   0000CF   FB           MOV     R3,A
   \   0000D0   12....       LCALL   ??NLME_JoinRequest?relay
   \   0000D3   7401         MOV     A,#0x1
   \   0000D5   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D8   807A         SJMP    ??ZDApp_ProcessOSALMsg_9
   1010                      {
   1011                        ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1012                            + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
   1013                      }
   1014                    }
   1015                    else if ( devStartMode == MODE_REJOIN )
   \                     ??ZDApp_ProcessOSALMsg_8:
   \   0000DA   6403         XRL     A,#0x3
   \   0000DC   707C         JNZ     ??CrossCallReturnLabel_15
   1016                    {
   1017                      devState = DEV_NWK_REJOIN;
   \   0000DE   90....       MOV     DPTR,#devState
   \   0000E1   7404         MOV     A,#0x4
   \   0000E3   F0           MOVX    @DPTR,A
   1018          
   1019                      // Before trying to do rejoin, check if the device has a valid short address
   1020                      // If not, generate a random short address for itself
   1021                      if ( _NIB.nwkDevAddress == INVALID_NODE_ADDR )
   \   0000E4   90....       MOV     DPTR,#_NIB + 20
   \   0000E7   E0           MOVX    A,@DPTR
   \   0000E8   64FE         XRL     A,#0xfe
   \   0000EA   7003         JNZ     ??ZDApp_ProcessOSALMsg_10
   \   0000EC   A3           INC     DPTR
   \   0000ED   E0           MOVX    A,@DPTR
   \   0000EE   F4           CPL     A
   \                     ??ZDApp_ProcessOSALMsg_10:
   \   0000EF   7014         JNZ     ??ZDApp_ProcessOSALMsg_11
   1022                      {
   1023                        _NIB.nwkDevAddress = osal_rand();
   \   0000F1                ; Setup parameters for call to function osal_rand
   \   0000F1   12....       LCALL   ??osal_rand?relay
   \   0000F4   90....       MOV     DPTR,#_NIB + 20
   \   0000F7   EA           MOV     A,R2
   \   0000F8   F0           MOVX    @DPTR,A
   \   0000F9   A3           INC     DPTR
   \   0000FA   EB           MOV     A,R3
   \   0000FB   F0           MOVX    @DPTR,A
   1024                        ZMacSetReq( ZMacShortAddress, (byte*)&_NIB.nwkDevAddress );
   \   0000FC                ; Setup parameters for call to function ZMacSetReq
   \   0000FC   7A..         MOV     R2,#(_NIB + 20) & 0xff
   \   0000FE   7B..         MOV     R3,#((_NIB + 20) >> 8) & 0xff
   \   000100   7953         MOV     R1,#0x53
   \   000102   12....       LCALL   ??ZMacSetReq?relay
   1025                      }
   1026          
   1027                      if ( ZG_SECURE_ENABLED )
   1028                      {
   1029                        ZDApp_RestoreNwkKey();
   1030                      }
   1031                      
   1032                      // Check if the device has a valid PanID, if not, set it to the discovered Pan
   1033                      if ( _NIB.nwkPanId == INVALID_PAN_ID )
   \                     ??ZDApp_ProcessOSALMsg_11:
   \   000105   90....       MOV     DPTR,#_NIB + 33
   \   000108   E0           MOVX    A,@DPTR
   \   000109   64FE         XRL     A,#0xfe
   \   00010B   7003         JNZ     ??ZDApp_ProcessOSALMsg_12
   \   00010D   A3           INC     DPTR
   \   00010E   E0           MOVX    A,@DPTR
   \   00010F   F4           CPL     A
   \                     ??ZDApp_ProcessOSALMsg_12:
   \   000110   7021         JNZ     ??ZDApp_ProcessOSALMsg_13
   1034                      {
   1035                        _NIB.nwkPanId = BUILD_UINT16( ((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->panIdLSB, ((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->panIdMSB );
   \   000112   85..82       MOV     DPL,?V0 + 2
   \   000115   85..83       MOV     DPH,?V0 + 3
   \   000118   E0           MOVX    A,@DPTR
   \   000119   FA           MOV     R2,A
   \   00011A   85..82       MOV     DPL,?V0 + 0
   \   00011D   85..83       MOV     DPH,?V0 + 1
   \   000120   E0           MOVX    A,@DPTR
   \   000121   F9           MOV     R1,A
   \   000122   EA           MOV     A,R2
   \   000123   90....       MOV     DPTR,#_NIB + 33
   \   000126   F0           MOVX    @DPTR,A
   \   000127   A3           INC     DPTR
   \   000128   E9           MOV     A,R1
   \   000129   F0           MOVX    @DPTR,A
   1036                        ZMacSetReq( ZMacPanId, (byte*)&(_NIB.nwkPanId) );
   \   00012A                ; Setup parameters for call to function ZMacSetReq
   \   00012A   7A..         MOV     R2,#(_NIB + 33) & 0xff
   \   00012C   7B..         MOV     R3,#((_NIB + 33) >> 8) & 0xff
   \   00012E   7950         MOV     R1,#0x50
   \   000130   12....       LCALL   ??ZMacSetReq?relay
   1037                      }
   1038          
   1039                      tmp = true;
   \                     ??ZDApp_ProcessOSALMsg_13:
   \   000133   85..82       MOV     DPL,?XSP + 0
   \   000136   85..83       MOV     DPH,?XSP + 1
   \   000139   7401         MOV     A,#0x1
   \   00013B   F0           MOVX    @DPTR,A
   1040                      ZMacSetReq( ZMacRxOnIdle, &tmp ); // Set receiver always on during rejoin 
   \   00013C                ; Setup parameters for call to function ZMacSetReq
   \   00013C   AA82         MOV     R2,DPL
   \   00013E   AB83         MOV     R3,DPH
   \   000140   7952         MOV     R1,#0x52
   \   000142   12....       LCALL   ??ZMacSetReq?relay
   1041                      if ( NLME_ReJoinRequest( ZDO_UseExtendedPANID, ((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->logicalChannel) != ZSuccess )
   \   000145                ; Setup parameters for call to function NLME_ReJoinRequest
   \   000145   85..82       MOV     DPL,?V0 + 4
   \   000148   85..83       MOV     DPH,?V0 + 5
   \   00014B   E0           MOVX    A,@DPTR
   \   00014C   F9           MOV     R1,A
   \   00014D   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   00014F   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000151   12....       LCALL   ??NLME_ReJoinRequest?relay
   \                     ??ZDApp_ProcessOSALMsg_9:
   \   000154   E9           MOV     A,R1
   \   000155   6003         JZ      ??CrossCallReturnLabel_15
   1042                      {
   1043                        ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1044                            + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
   \   000157                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000157                ; Setup parameters for call to function osal_rand
   \   000157   12....       LCALL   ?Subroutine16 & 0xFFFF
   1045                      }
   1046                    }
   1047            
   1048                    if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
   \                     ??CrossCallReturnLabel_15:
   \   00015A   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00015D   E0           MOVX    A,@DPTR
   \   00015E   A2E3         MOV     C,0xE0 /* A   */.3
   \   000160   505A         JNC     ??ZDApp_ProcessOSALMsg_5
   1049                    {
   1050                      // The receiver is on, turn network layer polling off.
   1051                      NLME_SetPollRate( 0 );
   \   000162                ; Setup parameters for call to function NLME_SetPollRate
   \   000162   12....       LCALL   ?Subroutine19 & 0xFFFF
   1052                      NLME_SetQueuedPollRate( 0 );
   1053                      NLME_SetResponseRate( 0 );
   1054                    }
   1055                    else
   1056                    {
   1057                      if ( (ZG_SECURE_ENABLED) && (devStartMode == MODE_JOIN) )
   1058                      {
   1059                        ZDApp_SavedPollRate = zgPollRate;
   1060                        NLME_SetPollRate( zgRejoinPollRate );
   1061                      }
   1062                    }
   1063                  }
   \                     ??CrossCallReturnLabel_19:
   \   000165   8055         SJMP    ??ZDApp_ProcessOSALMsg_5
   1064                  else
   1065                  {
   1066                    if ( continueJoining )
   \                     ??ZDApp_ProcessOSALMsg_7:
   \   000167   90....       MOV     DPTR,#continueJoining
   \   00016A   E0           MOVX    A,@DPTR
   \   00016B   604F         JZ      ??ZDApp_ProcessOSALMsg_5
   1067                    {
   1068              #if defined ( MANAGED_SCAN )
   1069                      ZDApp_NetworkInit( MANAGEDSCAN_DELAY_BETWEEN_SCANS );
   1070              #else
   1071                      zdoDiscCounter++;
   \   00016D   90....       MOV     DPTR,#zdoDiscCounter
   \   000170   E0           MOVX    A,@DPTR
   \   000171   04           INC     A
   \   000172   F0           MOVX    @DPTR,A
   1072                      ZDApp_NetworkInit( (uint16)(BEACON_REQUEST_DELAY
   1073                            + ((uint16)(osal_rand()& BEACON_REQ_DELAY_MASK))) );
   \   000173                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000173                ; Setup parameters for call to function osal_rand
   \   000173   12....       LCALL   ??osal_rand?relay
   \   000176   EA           MOV     A,R2
   \   000177   2464         ADD     A,#0x64
   \   000179   FA           MOV     R2,A
   \   00017A   E4           CLR     A
   \   00017B   3400         ADDC    A,#0x0
   \   00017D   FB           MOV     R3,A
   \   00017E   8039         SJMP    ??ZDApp_ProcessOSALMsg_14
   1074              #endif
   1075                    }
   1076                  }
   1077                }
   1078                break;
   1079          
   1080              case ZDO_NWK_JOIN_IND:
   1081                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessOSALMsg_1:
   \   000180   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000183   E0           MOVX    A,@DPTR
   \   000184   6401         XRL     A,#0x1
   \   000186   6005         JZ      ??ZDApp_ProcessOSALMsg_15
   \   000188   E0           MOVX    A,@DPTR
   \   000189   6402         XRL     A,#0x2
   \   00018B   702F         JNZ     ??ZDApp_ProcessOSALMsg_5
   1082                {
   1083                  ZDApp_ProcessNetworkJoin();
   \                     ??ZDApp_ProcessOSALMsg_15:
   \   00018D                ; Setup parameters for call to function ZDApp_ProcessNetworkJoin
   \   00018D   12....       LCALL   ??ZDApp_ProcessNetworkJoin?relay
   \   000190   802A         SJMP    ??ZDApp_ProcessOSALMsg_5
   1084                }
   1085                break;
   1086          
   1087              case ZDO_NWK_JOIN_REQ:
   1088                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessOSALMsg_2:
   \   000192   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000195   E0           MOVX    A,@DPTR
   \   000196   6401         XRL     A,#0x1
   \   000198   6005         JZ      ??ZDApp_ProcessOSALMsg_16
   \   00019A   E0           MOVX    A,@DPTR
   \   00019B   6402         XRL     A,#0x2
   \   00019D   701D         JNZ     ??ZDApp_ProcessOSALMsg_5
   1089                {
   1090                  retryCnt = 0;
   \                     ??ZDApp_ProcessOSALMsg_16:
   \   00019F   90....       MOV     DPTR,#retryCnt
   \   0001A2   E4           CLR     A
   \   0001A3   F0           MOVX    @DPTR,A
   1091                  devStartMode = MODE_RESUME;
   \   0001A4   90....       MOV     DPTR,#devStartMode
   \   0001A7   04           INC     A
   \   0001A8   F0           MOVX    @DPTR,A
   1092                  _tmpRejoinState = true;
   \   0001A9   90....       MOV     DPTR,#_tmpRejoinState
   \   0001AC   12....       LCALL   ?Subroutine9 & 0xFFFF
   1093                  osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
   1094                  zgDefaultStartingScanDuration = BEACON_ORDER_60_MSEC;
   \                     ??CrossCallReturnLabel_3:
   \   0001AF   90....       MOV     DPTR,#zgDefaultStartingScanDuration
   \   0001B2   7402         MOV     A,#0x2
   \   0001B4   F0           MOVX    @DPTR,A
   1095                  ZDApp_NetworkInit( 0 );
   \   0001B5                ; Setup parameters for call to function ZDApp_NetworkInit
   \   0001B5   7A00         MOV     R2,#0x0
   \   0001B7   7B00         MOV     R3,#0x0
   \                     ??ZDApp_ProcessOSALMsg_14:
   \   0001B9   12....       LCALL   ??ZDApp_NetworkInit?relay
   1096                }
   1097                break;
   1098          
   1099              default:
   1100                if ( ZG_SECURE_ENABLED )
   1101                  ZDApp_ProcessSecMsg( msgPtr );
   1102                break;
   1103            }
   1104          
   1105          }
   \                     ??ZDApp_ProcessOSALMsg_5:
   \   0001BC   7401         MOV     A,#0x1
   \   0001BE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001C1   7F07         MOV     R7,#0x7
   \   0001C3   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   7A00         MOV     R2,#0x0
   \   000002   7B00         MOV     R3,#0x0
   \   000004   12....       LCALL   ??NLME_SetPollRate?relay
   \   000007                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   000007                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   000007   7A00         MOV     R2,#0x0
   \   000009   7B00         MOV     R3,#0x0
   \   00000B   12....       LCALL   ??NLME_SetQueuedPollRate?relay
   \   00000E                ; Setup parameters for call to function NLME_SetResponseRate
   \   00000E                ; Setup parameters for call to function NLME_SetResponseRate
   \   00000E   7A00         MOV     R2,#0x0
   \   000010   7B00         MOV     R3,#0x0
   \   000012   12....       LCALL   ??NLME_SetResponseRate?relay
   \   000015   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL   ??osal_rand?relay
   \   000003   EA           MOV     A,R2
   \   000004   547F         ANL     A,#0x7f
   \   000006   2464         ADD     A,#0x64
   \   000008   FA           MOV     R2,A
   \   000009   7B00         MOV     R3,#0x0
   \   00000B   12....       LCALL   ??ZDApp_NetworkInit?relay
   \   00000E   22           RET
   1106          
   1107          /*********************************************************************
   1108           * @fn      ZDApp_ProcessMsgCBs()
   1109           *
   1110           * @brief   Process response messages
   1111           *
   1112           * @param   none
   1113           *
   1114           * @return  none
   1115           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1116          void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg )
   \                     ZDApp_ProcessMsgCBs:
   1117          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1118            switch ( inMsg->clusterID )
   \   00000E   EE           MOV     A,R6
   \   00000F   240C         ADD     A,#0xc
   \   000011   12....       LCALL   ??Subroutine29_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   000014   F5..         MOV     ?V0 + 0,A
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F5..         MOV     ?V0 + 1,A
   \   00001A   78..         MOV     R0,#?V0 + 0
   \   00001C   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for ZDApp_ProcessMsgCBs>_0`:
   \   00001F   0200         DW        2
   \   000021   2100         DW        33
   \   000023   2200         DW        34
   \   000025   ....         DW        ??ZDApp_ProcessMsgCBs_0
   \   000027   0080         DW        32768
   \   000029   0180         DW        32769
   \   00002B   ....         DW        ??ZDApp_ProcessMsgCBs_1
   \   00002D   0000         DW        0
   \   00002F   ....         DW        ??ZDApp_ProcessMsgCBs_2
   1119            {
   1120          #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
   1121              case NWK_addr_rsp:
   1122              case IEEE_addr_rsp:
   1123                {
   1124                  ZDO_NwkIEEEAddrResp_t *pAddrRsp;
   1125                  pAddrRsp = ZDO_ParseAddrRsp( inMsg );
   \                     ??ZDApp_ProcessMsgCBs_1:
   \   000031                ; Setup parameters for call to function ZDO_ParseAddrRsp
   \   000031   12....       LCALL   ??ZDO_ParseAddrRsp?relay
   \   000034   8A..         MOV     ?V0 + 0,R2
   \   000036   8B..         MOV     ?V0 + 1,R3
   \   000038   AE..         MOV     R6,?V0 + 0
   \   00003A   AF..         MOV     R7,?V0 + 1
   1126                  if ( pAddrRsp )
   \   00003C   EE           MOV     A,R6
   \   00003D   4F           ORL     A,R7
   \   00003E   603F         JZ      ??ZDApp_ProcessMsgCBs_2
   1127                  {
   1128                    if ( pAddrRsp->status == ZSuccess )
   \   000040   8E82         MOV     DPL,R6
   \   000042   8F83         MOV     DPH,R7
   \   000044   E0           MOVX    A,@DPTR
   \   000045   7011         JNZ     ??ZDApp_ProcessMsgCBs_3
   1129                    {
   1130                      ZDO_UpdateAddrManager( pAddrRsp->nwkAddr, pAddrRsp->extAddr );
   \   000047                ; Setup parameters for call to function ZDO_UpdateAddrManager
   \   000047   EE           MOV     A,R6
   \   000048   2403         ADD     A,#0x3
   \   00004A   FC           MOV     R4,A
   \   00004B   EF           MOV     A,R7
   \   00004C   3400         ADDC    A,#0x0
   \   00004E   FD           MOV     R5,A
   \   00004F   A3           INC     DPTR
   \   000050   E0           MOVX    A,@DPTR
   \   000051   FA           MOV     R2,A
   \   000052   A3           INC     DPTR
   \   000053   E0           MOVX    A,@DPTR
   \   000054   FB           MOV     R3,A
   \   000055   12....       LCALL   ??ZDO_UpdateAddrManager?relay
   1131                    }
   1132                    osal_mem_free( pAddrRsp );
   \                     ??ZDApp_ProcessMsgCBs_3:
   \   000058                ; Setup parameters for call to function osal_mem_free
   \   000058   EE           MOV     A,R6
   \   000059   FA           MOV     R2,A
   \   00005A   EF           MOV     A,R7
   \   00005B   FB           MOV     R3,A
   \   00005C   12....       LCALL   ??osal_mem_free?relay
   \   00005F   801E         SJMP    ??ZDApp_ProcessMsgCBs_2
   1133                  }
   1134                }
   1135                break;
   1136          #endif
   1137                
   1138          #if defined ( REFLECTOR )
   1139              case Bind_req:
   1140              case Unbind_req:
   1141                {
   1142                  ZDO_BindUnbindReq_t bindReq;
   1143                  ZDO_ParseBindUnbindReq( inMsg, &bindReq );
   \                     ??ZDApp_ProcessMsgCBs_0:
   \   000061                ; Setup parameters for call to function ZDO_ParseBindUnbindReq
   \   000061   85..82       MOV     DPL,?XSP + 0
   \   000064   85..83       MOV     DPH,?XSP + 1
   \   000067   AC82         MOV     R4,DPL
   \   000069   AD83         MOV     R5,DPH
   \   00006B   12....       LCALL   ??ZDO_ParseBindUnbindReq?relay
   1144                  ZDO_ProcessBindUnbindReq( inMsg, &bindReq );
   \   00006E                ; Setup parameters for call to function ZDO_ProcessBindUnbindReq
   \   00006E   85..82       MOV     DPL,?XSP + 0
   \   000071   85..83       MOV     DPH,?XSP + 1
   \   000074   AC82         MOV     R4,DPL
   \   000076   AD83         MOV     R5,DPH
   \   000078   EE           MOV     A,R6
   \   000079   FA           MOV     R2,A
   \   00007A   EF           MOV     A,R7
   \   00007B   FB           MOV     R3,A
   \   00007C   12....       LCALL   ??ZDO_ProcessBindUnbindReq?relay
   1145                }
   1146                break;
   1147          #endif      
   1148          
   1149          #if ( ZG_BUILD_COORDINATOR_TYPE )
   1150              case Bind_rsp:
   1151              case Unbind_rsp:
   1152                if (ZG_DEVICE_COORDINATOR_TYPE && matchED)
   1153                {
   1154                  ZDMatchSendState(
   1155                       (uint8)((inMsg->clusterID == Bind_rsp) ? ZDMATCH_REASON_BIND_RSP : ZDMATCH_REASON_UNBIND_RSP),
   1156                       ZDO_ParseBindRsp(inMsg), inMsg->TransSeq );
   1157                }
   1158                break;
   1159                
   1160              case End_Device_Bind_req:
   1161                if (ZG_DEVICE_COORDINATOR_TYPE)
   1162                {
   1163                  ZDEndDeviceBind_t bindReq;
   1164                  ZDO_ParseEndDeviceBindReq( inMsg, &bindReq );
   1165                  ZDO_MatchEndDeviceBind( &bindReq );
   1166                  
   1167                  // Freeing the cluster lists - if allocated.
   1168                  if ( bindReq.numInClusters )
   1169                    osal_mem_free( bindReq.inClusters );
   1170                  if ( bindReq.numOutClusters )
   1171                    osal_mem_free( bindReq.outClusters );
   1172                }
   1173                break;
   1174          #endif
   1175            }
   1176          }
   \                     ??ZDApp_ProcessMsgCBs_2:
   \   00007F                REQUIRE ?Subroutine7
   \   00007F                ; // Fall through to label ?Subroutine7

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7415         MOV     A,#0x15
   \   000002   02....       LJMP    ??Subroutine26_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine29_0:
   \   000000   F582         MOV     DPL,A
   \   000002   EF           MOV     A,R7
   \   000003   3400         ADDC    A,#0x0
   \   000005   F583         MOV     DPH,A
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET
   1177          
   1178          /*********************************************************************
   1179           * @fn      ZDApp_RegisterCBs()
   1180           *
   1181           * @brief   Process response messages
   1182           *
   1183           * @param   none
   1184           *
   1185           * @return  none
   1186           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1187          void ZDApp_RegisterCBs( void )
   \                     ZDApp_RegisterCBs:
   1188          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1189          #if defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
   1190            ZDO_RegisterForZDOMsg( ZDAppTaskID, IEEE_addr_rsp );
   \   000004                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000004   7A01         MOV     R2,#0x1
   \   000006   12....       LCALL   ?Subroutine12 & 0xFFFF
   1191          #endif
   1192          #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( REFLECTOR )
   1193            ZDO_RegisterForZDOMsg( ZDAppTaskID, NWK_addr_rsp );
   \                     ??CrossCallReturnLabel_33:
   \   000009                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000009   7A00         MOV     R2,#0x0
   \   00000B   12....       LCALL   ?Subroutine12 & 0xFFFF
   1194          #endif  
   1195          #if ZG_BUILD_COORDINATOR_TYPE
   1196            ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_rsp );
   1197            ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_rsp );
   1198            ZDO_RegisterForZDOMsg( ZDAppTaskID, End_Device_Bind_req );
   1199          #endif
   1200          #if defined ( REFLECTOR )
   1201            ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_req );
   \                     ??CrossCallReturnLabel_34:
   \   00000E                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00000E   7A21         MOV     R2,#0x21
   \   000010   7B00         MOV     R3,#0x0
   \   000012   12....       LCALL   ??Subroutine24_0 & 0xFFFF
   1202            ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_req );
   \                     ??CrossCallReturnLabel_35:
   \   000015                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000015   7A22         MOV     R2,#0x22
   \   000017   7B00         MOV     R3,#0x0
   \   000019   12....       LCALL   ??Subroutine24_0 & 0xFFFF
   1203          #endif  
   1204          }
   \                     ??CrossCallReturnLabel_36:
   \   00001C   02....       LJMP    ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   7B80         MOV     R3,#-0x80
   \   000002                REQUIRE ??Subroutine24_0
   \   000002                ; // Fall through to label ??Subroutine24_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine24_0:
   \   000000   90....       MOV     DPTR,#ZDAppTaskID
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
   \   000008   22           RET
   1205          
   1206          /*********************************************************************
   1207           * @fn      ZDApp_ProcessSecMsg()
   1208           *
   1209           * @brief   Process the incoming security message.
   1210           *
   1211           * @param   msgPtr - message to process
   1212           *
   1213           * @return  none
   1214           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1215          void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr )
   \                     ZDApp_ProcessSecMsg:
   1216          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1217            switch ( msgPtr->event )
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   E0           MOVX    A,@DPTR
   \   000009   24FA         ADD     A,#-0x6
   \   00000B   6006         JZ      ??ZDApp_ProcessSecMsg_0
   \   00000D   24FC         ADD     A,#-0x4
   \   00000F   6014         JZ      ??ZDApp_ProcessSecMsg_1
   \   000011   8022         SJMP    ??ZDApp_ProcessSecMsg_2
   1218            {
   1219              case ZDO_ESTABLISH_KEY_CFM:
   1220                if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   1221                {
   1222                  ZDSecMgrEstablishKeyCfm( (ZDO_EstablishKeyCfm_t*)msgPtr );
   1223                }
   1224                break;
   1225          
   1226              case ZDO_ESTABLISH_KEY_IND:
   1227                if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   1228                {
   1229                  if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   1230                  {
   1231                    ZDSecMgrEstablishKeyInd( (ZDO_EstablishKeyInd_t*)msgPtr );
   1232                  }
   1233                }
   1234                break;
   1235          
   1236              case ZDO_TRANSPORT_KEY_IND:
   1237                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessSecMsg_0:
   \   000013   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000016   E0           MOVX    A,@DPTR
   \   000017   6401         XRL     A,#0x1
   \   000019   6005         JZ      ??ZDApp_ProcessSecMsg_3
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   6402         XRL     A,#0x2
   \   00001E   7015         JNZ     ??ZDApp_ProcessSecMsg_2
   1238                {
   1239                  ZDSecMgrTransportKeyInd( (ZDO_TransportKeyInd_t*)msgPtr );
   \                     ??ZDApp_ProcessSecMsg_3:
   \   000020                ; Setup parameters for call to function ZDSecMgrTransportKeyInd
   \   000020   12....       LCALL   ??ZDSecMgrTransportKeyInd?relay
   \   000023   8010         SJMP    ??ZDApp_ProcessSecMsg_2
   1240                }
   1241                break;
   1242          
   1243              case ZDO_UPDATE_DEVICE_IND:
   1244                if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1245                {
   1246                  ZDSecMgrUpdateDeviceInd( (ZDO_UpdateDeviceInd_t*)msgPtr );
   1247                }
   1248                break;
   1249          
   1250              case ZDO_REMOVE_DEVICE_IND:
   1251                if ( ZG_BUILD_RTRONLY_TYPE && ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER ) )
   1252                {
   1253                  ZDSecMgrRemoveDeviceInd( (ZDO_RemoveDeviceInd_t*)msgPtr );
   1254                }
   1255                break;
   1256          
   1257              case ZDO_REQUEST_KEY_IND:
   1258                if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   1259                {
   1260                  if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1261                  {
   1262                    ZDSecMgrRequestKeyInd( (ZDO_RequestKeyInd_t*)msgPtr );
   1263                  }
   1264                }
   1265                break;
   1266          
   1267              case ZDO_SWITCH_KEY_IND:
   1268                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessSecMsg_1:
   \   000025   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000028   E0           MOVX    A,@DPTR
   \   000029   6401         XRL     A,#0x1
   \   00002B   6005         JZ      ??ZDApp_ProcessSecMsg_4
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   6402         XRL     A,#0x2
   \   000030   7003         JNZ     ??ZDApp_ProcessSecMsg_2
   1269                {
   1270                  ZDSecMgrSwitchKeyInd( (ZDO_SwitchKeyInd_t*)msgPtr );
   \                     ??ZDApp_ProcessSecMsg_4:
   \   000032                ; Setup parameters for call to function ZDSecMgrSwitchKeyInd
   \   000032   12....       LCALL   ??ZDSecMgrSwitchKeyInd?relay
   1271                }
   1272                break;
   1273              
   1274              case ZDO_AUTHENTICATE_IND:
   1275                if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   1276                {
   1277                  ZDSecMgrAuthenticateInd( (ZDO_AuthenticateInd_t*)msgPtr );
   1278                }
   1279                break;
   1280          
   1281              case ZDO_AUTHENTICATE_CFM:
   1282                if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   1283                {
   1284                  ZDSecMgrAuthenticateCfm( (ZDO_AuthenticateCfm_t*)msgPtr );
   1285                }
   1286                break;
   1287          
   1288              default:
   1289                // Unsupported messages
   1290                break;
   1291            }
   1292          }
   \                     ??ZDApp_ProcessSecMsg_2:
   \   000035   02....       LJMP    ?Subroutine2 & 0xFFFF
   1293          
   1294          /*********************************************************************
   1295           * @fn      ZDApp_ProcessNetworkJoin()
   1296           *
   1297           * @brief
   1298           *
   1299           *   Save off the Network key information.
   1300           *
   1301           * @param   none
   1302           *
   1303           * @return  none
   1304           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1305          void ZDApp_ProcessNetworkJoin( void )
   \                     ZDApp_ProcessNetworkJoin:
   1306          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1307            if ( (devState == DEV_NWK_JOINING) ||
   1308                ((devState == DEV_NWK_ORPHAN)  &&
   1309                 (ZDO_Config_Node_Descriptor.LogicalType == NODETYPE_ROUTER)) )
   \   00000A   90....       MOV     DPTR,#devState
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6403         XRL     A,#0x3
   \   000010   6015         JZ      ??ZDApp_ProcessNetworkJoin_0
   \   000012   E0           MOVX    A,@DPTR
   \   000013   640A         XRL     A,#0xa
   \   000015   6003         JZ      $+5
   \   000017   02....       LJMP    ??ZDApp_ProcessNetworkJoin_1 & 0xFFFF
   \   00001A   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   5407         ANL     A,#0x7
   \   000020   6401         XRL     A,#0x1
   \   000022   6003         JZ      $+5
   \   000024   02....       LJMP    ??ZDApp_ProcessNetworkJoin_2 & 0xFFFF
   1310            {
   1311              // Result of a Join attempt by this device.
   1312              if ( nwkStatus == ZSuccess )
   \                     ??ZDApp_ProcessNetworkJoin_0:
   \   000027   90....       MOV     DPTR,#nwkStatus
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   7017         JNZ     ??ZDApp_ProcessNetworkJoin_3
   1313              {
   1314                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   00002D                ; Setup parameters for call to function osal_set_event
   \   00002D   12....       LCALL   ?Subroutine11 & 0xFFFF
   1315          
   1316          #if defined ( POWER_SAVING )
   1317                osal_pwrmgr_device( PWRMGR_BATTERY );
   1318          #endif
   1319          
   1320                if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey() == false ) )
   1321                {
   1322                  // wait for auth from trust center!!
   1323                  devState = DEV_END_DEVICE_UNAUTH;
   1324          
   1325                  // Start the reset timer for MAX UNAUTH time
   1326                  ZDApp_ResetTimerStart( 10000 );//MAX_DEVICE_UNAUTH_TIMEOUT );
   1327                }
   1328                else
   1329                {
   1330                  if ( ZSTACK_ROUTER_BUILD )
   1331                  {
   1332                    if ( devState == DEV_NWK_ORPHAN 
   1333                      && ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   1334                    {
   1335                      // Change NIB state to router for restore
   1336                      _NIB.nwkState = NWK_ROUTER;
   1337                    }
   1338                  }
   1339                          
   1340                  if ( devState == DEV_NWK_JOINING )
   \                     ??CrossCallReturnLabel_27:
   \   000030   90....       MOV     DPTR,#devState
   \   000033   E0           MOVX    A,@DPTR
   \   000034   6403         XRL     A,#0x3
   \   000036   7003         JNZ     ??ZDApp_ProcessNetworkJoin_4
   1341                  {
   1342                    ZDApp_AnnounceNewAddress();
   \   000038                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000038   12....       LCALL   ??ZDApp_AnnounceNewAddress?relay
   1343                  }
   1344                  
   1345                  devState = DEV_END_DEVICE;
   \                     ??ZDApp_ProcessNetworkJoin_4:
   \   00003B   90....       MOV     DPTR,#devState
   \   00003E   7406         MOV     A,#0x6
   \   000040   F0           MOVX    @DPTR,A
   1346                  if ( ZSTACK_ROUTER_BUILD )
   \   000041   02....       LJMP    ??CrossCallReturnLabel_28 & 0xFFFF
   1347                  {
   1348                    // NOTE: first two parameters are not used, see NLMEDE.h for details
   1349                    if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   1350                    {
   1351                      NLME_StartRouterRequest( 0, 0, false );
   1352                    }
   1353                  }
   1354                }
   1355              }
   1356              else
   1357              {
   1358                if ( (devStartMode == MODE_RESUME) && (++retryCnt >= MAX_RESUME_RETRY) )
   \                     ??ZDApp_ProcessNetworkJoin_3:
   \   000044   90....       MOV     DPTR,#devStartMode
   \   000047   E0           MOVX    A,@DPTR
   \   000048   6401         XRL     A,#0x1
   \   00004A   7031         JNZ     ??ZDApp_ProcessNetworkJoin_5
   \   00004C   90....       MOV     DPTR,#retryCnt
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   04           INC     A
   \   000051   F0           MOVX    @DPTR,A
   \   000052   C3           CLR     C
   \   000053   9403         SUBB    A,#0x3
   \   000055   4026         JC      ??ZDApp_ProcessNetworkJoin_5
   1359                {
   1360                  if ( _NIB.nwkPanId == 0xFFFF || _NIB.nwkPanId == INVALID_PAN_ID )
   \   000057   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   00005A   7003         JNZ     ??ZDApp_ProcessNetworkJoin_6
   \   00005C   74FF         MOV     A,#-0x1
   \   00005E   69           XRL     A,R1
   \                     ??ZDApp_ProcessNetworkJoin_6:
   \   00005F   600A         JZ      ??ZDApp_ProcessNetworkJoin_7
   \   000061   74FE         MOV     A,#-0x2
   \   000063   68           XRL     A,R0
   \   000064   7003         JNZ     ??ZDApp_ProcessNetworkJoin_8
   \   000066   74FF         MOV     A,#-0x1
   \   000068   69           XRL     A,R1
   \                     ??ZDApp_ProcessNetworkJoin_8:
   \   000069   7006         JNZ     ??ZDApp_ProcessNetworkJoin_9
   1361                    devStartMode = MODE_JOIN;
   \                     ??ZDApp_ProcessNetworkJoin_7:
   \   00006B   90....       MOV     DPTR,#devStartMode
   \   00006E   E4           CLR     A
   \   00006F   800B         SJMP    ??ZDApp_ProcessNetworkJoin_10
   1362                  else
   1363                  {
   1364                    devStartMode = MODE_REJOIN;
   \                     ??ZDApp_ProcessNetworkJoin_9:
   \   000071   90....       MOV     DPTR,#devStartMode
   \   000074   7403         MOV     A,#0x3
   \   000076   F0           MOVX    @DPTR,A
   1365                    _tmpRejoinState = true;
   \   000077   90....       MOV     DPTR,#_tmpRejoinState
   \   00007A   7401         MOV     A,#0x1
   \                     ??ZDApp_ProcessNetworkJoin_10:
   \   00007C   F0           MOVX    @DPTR,A
   1366                  }
   1367                }
   1368          
   1369                if ( (NLME_GetShortAddr() != INVALID_NODE_ADDR) ||
   1370                     (_NIB.nwkDevAddress != INVALID_NODE_ADDR) )
   \                     ??ZDApp_ProcessNetworkJoin_5:
   \   00007D                ; Setup parameters for call to function NLME_GetShortAddr
   \   00007D   12....       LCALL   ??NLME_GetShortAddr?relay
   \   000080   8A..         MOV     ?V0 + 0,R2
   \   000082   8B..         MOV     ?V0 + 1,R3
   \   000084   74FE         MOV     A,#-0x2
   \   000086   65..         XRL     A,?V0 + 0
   \   000088   7004         JNZ     ??ZDApp_ProcessNetworkJoin_11
   \   00008A   74FF         MOV     A,#-0x1
   \   00008C   65..         XRL     A,?V0 + 1
   \                     ??ZDApp_ProcessNetworkJoin_11:
   \   00008E   700D         JNZ     ??ZDApp_ProcessNetworkJoin_12
   \   000090   90....       MOV     DPTR,#_NIB + 20
   \   000093   E0           MOVX    A,@DPTR
   \   000094   64FE         XRL     A,#0xfe
   \   000096   7003         JNZ     ??ZDApp_ProcessNetworkJoin_13
   \   000098   A3           INC     DPTR
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   F4           CPL     A
   \                     ??ZDApp_ProcessNetworkJoin_13:
   \   00009B   6023         JZ      ??ZDApp_ProcessNetworkJoin_14
   1371                {
   1372                  uint16 addr = INVALID_NODE_ADDR;
   \                     ??ZDApp_ProcessNetworkJoin_12:
   \   00009D   85..82       MOV     DPL,?XSP + 0
   \   0000A0   85..83       MOV     DPH,?XSP + 1
   \   0000A3   74FE         MOV     A,#-0x2
   \   0000A5   F0           MOVX    @DPTR,A
   \   0000A6   A3           INC     DPTR
   \   0000A7   04           INC     A
   \   0000A8   F0           MOVX    @DPTR,A
   1373                  // Invalidate nwk addr so end device does not use in its data reqs.
   1374                  _NIB.nwkDevAddress = INVALID_NODE_ADDR;
   \   0000A9   90....       MOV     DPTR,#_NIB + 20
   \   0000AC   14           DEC     A
   \   0000AD   F0           MOVX    @DPTR,A
   \   0000AE   A3           INC     DPTR
   \   0000AF   04           INC     A
   \   0000B0   F0           MOVX    @DPTR,A
   1375                  ZMacSetReq( ZMacShortAddress, (uint8 *)&addr );
   \   0000B1                ; Setup parameters for call to function ZMacSetReq
   \   0000B1   85..82       MOV     DPL,?XSP + 0
   \   0000B4   85..83       MOV     DPH,?XSP + 1
   \   0000B7   AA82         MOV     R2,DPL
   \   0000B9   AB83         MOV     R3,DPH
   \   0000BB   7953         MOV     R1,#0x53
   \   0000BD   12....       LCALL   ??ZMacSetReq?relay
   1376                }
   1377          
   1378                // Clear the neighbor Table and network discovery tables.
   1379                nwkNeighborInitTable();
   \                     ??ZDApp_ProcessNetworkJoin_14:
   \   0000C0                ; Setup parameters for call to function nwkNeighborInitTable
   \   0000C0   12....       LCALL   ??nwkNeighborInitTable?relay
   1380                NLME_NwkDiscTerm();
   \   0000C3                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   0000C3   12....       LCALL   ??NLME_NwkDiscTerm?relay
   1381          
   1382                zdoDiscCounter = 1;
   \   0000C6   90....       MOV     DPTR,#zdoDiscCounter
   \   0000C9   7401         MOV     A,#0x1
   \   0000CB   F0           MOVX    @DPTR,A
   1383          
   1384          //      ZDApp_NetworkInit( (uint16)
   1385          //                         ((NWK_START_DELAY * (osal_rand() & 0x0F)) +
   1386          //                          (NWK_START_DELAY * 5)) );
   1387                ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1388                     + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
   \   0000CC                ; Setup parameters for call to function ZDApp_NetworkInit
   \   0000CC                ; Setup parameters for call to function osal_rand
   1389              }
   1390            }
   \                     ??ZDApp_ProcessNetworkJoin_15:
   \   0000CC   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   0000CF   8077         SJMP    ??CrossCallReturnLabel_28
   1391            else if ( devState == DEV_NWK_ORPHAN || devState == DEV_NWK_REJOIN )
   \                     ??ZDApp_ProcessNetworkJoin_1:
   \   0000D1   E0           MOVX    A,@DPTR
   \   0000D2   6404         XRL     A,#0x4
   \   0000D4   7064         JNZ     ??ZDApp_ProcessNetworkJoin_16
   1392            {
   1393              // results of an orphaning attempt by this device
   1394              if (nwkStatus == ZSuccess)
   \                     ??ZDApp_ProcessNetworkJoin_2:
   \   0000D6   90....       MOV     DPTR,#nwkStatus
   \   0000D9   E0           MOVX    A,@DPTR
   \   0000DA   7013         JNZ     ??ZDApp_ProcessNetworkJoin_17
   1395              {
   1396                if ( ZG_SECURE_ENABLED )
   1397                {
   1398                  ZDApp_RestoreNwkKey();
   1399                }
   1400                
   1401                devState = DEV_END_DEVICE;
   \   0000DC   12....       LCALL   ?Subroutine8 & 0xFFFF
   1402                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   1403                // setup Power Manager Device
   1404          #if defined ( POWER_SAVING )
   1405                osal_pwrmgr_device( PWRMGR_BATTERY );
   1406          #endif
   1407          
   1408                if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
   \                     ??CrossCallReturnLabel_1:
   \   0000DF   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   0000E2   E0           MOVX    A,@DPTR
   \   0000E3   A2E3         MOV     C,0xE0 /* A   */.3
   \   0000E5   5003         JNC     ??CrossCallReturnLabel_20
   1409                {
   1410                  // The receiver is on, turn network layer polling off.
   1411                  NLME_SetPollRate( 0 );
   \   0000E7                ; Setup parameters for call to function NLME_SetPollRate
   \   0000E7   12....       LCALL   ?Subroutine19 & 0xFFFF
   1412                  NLME_SetQueuedPollRate( 0 );
   1413                  NLME_SetResponseRate( 0 );
   1414                }
   1415          
   1416                if ( ZSTACK_ROUTER_BUILD )
   1417                {
   1418                  // NOTE: first two parameters are not used, see NLMEDE.h for details
   1419                  if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   1420                  {
   1421                    NLME_StartRouterRequest( 0, 0, false );
   1422                  }
   1423                }
   1424                
   1425                ZDApp_AnnounceNewAddress();
   \                     ??CrossCallReturnLabel_20:
   \   0000EA                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   0000EA   12....       LCALL   ??ZDApp_AnnounceNewAddress?relay
   \   0000ED   8059         SJMP    ??CrossCallReturnLabel_28
   1426              }
   1427              else
   1428              {
   1429                if ( devStartMode == MODE_RESUME )
   \                     ??ZDApp_ProcessNetworkJoin_17:
   \   0000EF   90....       MOV     DPTR,#devStartMode
   \   0000F2   E0           MOVX    A,@DPTR
   \   0000F3   6401         XRL     A,#0x1
   \   0000F5   703B         JNZ     ??ZDApp_ProcessNetworkJoin_18
   1430                {
   1431                  if ( ++retryCnt <= MAX_RESUME_RETRY )
   \   0000F7   90....       MOV     DPTR,#retryCnt
   \   0000FA   E0           MOVX    A,@DPTR
   \   0000FB   04           INC     A
   \   0000FC   F0           MOVX    @DPTR,A
   \   0000FD   C3           CLR     C
   \   0000FE   9404         SUBB    A,#0x4
   \   000100   5028         JNC     ??ZDApp_ProcessNetworkJoin_19
   1432                  {
   1433                    if ( _NIB.nwkPanId == 0xFFFF || _NIB.nwkPanId == INVALID_PAN_ID )
   \   000102   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000105   7003         JNZ     ??ZDApp_ProcessNetworkJoin_20
   \   000107   74FF         MOV     A,#-0x1
   \   000109   69           XRL     A,R1
   \                     ??ZDApp_ProcessNetworkJoin_20:
   \   00010A   600A         JZ      ??ZDApp_ProcessNetworkJoin_21
   \   00010C   74FE         MOV     A,#-0x2
   \   00010E   68           XRL     A,R0
   \   00010F   7003         JNZ     ??ZDApp_ProcessNetworkJoin_22
   \   000111   74FF         MOV     A,#-0x1
   \   000113   69           XRL     A,R1
   \                     ??ZDApp_ProcessNetworkJoin_22:
   \   000114   7007         JNZ     ??ZDApp_ProcessNetworkJoin_23
   1434                      devStartMode = MODE_JOIN;
   \                     ??ZDApp_ProcessNetworkJoin_21:
   \   000116   90....       MOV     DPTR,#devStartMode
   \   000119   E4           CLR     A
   \                     ??ZDApp_ProcessNetworkJoin_24:
   \   00011A   F0           MOVX    @DPTR,A
   \   00011B   8015         SJMP    ??ZDApp_ProcessNetworkJoin_18
   1435                    else
   1436                    {
   1437                      devStartMode = MODE_REJOIN;
   \                     ??ZDApp_ProcessNetworkJoin_23:
   \   00011D   90....       MOV     DPTR,#devStartMode
   \   000120   7403         MOV     A,#0x3
   \   000122   F0           MOVX    @DPTR,A
   1438                      _tmpRejoinState = true;
   \   000123   90....       MOV     DPTR,#_tmpRejoinState
   \   000126   7401         MOV     A,#0x1
   \   000128   80F0         SJMP    ??ZDApp_ProcessNetworkJoin_24
   1439                    }
   1440                  }
   1441                  // Do a normal join to the network after certain times of rejoin retries
   1442                  else if( AIB_apsUseInsecureJoin == true )
   \                     ??ZDApp_ProcessNetworkJoin_19:
   \   00012A   90....       MOV     DPTR,#AIB_apsUseInsecureJoin
   \   00012D   E0           MOVX    A,@DPTR
   \   00012E   6401         XRL     A,#0x1
   \   000130   60E4         JZ      ??ZDApp_ProcessNetworkJoin_21
   1443                  {
   1444                    devStartMode = MODE_JOIN;
   1445                  }
   1446                }
   1447          
   1448                // Clear the neighbor Table and network discovery tables.
   1449                nwkNeighborInitTable();
   \                     ??ZDApp_ProcessNetworkJoin_18:
   \   000132                ; Setup parameters for call to function nwkNeighborInitTable
   \   000132   12....       LCALL   ??nwkNeighborInitTable?relay
   1450                NLME_NwkDiscTerm();
   \   000135                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   000135   12....       LCALL   ??NLME_NwkDiscTerm?relay
   1451          
   1452                // setup a retry for later...
   1453                ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1454                     + (osal_rand()& EXTENDED_JOINING_RANDOM_MASK)) );
   \   000138                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000138                ; Setup parameters for call to function osal_rand
   \   000138   8092         SJMP    ??ZDApp_ProcessNetworkJoin_15
   1455              }
   1456            }
   1457          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
   1458            else
   1459            {
   1460              // Assume from address conflict
   1461              if ( _NIB.nwkAddrAlloc == NWK_ADDRESSING_STOCHASTIC )
   \                     ??ZDApp_ProcessNetworkJoin_16:
   \   00013A   90....       MOV     DPTR,#_NIB + 96
   \   00013D   E0           MOVX    A,@DPTR
   \   00013E   6402         XRL     A,#0x2
   \   000140   7006         JNZ     ??CrossCallReturnLabel_28
   1462              {
   1463                // Notify the network
   1464                ZDApp_AnnounceNewAddress();
   \   000142                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000142   12....       LCALL   ??ZDApp_AnnounceNewAddress?relay
   1465                
   1466                // Notify apps
   1467                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000145                ; Setup parameters for call to function osal_set_event
   \   000145   12....       LCALL   ?Subroutine11 & 0xFFFF
   1468              }
   1469            }
   1470          #endif
   1471          }
   \                     ??CrossCallReturnLabel_28:
   \   000148   02....       LJMP    ?Subroutine4 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   90....       MOV     DPTR,#_NIB + 33
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F8           MOV     R0,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F9           MOV     R1,A
   \   000008   74FF         MOV     A,#-0x1
   \   00000A   68           XRL     A,R0
   \   00000B   22           RET
   1472          
   1473          /*********************************************************************
   1474           * @fn      ZDApp_SaveNwkKey()
   1475           *
   1476           * @brief   Save off the Network key information.
   1477           *
   1478           * @param   none
   1479           *
   1480           * @return  none
   1481           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1482          void ZDApp_SaveNwkKey( void )
   \                     ZDApp_SaveNwkKey:
   1483          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1484            nwkActiveKeyItems keyItems;
   1485          
   1486            SSP_ReadNwkActiveKey( &keyItems );
   \   00000A                ; Setup parameters for call to function SSP_ReadNwkActiveKey
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   AA82         MOV     R2,DPL
   \   000012   AB83         MOV     R3,DPH
   \   000014   12....       LCALL   ??SSP_ReadNwkActiveKey?relay
   1487            keyItems.frameCounter++;
   \   000017   90....       MOV     DPTR,#__Constant_1
   \   00001A   78..         MOV     R0,#?V0 + 0
   \   00001C   12....       LCALL   ?L_MOV_X
   \   00001F   7411         MOV     A,#0x11
   \   000021   12....       LCALL   ?XSTACK_DISP0_8
   \   000024   78..         MOV     R0,#?V0 + 0
   \   000026   12....       LCALL   ?L_ADD_TO_X
   1488          
   1489            osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1490                          (void *)&keyItems );
   \   000029                ; Setup parameters for call to function osal_nv_write
   \   000029   85..82       MOV     DPL,?XSP + 0
   \   00002C   85..83       MOV     DPH,?XSP + 1
   \   00002F   8582..       MOV     ?V0 + 0,DPL
   \   000032   8583..       MOV     ?V0 + 1,DPH
   \   000035   78..         MOV     R0,#?V0 + 0
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003A   75..15       MOV     ?V0 + 0,#0x15
   \   00003D   75..00       MOV     ?V0 + 1,#0x0
   \   000040   78..         MOV     R0,#?V0 + 0
   \   000042   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000045   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000048   12....       LCALL   ?DEALLOC_XSTACK8
   1491          
   1492            nwkFrameCounterChanges = 0;
   \   00004B   90....       MOV     DPTR,#nwkFrameCounterChanges
   \   00004E   E4           CLR     A
   \   00004F   F0           MOVX    @DPTR,A
   \   000050   A3           INC     DPTR
   \   000051   F0           MOVX    @DPTR,A
   1493          }
   \   000052                REQUIRE ?Subroutine5
   \   000052                ; // Fall through to label ?Subroutine5

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7415         MOV     A,#0x15
   \   000002   12....       LCALL   ?DEALLOC_XSTACK8
   \   000005   7F04         MOV     R7,#0x4
   \   000007   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   7C00         MOV     R4,#0x0
   \   000002   7D00         MOV     R5,#0x0
   \   000004   7A82         MOV     R2,#-0x7e
   \   000006                REQUIRE ??Subroutine25_0
   \   000006                ; // Fall through to label ??Subroutine25_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine25_0:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   12....       LCALL   ??osal_nv_write?relay
   \   000005   7404         MOV     A,#0x4
   \   000007   22           RET
   1494          
   1495          /*********************************************************************
   1496           * @fn      ZDApp_ResetNwkKey()
   1497           *
   1498           * @brief   Reset the Network key information in NV.
   1499           *
   1500           * @param   none
   1501           *
   1502           * @return  none
   1503           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1504          void ZDApp_ResetNwkKey( void )
   \                     ZDApp_ResetNwkKey:
   1505          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1506            nwkActiveKeyItems keyItems;
   1507          
   1508            osal_memset( &keyItems, 0, sizeof( nwkActiveKeyItems ) );
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C15         MOV     R4,#0x15
   \   00000C   12....       LCALL   ?Subroutine20 & 0xFFFF
   1509            osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1510                          (void *)&keyItems );
   \                     ??CrossCallReturnLabel_22:
   \   00000F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000012   75..15       MOV     ?V0 + 0,#0x15
   \   000015   75..00       MOV     ?V0 + 1,#0x0
   \   000018   78..         MOV     R0,#?V0 + 0
   \   00001A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001D   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000020   12....       LCALL   ?DEALLOC_XSTACK8
   1511          }
   \   000023   02....       LJMP    ?Subroutine7 & 0xFFFF
   1512          
   1513          /*********************************************************************
   1514           * @fn      ZDApp_RestoreNwkKey()
   1515           *
   1516           * @brief
   1517           *
   1518           *   Save off the Network key information.
   1519           *
   1520           * @param   none
   1521           *
   1522           * @return  true if restored from NV, false if not
   1523           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1524          uint8 ZDApp_RestoreNwkKey( void )
   \                     ZDApp_RestoreNwkKey:
   1525          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1526            nwkActiveKeyItems keyItems;
   1527            uint8 ret = false;
   \   00000A   7E00         MOV     R6,#0x0
   1528          
   1529            if ( osal_nv_read( ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), (void*)&keyItems )
   1530                == ZSUCCESS )
   \   00000C                ; Setup parameters for call to function osal_nv_read
   \   00000C   85..82       MOV     DPL,?XSP + 0
   \   00000F   85..83       MOV     DPH,?XSP + 1
   \   000012   8582..       MOV     ?V0 + 0,DPL
   \   000015   8583..       MOV     ?V0 + 1,DPH
   \   000018   78..         MOV     R0,#?V0 + 0
   \   00001A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001D   75..15       MOV     ?V0 + 0,#0x15
   \   000020   8E..         MOV     ?V0 + 1,R6
   \   000022   78..         MOV     R0,#?V0 + 0
   \   000024   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000027   7C00         MOV     R4,#0x0
   \   000029   7D00         MOV     R5,#0x0
   \   00002B   7A82         MOV     R2,#-0x7e
   \   00002D   7B00         MOV     R3,#0x0
   \   00002F   12....       LCALL   ??osal_nv_read?relay
   \   000032   7404         MOV     A,#0x4
   \   000034   12....       LCALL   ?DEALLOC_XSTACK8
   \   000037   E9           MOV     A,R1
   \   000038   702F         JNZ     ??ZDApp_RestoreNwkKey_0
   1531            {
   1532              if ( keyItems.frameCounter > 0 )
   \   00003A   7411         MOV     A,#0x11
   \   00003C   12....       LCALL   ?XSTACK_DISP0_8
   \   00003F   78..         MOV     R0,#?V0 + 0
   \   000041   12....       LCALL   ?L_MOV_X
   \   000044   E5..         MOV     A,?V0 + 0
   \   000046   45..         ORL     A,?V0 + 1
   \   000048   45..         ORL     A,?V0 + 2
   \   00004A   45..         ORL     A,?V0 + 3
   \   00004C   6011         JZ      ??ZDApp_RestoreNwkKey_1
   1533              {
   1534                // Restore the key information
   1535                keyItems.frameCounter += MAX_NWK_FRAMECOUNTER_CHANGES;
   1536                nwkFrameCounter = keyItems.frameCounter;
   \   00004E   90....       MOV     DPTR,#__Constant_3e8
   \   000051   78..         MOV     R0,#?V0 + 0
   \   000053   12....       LCALL   ?L_ADD_X
   \   000056   90....       MOV     DPTR,#nwkFrameCounter
   \   000059   78..         MOV     R0,#?V0 + 0
   \   00005B   12....       LCALL   ?L_MOV_TO_X
   1537                ret = true;
   \   00005E   0E           INC     R6
   1538              }
   1539          
   1540              // Force a save for the first frame counter increment
   1541              nwkFrameCounterChanges = MAX_NWK_FRAMECOUNTER_CHANGES + 1;
   \                     ??ZDApp_RestoreNwkKey_1:
   \   00005F   90....       MOV     DPTR,#nwkFrameCounterChanges
   \   000062   74E9         MOV     A,#-0x17
   \   000064   F0           MOVX    @DPTR,A
   \   000065   A3           INC     DPTR
   \   000066   7403         MOV     A,#0x3
   \   000068   F0           MOVX    @DPTR,A
   1542            }
   1543            return ( ret );
   \                     ??ZDApp_RestoreNwkKey_0:
   \   000069   EE           MOV     A,R6
   \   00006A   F9           MOV     R1,A
   \   00006B   02....       LJMP    ?Subroutine5 & 0xFFFF
   1544          }
   1545          
   1546          /*********************************************************************
   1547           * @fn      ZDApp_ResetTimerStart
   1548           *
   1549           * @brief   Start the reset timer.
   1550           *
   1551           * @param   delay - delay time(ms) before reset
   1552           *
   1553           * @return  none
   1554           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1555          void ZDApp_ResetTimerStart( uint16 delay )
   \                     ZDApp_ResetTimerStart:
   1556          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1557            // Start the rest timer
   1558            osal_start_timerEx( ZDAppTaskID, ZDO_DEVICE_RESET, delay );
   \   000004                ; Setup parameters for call to function osal_start_timerEx
   \   000004   EA           MOV     A,R2
   \   000005   FC           MOV     R4,A
   \   000006   EB           MOV     A,R3
   \   000007   FD           MOV     R5,A
   \   000008   7A04         MOV     R2,#0x4
   \   00000A   7B00         MOV     R3,#0x0
   \   00000C   90....       MOV     DPTR,#ZDAppTaskID
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F9           MOV     R1,A
   \   000011   12....       LCALL   ??osal_start_timerEx?relay
   1559          }
   \   000014   02....       LJMP    ?Subroutine2 & 0xFFFF
   1560          
   1561          /*********************************************************************
   1562           * @fn      ZDApp_ResetTimerCancel
   1563           *
   1564           * @brief   Cancel the reset timer.
   1565           *
   1566           * @param   none
   1567           *
   1568           * @return  none
   1569           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1570          void ZDApp_ResetTimerCancel( void )
   \                     ZDApp_ResetTimerCancel:
   1571          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1572            // Cancel the reset timer
   1573            osal_stop_timerEx( ZDAppTaskID, ZDO_DEVICE_RESET );
   \   000004                ; Setup parameters for call to function osal_stop_timerEx
   \   000004   7A04         MOV     R2,#0x4
   \   000006   7B00         MOV     R3,#0x0
   \   000008   90....       MOV     DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   ??osal_stop_timerEx?relay
   1574          }
   \   000010   02....       LJMP    ?Subroutine2 & 0xFFFF
   1575          
   1576          /*********************************************************************
   1577           * @fn      ZDApp_LeaveCtrlInit
   1578           *
   1579           * @brief   Initialize the leave control logic.
   1580           *
   1581           * @param   none
   1582           *
   1583           * @return  none
   1584           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1585          void ZDApp_LeaveCtrlInit( void )
   \                     ZDApp_LeaveCtrlInit:
   1586          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1587            uint8 status;
   1588          
   1589          
   1590            // Initialize control state
   1591            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
   \   000005   12....       LCALL   ?Subroutine10 & 0xFFFF
   1592          
   1593            status = osal_nv_item_init( ZCD_NV_LEAVE_CTRL,
   1594                                        sizeof(ZDApp_LeaveCtrl),
   1595                                        &ZDApp_LeaveCtrl );
   1596          
   1597            if ( status == ZSUCCESS )
   \                     ??CrossCallReturnLabel_4:
   \   000008   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00000B   7C01         MOV     R4,#0x1
   \   00000D   7D00         MOV     R5,#0x0
   \   00000F   7A85         MOV     R2,#-0x7b
   \   000011   7B00         MOV     R3,#0x0
   \   000013   12....       LCALL   ??osal_nv_item_init?relay
   \   000016   7402         MOV     A,#0x2
   \   000018   12....       LCALL   ?DEALLOC_XSTACK8
   \   00001B   E9           MOV     A,R1
   \   00001C   7020         JNZ     ??ZDApp_LeaveCtrlInit_0
   1598            {
   1599              // Read saved control
   1600              osal_nv_read( ZCD_NV_LEAVE_CTRL,
   1601                            0,
   1602                            sizeof( uint8 ),
   1603                            &ZDApp_LeaveCtrl);
   \   00001E                ; Setup parameters for call to function osal_nv_read
   \   00001E   78..         MOV     R0,#?V0 + 0
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   75..01       MOV     ?V0 + 0,#0x1
   \   000026   75..00       MOV     ?V0 + 1,#0x0
   \   000029   78..         MOV     R0,#?V0 + 0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   7C00         MOV     R4,#0x0
   \   000030   7D00         MOV     R5,#0x0
   \   000032   7A85         MOV     R2,#-0x7b
   \   000034   7B00         MOV     R3,#0x0
   \   000036   12....       LCALL   ??osal_nv_read?relay
   \   000039   7404         MOV     A,#0x4
   \   00003B   12....       LCALL   ?DEALLOC_XSTACK8
   1604            }
   1605          }
   \                     ??ZDApp_LeaveCtrlInit_0:
   \   00003E   80..         SJMP    ??Subroutine27_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000003   E4           CLR     A
   \   000004   F0           MOVX    @DPTR,A
   \   000005                ; Setup parameters for call to function osal_nv_item_init
   \   000005                ; Setup parameters for call to function osal_nv_write
   \   000005   75....       MOV     ?V0 + 0,#ZDApp_LeaveCtrl & 0xff
   \   000008   75....       MOV     ?V0 + 1,#(ZDApp_LeaveCtrl >> 8) & 0xff
   \   00000B   78..         MOV     R0,#?V0 + 0
   \   00000D   22           RET
   1606          
   1607          /*********************************************************************
   1608           * @fn      ZDApp_LeaveCtrlSet
   1609           *
   1610           * @brief   Set the leave control logic.
   1611           *
   1612           * @param   ra - reassociate flag
   1613           *
   1614           * @return  none
   1615           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1616          void ZDApp_LeaveCtrlSet( uint8 ra )
   \                     ZDApp_LeaveCtrlSet:
   1617          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   1618            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_SET;
   \   000007   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   00000A   7401         MOV     A,#0x1
   \   00000C   F0           MOVX    @DPTR,A
   1619          
   1620            if ( ra == TRUE )
   \   00000D   6E           XRL     A,R6
   \   00000E   7003         JNZ     ??ZDApp_LeaveCtrlSet_0
   1621            {
   1622              ZDApp_LeaveCtrl |= ZDAPP_LEAVE_CTRL_RA;
   \   000010   7403         MOV     A,#0x3
   \   000012   F0           MOVX    @DPTR,A
   1623            }
   1624          
   1625            // Write the leave control
   1626            osal_nv_write( ZCD_NV_LEAVE_CTRL,
   1627                           0,
   1628                           sizeof( uint8 ),
   1629                           &ZDApp_LeaveCtrl);
   \                     ??ZDApp_LeaveCtrlSet_0:
   \   000013                ; Setup parameters for call to function osal_nv_write
   \   000013   75....       MOV     ?V0 + 0,#ZDApp_LeaveCtrl & 0xff
   \   000016   75....       MOV     ?V0 + 1,#(ZDApp_LeaveCtrl >> 8) & 0xff
   \   000019   78..         MOV     R0,#?V0 + 0
   \   00001B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001E   75..01       MOV     ?V0 + 0,#0x1
   \   000021   75..00       MOV     ?V0 + 1,#0x0
   \   000024   78..         MOV     R0,#?V0 + 0
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000029   7C00         MOV     R4,#0x0
   \   00002B   7D00         MOV     R5,#0x0
   \   00002D   7A85         MOV     R2,#-0x7b
   \   00002F   12....       LCALL   ??Subroutine25_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000032   80..         SJMP    ??Subroutine26_0
   1630          }
   1631          
   1632          /*********************************************************************
   1633           * @fn      ZDApp_LeaveCtrlBypass
   1634           *
   1635           * @brief   Check if NV restore should be skipped during a leave reset.
   1636           *
   1637           * @param   none
   1638           *
   1639           * @return  uint8 - (TRUE bypass:FALSE do not bypass)
   1640           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1641          uint8 ZDApp_LeaveCtrlBypass( void )
   \                     ZDApp_LeaveCtrlBypass:
   1642          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1643            uint8 bypass;
   1644          
   1645            if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
   1646            {
   1647              bypass = TRUE;
   1648            }
   1649            else
   1650            {
   1651              bypass = FALSE;
   1652            }
   1653          
   1654            return bypass;
   \   000004   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000007   E0           MOVX    A,@DPTR
   \   000008   A2E0         MOV     C,0xE0 /* A   */.0
   \   00000A   E4           CLR     A
   \   00000B   33           RLC     A
   \   00000C   F9           MOV     R1,A
   \   00000D                REQUIRE ?Subroutine2
   \   00000D                ; // Fall through to label ?Subroutine2
   1655          }
   1656          
   1657          /*********************************************************************
   1658           * @fn      ZDApp_LeaveCtrlStartup
   1659           *
   1660           * @brief   Check for startup conditions during a leave reset.
   1661           *
   1662           * @param   state      - devState_t determined by leave control logic
   1663           * @param   startDelay - startup delay
   1664           *
   1665           * @return  none
   1666           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1667          void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay )
   \                     ZDApp_LeaveCtrlStartup:
   1668          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1669            *startDelay = 0;
   \   000005   8C82         MOV     DPL,R4
   \   000007   8D83         MOV     DPH,R5
   \   000009   E4           CLR     A
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B   A3           INC     DPTR
   \   00000C   F0           MOVX    @DPTR,A
   1670          
   1671            if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
   \   00000D   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000010   E0           MOVX    A,@DPTR
   \   000011   A2E0         MOV     C,0xE0 /* A   */.0
   \   000013   5033         JNC     ??ZDApp_LeaveCtrlStartup_0
   1672            {
   1673              if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_RA )
   \   000015   A2E1         MOV     C,0xE0 /* A   */.1
   \   000017   500C         JNC     ??ZDApp_LeaveCtrlStartup_1
   1674              {
   1675                *startDelay = 5000;
   \   000019   8C82         MOV     DPL,R4
   \   00001B   8D83         MOV     DPH,R5
   \   00001D   7488         MOV     A,#-0x78
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   A3           INC     DPTR
   \   000021   7413         MOV     A,#0x13
   \   000023   8005         SJMP    ??ZDApp_LeaveCtrlStartup_2
   1676              }
   1677              else
   1678              {
   1679                *state = DEV_HOLD;
   \                     ??ZDApp_LeaveCtrlStartup_1:
   \   000025   8A82         MOV     DPL,R2
   \   000027   8B83         MOV     DPH,R3
   \   000029   E4           CLR     A
   \                     ??ZDApp_LeaveCtrlStartup_2:
   \   00002A   F0           MOVX    @DPTR,A
   1680              }
   1681          
   1682              // Set leave control to initialized state
   1683              ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
   \   00002B   12....       LCALL   ?Subroutine10 & 0xFFFF
   1684          
   1685              // Write initialized control
   1686              osal_nv_write( ZCD_NV_LEAVE_CTRL,
   1687                            0,
   1688                            sizeof( uint8 ),
   1689                            &ZDApp_LeaveCtrl);
   1690            }
   \                     ??CrossCallReturnLabel_5:
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000031   75..01       MOV     ?V0 + 0,#0x1
   \   000034   75..00       MOV     ?V0 + 1,#0x0
   \   000037   78..         MOV     R0,#?V0 + 0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   7C00         MOV     R4,#0x0
   \   00003E   7D00         MOV     R5,#0x0
   \   000040   7A85         MOV     R2,#-0x7b
   \   000042   12....       LCALL   ??Subroutine25_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000045   12....       LCALL   ?DEALLOC_XSTACK8
   1691          }
   \                     ??ZDApp_LeaveCtrlStartup_0:
   \   000048   02....       LJMP    ??Subroutine27_0 & 0xFFFF
   1692          
   1693          /*********************************************************************
   1694           * @fn      ZDApp_LeaveReset
   1695           *
   1696           * @brief   Setup a device reset due to a leave indication/confirm.
   1697           *
   1698           * @param   ra - reassociate flag
   1699           *
   1700           * @return  none
   1701           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1702          void ZDApp_LeaveReset( uint8 ra )
   \                     ZDApp_LeaveReset:
   1703          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   1704            ZDApp_LeaveCtrlSet( ra );
   \   000005                ; Setup parameters for call to function ZDApp_LeaveCtrlSet
   \   000005   12....       LCALL   ??ZDApp_LeaveCtrlSet?relay
   1705          
   1706            ZDApp_ResetTimerStart( 5000 );
   \   000008                ; Setup parameters for call to function ZDApp_ResetTimerStart
   \   000008   7A88         MOV     R2,#-0x78
   \   00000A   7B13         MOV     R3,#0x13
   \   00000C   12....       LCALL   ??ZDApp_ResetTimerStart?relay
   1707          }
   \   00000F   80..         SJMP    ??Subroutine28_0
   1708          
   1709          /*********************************************************************
   1710           * @fn      ZDApp_LeaveUpdate
   1711           *
   1712           * @brief   Update local device data related to leaving device.
   1713           *
   1714           * @param   nwkAddr        - NWK address of leaving device
   1715           * @param   extAddr        - EXT address of leaving device
   1716           * @param   removeChildren - remove children of leaving device
   1717           *
   1718           * @return  none
   1719           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1720          void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
   \                     ZDApp_LeaveUpdate:
   1721                                  uint8 removeChildren )
   1722          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1723            /*
   1724            AddrMgrEntry_t entry;
   1725            */
   1726            (void)nwkAddr;  // Intentionally unreferenced parameter
   1727          
   1728            // Remove if child
   1729            if ( ZSTACK_ROUTER_BUILD )
   1730            {
   1731              NLME_RemoveChild( extAddr, removeChildren );
   1732            }
   1733          
   1734            /*
   1735            // Set NWK address to invalid
   1736            entry.user    = ADDRMGR_USER_DEFAULT;
   1737            entry.nwkAddr = INVALID_NODE_ADDR;
   1738            AddrMgrExtAddrSet( entry.extAddr, extAddr );
   1739            AddrMgrEntryUpdate( &entry );
   1740          
   1741            // Check
   1742            if ( removeChildren == TRUE )
   1743            {
   1744              // Set index to INVALID_NODE_ADDR to start search
   1745              entry.index = INVALID_NODE_ADDR;
   1746          
   1747              // Get first entry
   1748              AddrMgrEntryGetNext( &entry );
   1749          
   1750              // Remove all descendents
   1751              while ( entry.index != INVALID_NODE_ADDR )
   1752              {
   1753                // Check NWK address allocation algorithm
   1754                if ( RTG_ANCESTOR( entry.nwkAddr, thisAddr ) != 0 )
   1755                {
   1756                  // Set NWK address to invalid
   1757                  entry.nwkAddr = INVALID_NODE_ADDR;
   1758                  AddrMgrEntryUpdate( &entry );
   1759                }
   1760          
   1761                // Get next entry
   1762                AddrMgrEntryGetNext( &entry );
   1763              }
   1764            }
   1765            */
   1766          }
   \   000000   02....       LJMP    ?BRET
   1767          
   1768          /*********************************************************************
   1769           * CALLBACK FUNCTIONS
   1770           */
   1771          
   1772          
   1773          /*********************************************************************
   1774           * @fn      ZDApp_SendEventMsg()
   1775           *
   1776           * @brief
   1777           *
   1778           *   Sends a Network Join message
   1779           *
   1780           * @param  cmd - command ID
   1781           * @param  len - length (in bytes) of the buf field
   1782           * @param  buf - buffer for the rest of the message.
   1783           *
   1784           * @return  none
   1785           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1786          void ZDApp_SendEventMsg( uint8 cmd, uint8 len, uint8 *buf )
   \                     ZDApp_SendEventMsg:
   1787          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EA           MOV     A,R2
   1788            ZDApp_SendMsg( ZDAppTaskID, cmd, len, buf );
   \   000008                ; Setup parameters for call to function ZDApp_SendMsg
   \   000008   FB           MOV     R3,A
   \   000009   EE           MOV     A,R6
   \   00000A   FA           MOV     R2,A
   \   00000B                REQUIRE ?Subroutine6
   \   00000B                ; // Fall through to label ?Subroutine6
   1789          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000003   80..         SJMP    ??Subroutine28_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   90....       MOV     DPTR,#ZDAppTaskID
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   12....       LCALL   ??ZDApp_SendMsg?relay
   \   000008   22           RET
   1790          
   1791          /*********************************************************************
   1792           * @fn      ZDApp_SendMsg()
   1793           *
   1794           * @brief   Sends a OSAL message
   1795           *
   1796           * @param  taskID - Where to send the message
   1797           * @param  cmd - command ID
   1798           * @param  len - length (in bytes) of the buf field
   1799           * @param  buf - buffer for the rest of the message.
   1800           *
   1801           * @return  none
   1802           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1803          void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf )
   \                     ZDApp_SendMsg:
   1804          {
   \   000000   74ED         MOV     A,#-0x13
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 4,R1
   \   000007   8A..         MOV     ?V0 + 6,R2
   \   000009   8B..         MOV     ?V0 + 5,R3
   \   00000B   8C..         MOV     ?V0 + 2,R4
   \   00000D   8D..         MOV     ?V0 + 3,R5
   1805            osal_event_hdr_t *msgPtr;
   1806          
   1807            // Send the address to the task
   1808            msgPtr = (osal_event_hdr_t *)osal_msg_allocate( len );
   \   00000F   8B82         MOV     DPL,R3
   \   000011   8582..       MOV     ?V0 + 0,DPL
   \   000014   75..00       MOV     ?V0 + 1,#0x0
   \   000017                ; Setup parameters for call to function osal_msg_allocate
   \   000017   AA..         MOV     R2,?V0 + 0
   \   000019   AB..         MOV     R3,?V0 + 1
   \   00001B   12....       LCALL   ??osal_msg_allocate?relay
   \   00001E   8A..         MOV     ?V0 + 8,R2
   \   000020   8B..         MOV     ?V0 + 9,R3
   \   000022   AE..         MOV     R6,?V0 + 8
   \   000024   AF..         MOV     R7,?V0 + 9
   1809            if ( msgPtr )
   \   000026   EE           MOV     A,R6
   \   000027   4F           ORL     A,R7
   \   000028   6034         JZ      ??ZDApp_SendMsg_0
   1810            {
   1811              if ( (len > 0) && (buf != NULL) )
   \   00002A   E5..         MOV     A,?V0 + 5
   \   00002C   6020         JZ      ??ZDApp_SendMsg_1
   \   00002E   E5..         MOV     A,?V0 + 2
   \   000030   45..         ORL     A,?V0 + 3
   \   000032   601A         JZ      ??ZDApp_SendMsg_1
   1812                osal_memcpy( msgPtr, buf, len );
   \   000034                ; Setup parameters for call to function osal_memcpy
   \   000034   85....       MOV     ?V0 + 8,?V0 + 2
   \   000037   85....       MOV     ?V0 + 9,?V0 + 3
   \   00003A   75..00       MOV     ?V0 + 10,#0x0
   \   00003D   78..         MOV     R0,#?V0 + 8
   \   00003F   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000042   AC..         MOV     R4,?V0 + 0
   \   000044   AD..         MOV     R5,?V0 + 1
   \   000046   12....       LCALL   ??osal_memcpy?relay
   \   000049   7403         MOV     A,#0x3
   \   00004B   12....       LCALL   ?DEALLOC_XSTACK8
   1813          
   1814              msgPtr->event = cmd;
   \                     ??ZDApp_SendMsg_1:
   \   00004E   8E82         MOV     DPL,R6
   \   000050   8F83         MOV     DPH,R7
   \   000052   E5..         MOV     A,?V0 + 6
   \   000054   F0           MOVX    @DPTR,A
   1815              osal_msg_send( taskID, (uint8 *)msgPtr );
   \   000055                ; Setup parameters for call to function osal_msg_send
   \   000055   EE           MOV     A,R6
   \   000056   FA           MOV     R2,A
   \   000057   EF           MOV     A,R7
   \   000058   FB           MOV     R3,A
   \   000059   A9..         MOV     R1,?V0 + 4
   \   00005B   12....       LCALL   ??osal_msg_send?relay
   1816            }
   1817          }
   \                     ??ZDApp_SendMsg_0:
   \   00005E   7F0B         MOV     R7,#0xb
   \   000060   02....       LJMP    ?BANKED_LEAVE_XDATA
   1818          
   1819          /*********************************************************************
   1820           * Call Back Functions from NWK  - API
   1821           */
   1822          
   1823          /*********************************************************************
   1824           * @fn          ZDO_NetworkDiscoveryConfirmCB
   1825           *
   1826           * @brief       This function returns a choice of PAN to join.
   1827           *
   1828           * @param       ResultCount - Number of routers discovered
   1829           * @param               NetworkList - Pointer to list of network descriptors
   1830           *
   1831           * @return      ZStatus_t
   1832           */
   1833          #define STACK_PROFILE_MAX 2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1834          ZStatus_t ZDO_NetworkDiscoveryConfirmCB( uint8 ResultCount,
   \                     ZDO_NetworkDiscoveryConfirmCB:
   1835                                                   networkDesc_t *NetworkList )
   1836          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV     A,#-0xe
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0 + 4,R1
   \   00000C   8A..         MOV     ?V0 + 6,R2
   \   00000E   8B..         MOV     ?V0 + 7,R3
   1837            networkDesc_t *pNwkDesc = NetworkList;
   1838            ZDO_NetworkDiscoveryCfm_t msg;
   1839            uint8 i = ResultCount;
   1840            uint8 stackProfile;
   1841            uint8 stackProfilePro;
   1842            uint8 selected;
   1843          
   1844          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
   1845            if ( zdappMgmtNwkDiscReqInProgress )
   1846            {
   1847              zdappMgmtNwkDiscReqInProgress = false;
   1848              ZDO_FinishProcessingMgmtNwkDiscReq( ResultCount, NetworkList );
   1849              return ( ZSuccess );
   1850            }
   1851          #endif
   1852          
   1853            // process discovery results
   1854            stackProfilePro = FALSE;
   \   000010   75..00       MOV     ?V0 + 8,#0x0
   1855            selected = FALSE;
   1856          
   1857            for ( stackProfile = 0; stackProfile < STACK_PROFILE_MAX; stackProfile++ )
   \   000013   75..00       MOV     ?V0 + 5,#0x0
   1858            {
   1859              pNwkDesc = NetworkList;
   \                     ??ZDO_NetworkDiscoveryConfirmCB_0:
   \   000016   AE..         MOV     R6,?V0 + 6
   \   000018   AF..         MOV     R7,?V0 + 7
   1860              for ( i = 0; i < ResultCount; i++, pNwkDesc = pNwkDesc->nextDesc )
   \   00001A   75..00       MOV     ?V0 + 9,#0x0
   \   00001D   8020         SJMP    ??ZDO_NetworkDiscoveryConfirmCB_1
   1861              {
   1862                if ( zgConfigPANID != 0xFFFF )
   1863                {
   1864                  // PAN Id is preconfigured. check if it matches
   1865                  if ( pNwkDesc->panId != zgConfigPANID )
   1866                    continue;
   1867                }
   1868                
   1869          
   1870                if ( nwk_ExtPANIDValid( ZDO_UseExtendedPANID) == true ) 
   1871                {
   1872                  // If the extended Pan ID is commissioned to a non zero value
   1873                  // Only join the Pan that has match EPID
   1874                  if ( osal_ExtAddrEqual( ZDO_UseExtendedPANID, pNwkDesc->extendedPANID) == false )
   1875                    continue;
   1876                  
   1877                }
   1878          
   1879          
   1880                  // check that network is allowing joining
   1881                  if ( ZSTACK_ROUTER_BUILD )
   1882                  {
   1883                    if ( stackProfilePro == FALSE )
   1884                    {
   1885                      if ( !pNwkDesc->routerCapacity )
   1886                      {
   1887                        continue;
   1888                      }
   1889                    }
   1890                    else
   1891                    {
   1892                      if ( !pNwkDesc->deviceCapacity )
   1893                      {
   1894                        continue;
   1895                      }
   1896                    }
   1897                  }
   1898                  else if ( ZSTACK_END_DEVICE_BUILD )
   1899                  {
   1900                    if ( !pNwkDesc->deviceCapacity )
   1901                    {
   1902                      continue;
   1903                    }
   1904                  }
   1905          
   1906                  // check version of zigbee protocol
   1907                  if ( pNwkDesc->version != _NIB.nwkProtocolVersion )
   1908                    continue;
   1909          
   1910                  // check version of stack profile
   1911                  if ( pNwkDesc->stackProfile != zgStackProfile  )
   1912                  {
   1913                    if ( ((zgStackProfile == HOME_CONTROLS) && (pNwkDesc->stackProfile == ZIGBEEPRO_PROFILE)) 
   1914                        || ((zgStackProfile == ZIGBEEPRO_PROFILE) && (pNwkDesc->stackProfile == HOME_CONTROLS))  )
   \                     ??ZDO_NetworkDiscoveryConfirmCB_2:
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   6402         XRL     A,#0x2
   \   000022   7008         JNZ     ??ZDO_NetworkDiscoveryConfirmCB_3
   \   000024   7401         MOV     A,#0x1
   \   000026   68           XRL     A,R0
   \   000027   7003         JNZ     ??ZDO_NetworkDiscoveryConfirmCB_3
   1915                      stackProfilePro = TRUE;
   \                     ??ZDO_NetworkDiscoveryConfirmCB_4:
   \   000029   75..01       MOV     ?V0 + 8,#0x1
   1916                    
   1917                    if ( stackProfile == 0 )
   \                     ??ZDO_NetworkDiscoveryConfirmCB_3:
   \   00002C   E5..         MOV     A,?V0 + 5
   \   00002E   6003         JZ      $+5
   \   000030   02....       LJMP    ??ZDO_NetworkDiscoveryConfirmCB_5 & 0xFFFF
   \                     ??ZDO_NetworkDiscoveryConfirmCB_6:
   \   000033   05..         INC     ?V0 + 9
   \   000035   EE           MOV     A,R6
   \   000036   2416         ADD     A,#0x16
   \   000038   12....       LCALL   ??Subroutine29_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   00003B   FE           MOV     R6,A
   \   00003C   A3           INC     DPTR
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   FF           MOV     R7,A
   \                     ??ZDO_NetworkDiscoveryConfirmCB_1:
   \   00003F   EE           MOV     A,R6
   \   000040   2407         ADD     A,#0x7
   \   000042   F5..         MOV     ?V0 + 0,A
   \   000044   EF           MOV     A,R7
   \   000045   3400         ADDC    A,#0x0
   \   000047   F5..         MOV     ?V0 + 1,A
   \   000049   EE           MOV     A,R6
   \   00004A   240D         ADD     A,#0xd
   \   00004C   F5..         MOV     ?V0 + 2,A
   \   00004E   EF           MOV     A,R7
   \   00004F   3400         ADDC    A,#0x0
   \   000051   F5..         MOV     ?V0 + 3,A
   \   000053   E5..         MOV     A,?V0 + 9
   \   000055   C3           CLR     C
   \   000056   95..         SUBB    A,?V0 + 4
   \   000058   507D         JNC     ??ZDO_NetworkDiscoveryConfirmCB_7
   \   00005A   90....       MOV     DPTR,#zgConfigPANID
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   F4           CPL     A
   \   00005F   7003         JNZ     ??ZDO_NetworkDiscoveryConfirmCB_8
   \   000061   A3           INC     DPTR
   \   000062   E0           MOVX    A,@DPTR
   \   000063   F4           CPL     A
   \                     ??ZDO_NetworkDiscoveryConfirmCB_8:
   \   000064   6013         JZ      ??ZDO_NetworkDiscoveryConfirmCB_9
   \   000066   8E82         MOV     DPL,R6
   \   000068   8F83         MOV     DPH,R7
   \   00006A   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   00006D   90....       MOV     DPTR,#zgConfigPANID
   \   000070   E0           MOVX    A,@DPTR
   \   000071   68           XRL     A,R0
   \   000072   7003         JNZ     ??ZDO_NetworkDiscoveryConfirmCB_10
   \   000074   A3           INC     DPTR
   \   000075   E0           MOVX    A,@DPTR
   \   000076   69           XRL     A,R1
   \                     ??ZDO_NetworkDiscoveryConfirmCB_10:
   \   000077   70BA         JNZ     ??ZDO_NetworkDiscoveryConfirmCB_6
   \                     ??ZDO_NetworkDiscoveryConfirmCB_9:
   \   000079                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   000079   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   00007B   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   00007D   12....       LCALL   ??nwk_ExtPANIDValid?relay
   \   000080   E9           MOV     A,R1
   \   000081   6401         XRL     A,#0x1
   \   000083   700E         JNZ     ??ZDO_NetworkDiscoveryConfirmCB_11
   \   000085                ; Setup parameters for call to function sAddrExtCmp
   \   000085   AC..         MOV     R4,?V0 + 2
   \   000087   AD..         MOV     R5,?V0 + 3
   \   000089   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   00008B   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   00008D   12....       LCALL   ??sAddrExtCmp?relay
   \   000090   E9           MOV     A,R1
   \   000091   60A0         JZ      ??ZDO_NetworkDiscoveryConfirmCB_6
   \                     ??ZDO_NetworkDiscoveryConfirmCB_11:
   \   000093   8E82         MOV     DPL,R6
   \   000095   8F83         MOV     DPH,R7
   \   000097   A3           INC     DPTR
   \   000098   A3           INC     DPTR
   \   000099   A3           INC     DPTR
   \   00009A   A3           INC     DPTR
   \   00009B   A3           INC     DPTR
   \   00009C   A3           INC     DPTR
   \   00009D   E0           MOVX    A,@DPTR
   \   00009E   6093         JZ      ??ZDO_NetworkDiscoveryConfirmCB_6
   \   0000A0   85..82       MOV     DPL,?V0 + 0
   \   0000A3   85..83       MOV     DPH,?V0 + 1
   \   0000A6   E0           MOVX    A,@DPTR
   \   0000A7   F8           MOV     R0,A
   \   0000A8   90....       MOV     DPTR,#_NIB + 17
   \   0000AB   E0           MOVX    A,@DPTR
   \   0000AC   68           XRL     A,R0
   \   0000AD   7084         JNZ     ??ZDO_NetworkDiscoveryConfirmCB_6
   \   0000AF   8E82         MOV     DPL,R6
   \   0000B1   8F83         MOV     DPH,R7
   \   0000B3   A3           INC     DPTR
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   A3           INC     DPTR
   \   0000B8   A3           INC     DPTR
   \   0000B9   A3           INC     DPTR
   \   0000BA   A3           INC     DPTR
   \   0000BB   E0           MOVX    A,@DPTR
   \   0000BC   F8           MOV     R0,A
   \   0000BD   90....       MOV     DPTR,#zgStackProfile
   \   0000C0   E0           MOVX    A,@DPTR
   \   0000C1   68           XRL     A,R0
   \   0000C2   6033         JZ      ??ZDO_NetworkDiscoveryConfirmCB_5
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   6401         XRL     A,#0x1
   \   0000C7   6003         JZ      $+5
   \   0000C9   02....       LJMP    ??ZDO_NetworkDiscoveryConfirmCB_2 & 0xFFFF
   \   0000CC   7402         MOV     A,#0x2
   \   0000CE   68           XRL     A,R0
   \   0000CF   6003         JZ      $+5
   \   0000D1   02....       LJMP    ??ZDO_NetworkDiscoveryConfirmCB_3 & 0xFFFF
   \   0000D4   02....       LJMP    ??ZDO_NetworkDiscoveryConfirmCB_4 & 0xFFFF
   1918                    {
   1919                      continue;
   1920                    }
   1921                  }
   1922          
   1923                // check if beacon order is the right value..
   1924                //  if ( pNwkDesc->beaconOrder < ZDO_CONFIG_MAX_BO )
   1925                //    continue;
   1926          
   1927                // choose this pan for joining
   1928                break;
   1929              } 
   1930              if (i < ResultCount)
   1931              {
   1932               selected = TRUE;
   1933                break;
   1934              }
   1935             
   1936              // break if selected or stack profile pro wasn't found
   1937              if ( (selected == TRUE) || (stackProfilePro == FALSE) )
   \                     ??ZDO_NetworkDiscoveryConfirmCB_7:
   \   0000D7   E5..         MOV     A,?V0 + 8
   \   0000D9   600C         JZ      ??ZDO_NetworkDiscoveryConfirmCB_12
   1938              {
   1939                break;
   1940              }
   1941            }
   \   0000DB   05..         INC     ?V0 + 5
   \   0000DD   E5..         MOV     A,?V0 + 5
   \   0000DF   C3           CLR     C
   \   0000E0   9402         SUBB    A,#0x2
   \   0000E2   5003         JNC     $+5
   \   0000E4   02....       LJMP    ??ZDO_NetworkDiscoveryConfirmCB_0 & 0xFFFF
   1942          
   1943            if ( i == ResultCount )
   \                     ??ZDO_NetworkDiscoveryConfirmCB_12:
   \   0000E7   E5..         MOV     A,?V0 + 4
   \   0000E9   65..         XRL     A,?V0 + 9
   \   0000EB   700A         JNZ     ??ZDO_NetworkDiscoveryConfirmCB_5
   1944            {
   1945              msg.hdr.status = ZDO_FAIL;   // couldn't find appropriate PAN to join !
   \   0000ED   7401         MOV     A,#0x1
   \   0000EF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F2   7401         MOV     A,#0x1
   \   0000F4   F0           MOVX    @DPTR,A
   \   0000F5   8058         SJMP    ??ZDO_NetworkDiscoveryConfirmCB_13
   1946            }
   1947            else
   1948            {
   1949              msg.hdr.status = ZDO_SUCCESS;
   \                     ??ZDO_NetworkDiscoveryConfirmCB_5:
   \   0000F7   7401         MOV     A,#0x1
   \   0000F9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FC   E4           CLR     A
   \   0000FD   F0           MOVX    @DPTR,A
   1950              msg.panIdLSB = LO_UINT16( pNwkDesc->panId );
   \   0000FE   8E82         MOV     DPL,R6
   \   000100   8F83         MOV     DPH,R7
   \   000102   E0           MOVX    A,@DPTR
   \   000103   C0E0         PUSH    A
   \   000105   7402         MOV     A,#0x2
   \   000107   12....       LCALL   ?XSTACK_DISP0_8
   \   00010A   D0E0         POP     A
   \   00010C   F0           MOVX    @DPTR,A
   1951              msg.panIdMSB = HI_UINT16( pNwkDesc->panId );
   \   00010D   8E82         MOV     DPL,R6
   \   00010F   8F83         MOV     DPH,R7
   \   000111   A3           INC     DPTR
   \   000112   E0           MOVX    A,@DPTR
   \   000113   C0E0         PUSH    A
   \   000115   7403         MOV     A,#0x3
   \   000117   12....       LCALL   ?XSTACK_DISP0_8
   \   00011A   D0E0         POP     A
   \   00011C   F0           MOVX    @DPTR,A
   1952              msg.logicalChannel = pNwkDesc->logicalChannel;
   \   00011D   8E82         MOV     DPL,R6
   \   00011F   8F83         MOV     DPH,R7
   \   000121   A3           INC     DPTR
   \   000122   A3           INC     DPTR
   \   000123   E0           MOVX    A,@DPTR
   \   000124   C0E0         PUSH    A
   \   000126   7404         MOV     A,#0x4
   \   000128   12....       LCALL   ?XSTACK_DISP0_8
   \   00012B   D0E0         POP     A
   \   00012D   F0           MOVX    @DPTR,A
   1953              msg.version = pNwkDesc->version;
   \   00012E   85..82       MOV     DPL,?V0 + 0
   \   000131   85..83       MOV     DPH,?V0 + 1
   \   000134   E0           MOVX    A,@DPTR
   \   000135   C0E0         PUSH    A
   \   000137   7405         MOV     A,#0x5
   \   000139   12....       LCALL   ?XSTACK_DISP0_8
   \   00013C   D0E0         POP     A
   \   00013E   F0           MOVX    @DPTR,A
   1954              osal_cpyExtAddr( msg.extendedPANID, pNwkDesc->extendedPANID );
   \   00013F                ; Setup parameters for call to function sAddrExtCpy
   \   00013F   AC..         MOV     R4,?V0 + 2
   \   000141   AD..         MOV     R5,?V0 + 3
   \   000143   7406         MOV     A,#0x6
   \   000145   12....       LCALL   ?XSTACK_DISP0_8
   \   000148   AA82         MOV     R2,DPL
   \   00014A   AB83         MOV     R3,DPH
   \   00014C   12....       LCALL   ??sAddrExtCpy?relay
   1955            }
   1956          
   1957            ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_DISC_CNF, sizeof(ZDO_NetworkDiscoveryCfm_t), (uint8 *)&msg );
   \                     ??ZDO_NetworkDiscoveryConfirmCB_13:
   \   00014F                ; Setup parameters for call to function ZDApp_SendMsg
   \   00014F   85..82       MOV     DPL,?XSP + 0
   \   000152   85..83       MOV     DPH,?XSP + 1
   \   000155   AC82         MOV     R4,DPL
   \   000157   AD83         MOV     R5,DPH
   \   000159   7B0E         MOV     R3,#0xe
   \   00015B   7A01         MOV     R2,#0x1
   \   00015D   12....       LCALL   ?Subroutine13 & 0xFFFF
   1958          
   1959            return (ZSuccess);
   \                     ??CrossCallReturnLabel_7:
   \   000160   7900         MOV     R1,#0x0
   \   000162   740E         MOV     A,#0xe
   \   000164   12....       LCALL   ?DEALLOC_XSTACK8
   \   000167   7F0A         MOV     R7,#0xa
   \   000169   02....       LJMP    ?BANKED_LEAVE_XDATA
   1960          }  // ZDO_NetworkDiscoveryConfirmCB
   1961          
   1962          /*********************************************************************
   1963           * @fn          ZDO_NetworkFormationConfirmCB
   1964           *
   1965           * @brief       This function reports the results of the request to
   1966           *              initialize a coordinator in a network.
   1967           *
   1968           * @param       Status - Result of NLME_NetworkFormationRequest()
   1969           *
   1970           * @return      none
   1971           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ??Subroutine23_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000003                REQUIRE ??Subroutine28_0
   \   000003                ; // Fall through to label ??Subroutine28_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1972          void ZDO_NetworkFormationConfirmCB( ZStatus_t Status )
   \                     ZDO_NetworkFormationConfirmCB:
   1973          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   1974            nwkStatus = (byte)Status;
   \   000006   90....       MOV     DPTR,#nwkStatus
   \   000009   F0           MOVX    @DPTR,A
   1975          
   1976            if ( Status == ZSUCCESS )
   \   00000A   700A         JNZ     ??ZDO_NetworkFormationConfirmCB_0
   1977            {
   1978              // LED on shows Coordinator started
   1979              HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   \   00000C                ; Setup parameters for call to function HalLedSet
   \   00000C   12....       LCALL   ?Subroutine22 & 0xFFFF
   1980          
   1981              // LED off forgets HOLD_AUTO_START
   1982              HalLedSet (HAL_LED_4, HAL_LED_MODE_OFF);
   1983          
   1984          #if defined ( ZBIT )
   1985              SIM_SetColor(0xd0ffd0);
   1986          #endif
   1987          
   1988              if ( devState == DEV_HOLD )
   \                     ??CrossCallReturnLabel_23:
   \   00000F   700C         JNZ     ??ZDO_NetworkFormationConfirmCB_1
   1989              {
   1990                // Began with HOLD_AUTO_START
   1991                devState = DEV_COORD_STARTING;
   \   000011   7408         MOV     A,#0x8
   \   000013   F0           MOVX    @DPTR,A
   \   000014   8007         SJMP    ??ZDO_NetworkFormationConfirmCB_1
   1992              }
   1993            }
   1994          #if defined(BLINK_LEDS)
   1995            else
   1996              HalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   \                     ??ZDO_NetworkFormationConfirmCB_0:
   \   000016                ; Setup parameters for call to function HalLedSet
   \   000016   7A04         MOV     R2,#0x4
   \   000018   7904         MOV     R1,#0x4
   \   00001A   12....       LCALL   ??HalLedSet?relay
   1997          #endif
   1998          
   1999            osal_set_event( ZDAppTaskID, ZDO_NETWORK_START );
   \                     ??ZDO_NetworkFormationConfirmCB_1:
   \   00001D                ; Setup parameters for call to function osal_set_event
   \   00001D   7A02         MOV     R2,#0x2
   \   00001F   02....       LJMP    ?Subroutine0 & 0xFFFF
   2000          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   7A01         MOV     R2,#0x1
   \   000002   7904         MOV     R1,#0x4
   \   000004   12....       LCALL   ??HalLedSet?relay
   \   000007                ; Setup parameters for call to function HalLedSet
   \   000007                ; Setup parameters for call to function HalLedSet
   \   000007                ; Setup parameters for call to function HalLedSet
   \   000007   7A00         MOV     R2,#0x0
   \   000009   7908         MOV     R1,#0x8
   \   00000B   12....       LCALL   ??HalLedSet?relay
   \   00000E   90....       MOV     DPTR,#devState
   \   000011   E0           MOVX    A,@DPTR
   \   000012   22           RET
   2001          
   2002          /*********************************************************************
   2003           * @fn          ZDO_StartRouterConfirmCB
   2004           *
   2005           * @brief       This function reports the results of the request to
   2006           *              start functioning as a router in a network.
   2007           *
   2008           * @param       Status - Result of NLME_StartRouterRequest()
   2009           *
   2010           * @return      none
   2011           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2012          void ZDO_StartRouterConfirmCB( ZStatus_t Status )
   \                     ZDO_StartRouterConfirmCB:
   2013          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   2014            nwkStatus = (byte)Status;
   \   000006   90....       MOV     DPTR,#nwkStatus
   \   000009   F0           MOVX    @DPTR,A
   2015          
   2016            if ( Status == ZSUCCESS )
   \   00000A   700A         JNZ     ??ZDO_StartRouterConfirmCB_0
   2017            {
   2018              // LED on shows Router started
   2019              HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   \   00000C                ; Setup parameters for call to function HalLedSet
   \   00000C   12....       LCALL   ?Subroutine22 & 0xFFFF
   2020              // LED off forgets HOLD_AUTO_START
   2021              HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
   2022              if ( devState == DEV_HOLD )
   \                     ??CrossCallReturnLabel_24:
   \   00000F   700C         JNZ     ??ZDO_StartRouterConfirmCB_1
   2023              {
   2024                // Began with HOLD_AUTO_START
   2025                devState = DEV_END_DEVICE;
   \   000011   7406         MOV     A,#0x6
   \   000013   F0           MOVX    @DPTR,A
   \   000014   8007         SJMP    ??ZDO_StartRouterConfirmCB_1
   2026              }
   2027            }
   2028          #if defined(BLINK_LEDS)
   2029            else
   2030              HalLedSet( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   \                     ??ZDO_StartRouterConfirmCB_0:
   \   000016                ; Setup parameters for call to function HalLedSet
   \   000016   7A04         MOV     R2,#0x4
   \   000018   7904         MOV     R1,#0x4
   \   00001A   12....       LCALL   ??HalLedSet?relay
   2031          #endif
   2032          
   2033            osal_set_event( ZDAppTaskID, ZDO_ROUTER_START );
   \                     ??ZDO_StartRouterConfirmCB_1:
   \   00001D                ; Setup parameters for call to function osal_set_event
   \   00001D   7A20         MOV     R2,#0x20
   \   00001F   02....       LJMP    ?Subroutine0 & 0xFFFF
   2034          }
   2035          
   2036          /*********************************************************************
   2037           * @fn          ZDO_JoinConfirmCB
   2038           *
   2039           * @brief       This function allows the next hight layer to be notified
   2040           *              of the results of its request to join itself or another
   2041           *              device to a network.
   2042           *
   2043           * @param       Status - Result of NLME_JoinRequest()
   2044           *
   2045           * @return      none
   2046           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2047          void ZDO_JoinConfirmCB( uint16 PanId, ZStatus_t Status )
   \                     ZDO_JoinConfirmCB:
   2048          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   2049            (void)PanId;  // remove if this parameter is used.
   2050            
   2051            nwkStatus = (byte)Status;
   \   000006   90....       MOV     DPTR,#nwkStatus
   \   000009   F0           MOVX    @DPTR,A
   2052          
   2053            if ( Status == ZSUCCESS )
   \   00000A   700A         JNZ     ??ZDO_JoinConfirmCB_0
   2054            {
   2055              // LED on shows device joined
   2056              HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   \   00000C                ; Setup parameters for call to function HalLedSet
   \   00000C   12....       LCALL   ?Subroutine22 & 0xFFFF
   2057              // LED off forgets HOLD_AUTO_START
   2058              HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
   2059              if ( (devState == DEV_HOLD) )
   \                     ??CrossCallReturnLabel_25:
   \   00000F   700C         JNZ     ??ZDO_JoinConfirmCB_1
   2060              {
   2061                // Began with HOLD_AUTO_START
   2062                devState = DEV_NWK_JOINING;
   \   000011   7403         MOV     A,#0x3
   \   000013   F0           MOVX    @DPTR,A
   \   000014   8007         SJMP    ??ZDO_JoinConfirmCB_1
   2063              }
   2064          
   2065              if ( !ZG_SECURE_ENABLED )
   2066              {
   2067                // Notify to save info into NV
   2068                ZDApp_NVUpdate();
   2069              }
   2070            }
   2071            else
   2072            {
   2073          #if defined(BLINK_LEDS)
   2074              HalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   \                     ??ZDO_JoinConfirmCB_0:
   \   000016                ; Setup parameters for call to function HalLedSet
   \   000016   7A04         MOV     R2,#0x4
   \   000018   7904         MOV     R1,#0x4
   \   00001A   12....       LCALL   ??HalLedSet?relay
   2075          #endif
   2076            }
   2077          
   2078            // Notify ZDApp
   2079            ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_IND, sizeof(osal_event_hdr_t), (byte*)NULL );
   \                     ??ZDO_JoinConfirmCB_1:
   \   00001D                ; Setup parameters for call to function ZDApp_SendMsg
   \   00001D   7C00         MOV     R4,#0x0
   \   00001F   7D00         MOV     R5,#0x0
   \   000021   7B02         MOV     R3,#0x2
   \   000023   7A02         MOV     R2,#0x2
   \   000025   02....       LJMP    ?Subroutine6 & 0xFFFF
   2080          }
   2081          
   2082          /*********************************************************************
   2083           * @fn          ZDO_AddrChangeIndicationCB
   2084           *
   2085           * @brief       This function notifies the application that this
   2086           *              device's address has changed.  Could happen in 
   2087           *              a network with stochastic addressing (PRO).
   2088           *
   2089           * @param       newAddr - the new address
   2090           *
   2091           * @return      none
   2092           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2093          void ZDO_AddrChangeIndicationCB( uint16 newAddr )
   \                     ZDO_AddrChangeIndicationCB:
   2094          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2095            (void)newAddr;  // remove if this parameter is used
   2096            
   2097            // Notify to save info into NV
   2098            ZDApp_NVUpdate();
   2099          
   2100            // Notify the applications   
   2101            osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000004                ; Setup parameters for call to function osal_set_event
   \   000004   12....       LCALL   ?Subroutine11 & 0xFFFF
   2102          
   2103            // Send out a device announce
   2104            ZDApp_AnnounceNewAddress();
   \                     ??CrossCallReturnLabel_29:
   \   000007                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000007   12....       LCALL   ??ZDApp_AnnounceNewAddress?relay
   2105          }
   \   00000A   02....       LJMP    ?Subroutine2 & 0xFFFF
   2106          
   2107          /*********************************************************************
   2108           * @fn          ZDO_JoinIndicationCB
   2109           *
   2110           * @brief       This function allows the next higher layer of a
   2111           *              coordinator to be notified of a remote join request.
   2112           *
   2113           * @param       ShortAddress - 16-bit address
   2114           * @param       ExtendedAddress - IEEE (64-bit) address
   2115           * @param       CapabilityInformation - Association Capability Information
   2116           * @param       type - of joining - 
   2117           *                          NWK_ASSOC_JOIN
   2118           *                          NWK_ASSOC_REJOIN_UNSECURE
   2119           *                          NWK_ASSOC_REJOIN_SECURE
   2120           *
   2121           * @return      ZStatus_t
   2122           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2123          ZStatus_t ZDO_JoinIndicationCB( uint16 ShortAddress, uint8 *ExtendedAddress,
   \                     ZDO_JoinIndicationCB:
   2124                                          uint8 CapabilityInformation, uint8 type )
   2125          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2126            (void)ShortAddress;
   2127            (void)ExtendedAddress;
   2128            (void)CapabilityInformation;
   2129            
   2130              // Notify to save info into NV
   2131              ZDApp_NVUpdate();
   2132            
   2133              // send notification to TC of new device..
   2134              if ( ZG_SECURE_ENABLED )
   2135              {
   2136                if ( type == NWK_ASSOC_JOIN || type == NWK_ASSOC_REJOIN_UNSECURE )
   2137                {
   2138                  osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, 600 );
   2139                }
   2140              }
   2141            
   2142              return ( ZSuccess );
   \   000000                REQUIRE ?Subroutine3
   \   000000                ; // Fall through to label ?Subroutine3

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7900         MOV     R1,#0x0
   \   000002   02....       LJMP    ?BRET
   2143          }
   2144          
   2145          /*********************************************************************
   2146           * @fn          ZDO_ConcentratorIndicationCB
   2147           *
   2148           * @brief       This function allows the next higher layer of a
   2149           *              device to be notified of existence of the concentrator.
   2150           *
   2151           * @param       nwkAddr - 16-bit NWK address of the concentrator
   2152           *
   2153           * @return      void 
   2154           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2155          void ZDO_ConcentratorIndicationCB( uint16 nwkAddr )
   \                     ZDO_ConcentratorIndicationCB:
   2156          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2157            // Write your code here to do something with the concentrator's
   2158            // address.
   2159            (void)nwkAddr;
   2160          }
   \   000000   02....       LJMP    ?BRET
   2161          
   2162          /*********************************************************************
   2163           * @fn          ZDO_LeaveCnf
   2164           *
   2165           * @brief       This function allows the next higher layer to be
   2166           *              notified of the results of its request for this or
   2167           *              a child device to leave the network.
   2168           *
   2169           * @param       cnf - NLME_LeaveCnf_t
   2170           *
   2171           * @return      none
   2172           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2173          void ZDO_LeaveCnf( NLME_LeaveCnf_t* cnf )
   \                     ZDO_LeaveCnf:
   2174          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   2175            // Check for this device
   2176            if ( osal_ExtAddrEqual( cnf->extAddr,
   2177                                    NLME_GetExtAddr() ) == TRUE )
   \   000009                ; Setup parameters for call to function sAddrExtCmp
   \   000009                ; Setup parameters for call to function NLME_GetExtAddr
   \   000009   12....       LCALL   ??NLME_GetExtAddr?relay
   \   00000C   EA           MOV     A,R2
   \   00000D   FC           MOV     R4,A
   \   00000E   EB           MOV     A,R3
   \   00000F   FD           MOV     R5,A
   \   000010   EE           MOV     A,R6
   \   000011   2402         ADD     A,#0x2
   \   000013   FA           MOV     R2,A
   \   000014   EF           MOV     A,R7
   \   000015   3400         ADDC    A,#0x0
   \   000017   FB           MOV     R3,A
   \   000018   12....       LCALL   ??sAddrExtCmp?relay
   \   00001B   E9           MOV     A,R1
   \   00001C   6401         XRL     A,#0x1
   \   00001E   7006         JNZ     ??CrossCallReturnLabel_17
   2178            {
   2179              // Prepare to leave with reset
   2180              ZDApp_LeaveReset( cnf->rejoin );
   \   000020                ; Setup parameters for call to function ZDApp_LeaveReset
   \   000020   EE           MOV     A,R6
   \   000021   240B         ADD     A,#0xb
   \   000023   12....       LCALL   ?Subroutine17 & 0xFFFF
   2181            }
   2182            else if ( ZSTACK_ROUTER_BUILD )
   2183            {
   2184              // Remove device address(optionally descendents) from data
   2185              ZDApp_LeaveUpdate( cnf->dstAddr,
   2186                                 cnf->extAddr,
   2187                                 cnf->removeChildren );
   2188            }
   2189          }
   \                     ??CrossCallReturnLabel_17:
   \   000026   02....       LJMP    ??Subroutine28_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   F582         MOV     DPL,A
   \   000002   EF           MOV     A,R7
   \   000003   3400         ADDC    A,#0x0
   \   000005   F583         MOV     DPH,A
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F9           MOV     R1,A
   \   000009   12....       LCALL   ??ZDApp_LeaveReset?relay
   \   00000C   22           RET
   2190          
   2191          /*********************************************************************
   2192           * @fn          ZDO_LeaveInd
   2193           *
   2194           * @brief       This function allows the next higher layer of a
   2195           *              device to be notified of a remote leave request or
   2196           *              indication.
   2197           *
   2198           * @param       ind - NLME_LeaveInd_t
   2199           *
   2200           * @return      none
   2201           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2202          void ZDO_LeaveInd( NLME_LeaveInd_t* ind )
   \                     ZDO_LeaveInd:
   2203          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   2204            uint8 leave;
   2205          
   2206          
   2207            // Parent is requesting the leave - NWK layer filters out illegal
   2208            // requests
   2209            if ( ind->request == TRUE )
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   6401         XRL     A,#0x1
   \   00001A   7008         JNZ     ??ZDO_LeaveInd_0
   2210            {
   2211              // Notify network of leave
   2212              if ( ZSTACK_ROUTER_BUILD )
   2213              {
   2214                NLME_LeaveRsp_t rsp;
   2215                rsp.rejoin         = ind->rejoin;
   2216                rsp.removeChildren = ind->removeChildren;
   2217                NLME_LeaveRsp( &rsp );
   2218              }
   2219          
   2220              // Prepare to leave with reset
   2221              ZDApp_LeaveReset( ind->rejoin );
   \                     ??ZDO_LeaveInd_1:
   \   00001C                ; Setup parameters for call to function ZDApp_LeaveReset
   \   00001C   EE           MOV     A,R6
   \   00001D   240C         ADD     A,#0xc
   \   00001F   12....       LCALL   ?Subroutine17 & 0xFFFF
   2222            }
   \                     ??CrossCallReturnLabel_18:
   \   000022   8029         SJMP    ??ZDO_LeaveInd_2
   2223            else
   2224            {
   2225              leave = FALSE;
   2226          
   2227              // Check if this device needs to leave as a child or descendent
   2228              if ( ind->srcAddr == NLME_GetCoordShortAddr() )
   \                     ??ZDO_LeaveInd_0:
   \   000024                ; Setup parameters for call to function NLME_GetCoordShortAddr
   \   000024   12....       LCALL   ??NLME_GetCoordShortAddr?relay
   \   000027   8A..         MOV     ?V0 + 0,R2
   \   000029   8B..         MOV     ?V0 + 1,R3
   \   00002B   A8..         MOV     R0,?V0 + 0
   \   00002D   A9..         MOV     R1,?V0 + 1
   \   00002F   8E82         MOV     DPL,R6
   \   000031   8F83         MOV     DPH,R7
   \   000033   E0           MOVX    A,@DPTR
   \   000034   68           XRL     A,R0
   \   000035   7003         JNZ     ??ZDO_LeaveInd_3
   \   000037   A3           INC     DPTR
   \   000038   E0           MOVX    A,@DPTR
   \   000039   69           XRL     A,R1
   \                     ??ZDO_LeaveInd_3:
   \   00003A   7011         JNZ     ??ZDO_LeaveInd_2
   2229              {
   2230                if ( ( ind->removeChildren == TRUE               ) ||
   2231                     ( ZDO_Config_Node_Descriptor.LogicalType ==
   2232                       NODETYPE_DEVICE                           )    )
   \   00003C   12....       LCALL   ?Subroutine18 & 0xFFFF
   2233                {
   2234                  leave = TRUE;
   2235                }
   2236              }
   2237              else if ( ind->removeChildren == TRUE )
   2238              {
   2239                // Check NWK address allocation algorithm
   2240                //leave = RTG_ANCESTOR(nwkAddr,thisAddr);
   2241              }
   2242          
   2243              if ( leave == TRUE )
   2244              {
   2245                // Prepare to leave with reset
   2246                ZDApp_LeaveReset( ind->rejoin );
   2247              }
   2248              else
   2249              {
   2250                // Remove device address(optionally descendents) from data
   2251                ZDApp_LeaveUpdate( ind->srcAddr,
   2252                                   ind->extAddr,
   2253                                   ind->removeChildren );
   2254              }
   2255            }
   \                     ??CrossCallReturnLabel_45:
   \   00003F   6401         XRL     A,#0x1
   \   000041   60D9         JZ      ??ZDO_LeaveInd_1
   \   000043   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000046   E0           MOVX    A,@DPTR
   \   000047   5407         ANL     A,#0x7
   \   000049   6402         XRL     A,#0x2
   \   00004B   60CF         JZ      ??ZDO_LeaveInd_1
   2256          }
   \                     ??ZDO_LeaveInd_2:
   \   00004D   02....       LJMP    ??Subroutine27_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   EE           MOV     A,R6
   \   000001   240B         ADD     A,#0xb
   \   000003                REQUIRE ??Subroutine29_0
   \   000003                ; // Fall through to label ??Subroutine29_0
   2257          
   2258          /*********************************************************************
   2259           * @fn          ZDO_SyncIndicationCB
   2260           *
   2261           * @brief       This function allows the next higher layer of a
   2262           *              coordinator to be notified of a loss of synchronization
   2263           *                          with the parent/child device.
   2264           *
   2265           * @param       type: 0 - child; 1 - parent
   2266           *
   2267           *
   2268           * @return      none
   2269           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2270          void ZDO_SyncIndicationCB( uint8 type, uint16 shortAddr )
   \                     ZDO_SyncIndicationCB:
   2271          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   2272            (void)shortAddr;  // Remove this line if this parameter is used.
   2273            
   2274            if ( ZSTACK_END_DEVICE_BUILD
   2275              || (ZSTACK_ROUTER_BUILD && ((_NIB.CapabilityInfo & ZMAC_ASSOC_CAPINFO_FFD_TYPE) == 0)))
   2276            {
   2277              if ( type == 1 )
   \   000007   7401         MOV     A,#0x1
   \   000009   6E           XRL     A,R6
   \   00000A   700E         JNZ     ??CrossCallReturnLabel_8
   2278              {
   2279                // We lost contact with our parent.  Clear the neighbor Table.
   2280                nwkNeighborInitTable();
   \   00000C                ; Setup parameters for call to function nwkNeighborInitTable
   \   00000C   12....       LCALL   ??nwkNeighborInitTable?relay
   2281                
   2282                // Start the rejoin process.
   2283                ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_REQ, sizeof(osal_event_hdr_t), NULL );
   \   00000F                ; Setup parameters for call to function ZDApp_SendMsg
   \   00000F   7C00         MOV     R4,#0x0
   \   000011   7D00         MOV     R5,#0x0
   \   000013   7B02         MOV     R3,#0x2
   \   000015   7A03         MOV     R2,#0x3
   \   000017   12....       LCALL   ?Subroutine13 & 0xFFFF
   2284              }
   2285            }
   2286          }
   \                     ??CrossCallReturnLabel_8:
   \   00001A   02....       LJMP    ??Subroutine28_0 & 0xFFFF
   2287          
   2288          /*********************************************************************
   2289           * @fn          ZDO_ManytoOneFailureIndicationCB
   2290           *
   2291           * @brief       This function allows the next higher layer of a
   2292           *              concentrator to be notified of a many-to-one route 
   2293           *              failure. 
   2294           *
   2295           * @param       none
   2296           *
   2297           *
   2298           * @return      none
   2299           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2300          void ZDO_ManytoOneFailureIndicationCB()
   \                     ZDO_ManytoOneFailureIndicationCB:
   2301          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2302            // By default, the concentrator automatically redo many-to-one route 
   2303            // discovery to update all many-to-one routes in the network
   2304            // If you want anything processing other than the default,
   2305            // please replace the following code.
   2306            
   2307            RTG_MTORouteReq();
   \   000004                ; Setup parameters for call to function RTG_MTORouteReq
   \   000004   12....       LCALL   ??RTG_MTORouteReq?relay
   2308          }
   \   000007   02....       LJMP    ?Subroutine2 & 0xFFFF
   2309          
   2310          
   2311          /*********************************************************************
   2312           * @fn          ZDO_PollConfirmCB
   2313           *
   2314           * @brief       This function allows the next higher layer to be
   2315           *              notified of a Poll Confirm.
   2316           *
   2317           * @param       none
   2318           *
   2319           * @return      none
   2320           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2321          void ZDO_PollConfirmCB( uint8 status )
   \                     ZDO_PollConfirmCB:
   2322          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2323            (void)status;  // Remove this line if this parameter is used.
   2324            return;
   \   000000   02....       LJMP    ?BRET
   2325          }
   2326          
   2327          /******************************************************************************
   2328           * @fn          ZDApp_NwkWriteNVRequest (stubs AddrMgrWriteNVRequest)
   2329           *
   2330           * @brief       Stub routine implemented by NHLE. NHLE should call
   2331           *              <AddrMgrWriteNV> when appropriate.
   2332           *
   2333           * @param       none
   2334           *
   2335           * @return      none
   2336           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2337          void ZDApp_NwkWriteNVRequest( void )
   \                     AddrMgrWriteNVRequest:
   2338          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2339          #if defined ( NV_RESTORE )  
   2340            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
   2341            {
   2342              // Trigger to save info into NV
   2343              ZDApp_NVUpdate();
   2344            }
   2345          #endif
   2346          }
   \   000000   02....       LJMP    ?BRET
   2347          
   2348          /*********************************************************************
   2349           * Call Back Functions from Security  - API
   2350           */
   2351          
   2352           /*********************************************************************
   2353           * @fn          ZDO_UpdateDeviceIndication
   2354           *
   2355           * @brief       This function notifies the "Trust Center" of a
   2356           *              network when a device joins or leaves the network.
   2357           *
   2358           * @param       extAddr - pointer to 64 bit address of new device
   2359           * @param       status  - 0 if a new device joined securely
   2360           *                      - 1 if a new device joined un-securely
   2361           *                      - 2 if a device left the network
   2362           *
   2363           * @return      true if newly joined device should be allowed to
   2364           *                                              remain on network
   2365           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2366          ZStatus_t ZDO_UpdateDeviceIndication( uint8 *extAddr, uint8 status )
   \                     ZDO_UpdateDeviceIndication:
   2367          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2368            // can implement a network access policy based on the
   2369            // IEEE address of newly joining devices...
   2370            (void)extAddr;
   2371            (void)status;
   2372            
   2373            return ZSuccess;
   \   000000   02....       LJMP    ?Subroutine3 & 0xFFFF
   2374          }
   2375          
   2376          /*********************************************************************
   2377           * @fn          ZDApp_InMsgCB
   2378           *
   2379           * @brief       This function is called to pass up any message that is
   2380           *              not yet supported.  This allows for the developer to
   2381           *              support features themselves..
   2382           *
   2383           * @return      none
   2384           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2385          void ZDApp_InMsgCB( zdoIncomingMsg_t *inMsg )
   \                     ZDApp_InMsgCB:
   2386          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   2387            if ( inMsg->clusterID & ZDO_RESPONSE_BIT )
   \   000009   EE           MOV     A,R6
   \   00000A   240C         ADD     A,#0xc
   \   00000C   F582         MOV     DPL,A
   \   00000E   EF           MOV     A,R7
   \   00000F   3400         ADDC    A,#0x0
   \   000011   F583         MOV     DPH,A
   \   000013   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000016   5480         ANL     A,#0x80
   \   000018   7045         JNZ     ??ZDApp_InMsgCB_0
   2388            {
   2389              // Handle the response message
   2390            }
   2391            else
   2392            {
   2393              // Handle the request message by sending a generic "not supported".
   2394              // Device Announce doesn't have a response.
   2395              if ( !(inMsg->wasBroadcast) && inMsg->clusterID != Device_annce )
   \   00001A   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   00001D   7040         JNZ     ??ZDApp_InMsgCB_0
   \   00001F   7413         MOV     A,#0x13
   \   000021   68           XRL     A,R0
   \   000022   7001         JNZ     ??ZDApp_InMsgCB_1
   \   000024   E9           MOV     A,R1
   \                     ??ZDApp_InMsgCB_1:
   \   000025   6038         JZ      ??ZDApp_InMsgCB_0
   2396              {
   2397                ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_NOT_SUPPORTED, 0,
   2398                                (uint16)(inMsg->clusterID | ZDO_RESPONSE_BIT), inMsg->SecurityUse );
   \   000027                ; Setup parameters for call to function ZDP_GenericRsp
   \   000027   E8           MOV     A,R0
   \   000028   F5..         MOV     ?V0 + 0,A
   \   00002A   E9           MOV     A,R1
   \   00002B   4480         ORL     A,#0x80
   \   00002D   F5..         MOV     ?V0 + 1,A
   \   00002F   78..         MOV     R0,#?V0 + 0
   \   000031   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000034   E4           CLR     A
   \   000035   F5..         MOV     ?V0 + 0,A
   \   000037   F5..         MOV     ?V0 + 1,A
   \   000039   78..         MOV     R0,#?V0 + 0
   \   00003B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003E   EE           MOV     A,R6
   \   00003F   240E         ADD     A,#0xe
   \   000041   12....       LCALL   ??Subroutine29_0 & 0xFFFF
   2399              }
   2400            }
   \                     ??CrossCallReturnLabel_43:
   \   000044   FD           MOV     R5,A
   \   000045   7C84         MOV     R4,#-0x7c
   \   000047   EE           MOV     A,R6
   \   000048   2402         ADD     A,#0x2
   \   00004A   0A           INC     R2
   \   00004B   0A           INC     R2
   \   00004C   EF           MOV     A,R7
   \   00004D   3400         ADDC    A,#0x0
   \   00004F   FB           MOV     R3,A
   \   000050   EE           MOV     A,R6
   \   000051   240F         ADD     A,#0xf
   \   000053   12....       LCALL   ??Subroutine29_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000056   F9           MOV     R1,A
   \   000057   12....       LCALL   ??ZDP_GenericRsp?relay
   \   00005A   7404         MOV     A,#0x4
   \   00005C   12....       LCALL   ?DEALLOC_XSTACK8
   2401          }
   \                     ??ZDApp_InMsgCB_0:
   \   00005F   02....       LJMP    ??Subroutine27_0 & 0xFFFF
   2402          
   2403          
   2404          /*********************************************************************
   2405           * @fn      ZDApp_ChangeMatchDescRespPermission()
   2406           *
   2407           * @brief   Changes the Match Descriptor Response permission.
   2408           *
   2409           * @param   endpoint - endpoint to allow responses
   2410           * @param   action - true to allow responses, false to not
   2411           *
   2412           * @return  none
   2413           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2414          void ZDApp_ChangeMatchDescRespPermission( uint8 endpoint, uint8 action )
   \                     ZDApp_ChangeMatchDescRespPermission:
   2415          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   2416            // Store the action
   2417            afSetMatch( endpoint, action );
   \   000005                ; Setup parameters for call to function afSetMatch
   \   000005   12....       LCALL   ??afSetMatch?relay
   2418          }
   \   000008   02....       LJMP    ??Subroutine28_0 & 0xFFFF
   2419          
   2420          /*********************************************************************
   2421           * @fn      ZDApp_NetworkInit()
   2422           *
   2423           * @brief   Used to start the network joining process
   2424           *
   2425           * @param   delay - mSec delay to wait before starting
   2426           *
   2427           * @return  none
   2428           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2429          void ZDApp_NetworkInit( uint16 delay )
   \                     ZDApp_NetworkInit:
   2430          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2431            if ( delay )
   \   000004   EA           MOV     A,R2
   \   000005   4B           ORL     A,R3
   \   000006   6012         JZ      ??ZDApp_NetworkInit_0
   2432            {
   2433              // Wait awhile before starting the device
   2434              osal_start_timerEx( ZDAppTaskID, ZDO_NETWORK_INIT, delay );
   \   000008                ; Setup parameters for call to function osal_start_timerEx
   \   000008   EA           MOV     A,R2
   \   000009   FC           MOV     R4,A
   \   00000A   EB           MOV     A,R3
   \   00000B   FD           MOV     R5,A
   \   00000C   7A01         MOV     R2,#0x1
   \   00000E   7B00         MOV     R3,#0x0
   \   000010   90....       MOV     DPTR,#ZDAppTaskID
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F9           MOV     R1,A
   \   000015   12....       LCALL   ??osal_start_timerEx?relay
   \   000018   8005         SJMP    ??CrossCallReturnLabel_32
   2435            }
   2436            else
   2437            {
   2438              osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
   \                     ??ZDApp_NetworkInit_0:
   \   00001A                ; Setup parameters for call to function osal_set_event
   \   00001A   7A01         MOV     R2,#0x1
   \   00001C   12....       LCALL   ??Subroutine23_0 & 0xFFFF
   2439            }
   2440          }
   \                     ??CrossCallReturnLabel_32:
   \   00001F   02....       LJMP    ?Subroutine2 & 0xFFFF
   2441          
   2442          /*********************************************************************
   2443           * @fn      ZDApp_NwkStateUpdateCB()
   2444           *
   2445           * @brief   This function notifies that this device's network 
   2446           *          state info has been changed.
   2447           *
   2448           * @param   none
   2449           *
   2450           * @return  none
   2451           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2452          void ZDApp_NwkStateUpdateCB( void )
   \                     ZDApp_NwkStateUpdateCB:
   2453          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2454            // Notify to save info into NV
   2455            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
   \   000004                ; Setup parameters for call to function osal_get_timeoutEx
   \   000004   7A00         MOV     R2,#0x0
   \   000006   7B02         MOV     R3,#0x2
   \   000008   90....       MOV     DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   ??osal_get_timeoutEx?relay
   2456            {
   2457              // Trigger to save info into NV
   2458              ZDApp_NVUpdate();
   2459            }
   2460          }
   \   000010   02....       LJMP    ?Subroutine2 & 0xFFFF
   2461          
   2462          /*********************************************************************
   2463           * @fn      ZDApp_NodeProfileSync()
   2464           *
   2465           * @brief   Sync node with stack profile.
   2466           *
   2467           * @param   cfm - ZDO_NetworkDiscoveryCfm_t
   2468           *
   2469           * @return  none
   2470           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2471          void ZDApp_NodeProfileSync( ZDO_NetworkDiscoveryCfm_t* cfm )
   \                     ZDApp_NodeProfileSync:
   2472          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2473            networkDesc_t* desc;
   2474            uint16         panID;
   2475          
   2476            if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_DEVICETYPE_FFD  )
   \   000005   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000008   E0           MOVX    A,@DPTR
   \   000009   A2E1         MOV     C,0xE0 /* A   */.1
   \   00000B   5056         JNC     ??ZDApp_NodeProfileSync_0
   2477            {
   2478              panID = BUILD_UINT16( cfm->panIdLSB, cfm->panIdMSB );
   2479          
   2480              desc = nwk_getNetworkDesc( cfm->extendedPANID, panID, cfm->logicalChannel );
   \   00000D                ; Setup parameters for call to function nwk_getNetworkDesc
   \   00000D   8A82         MOV     DPL,R2
   \   00000F   8B83         MOV     DPH,R3
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F9           MOV     R1,A
   \   000017   8A82         MOV     DPL,R2
   \   000019   8B83         MOV     DPH,R3
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   FE           MOV     R6,A
   \   00001F   8A82         MOV     DPL,R2
   \   000021   8B83         MOV     DPH,R3
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   FD           MOV     R5,A
   \   000028   EE           MOV     A,R6
   \   000029   FC           MOV     R4,A
   \   00002A   EA           MOV     A,R2
   \   00002B   2406         ADD     A,#0x6
   \   00002D   FA           MOV     R2,A
   \   00002E   EB           MOV     A,R3
   \   00002F   3400         ADDC    A,#0x0
   \   000031   FB           MOV     R3,A
   \   000032   12....       LCALL   ??nwk_getNetworkDesc?relay
   \   000035   8A82         MOV     DPL,R2
   \   000037   8B83         MOV     DPH,R3
   2481          
   2482              if (desc != NULL)
   \   000039   E582         MOV     A,DPL
   \   00003B   4583         ORL     A,DPH
   \   00003D   6024         JZ      ??ZDApp_NodeProfileSync_0
   2483              {
   2484                if ( desc->stackProfile != zgStackProfile )
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   F8           MOV     R0,A
   \   000049   90....       MOV     DPTR,#zgStackProfile
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   68           XRL     A,R0
   \   00004E   6013         JZ      ??ZDApp_NodeProfileSync_0
   2485                {
   2486                  ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
   \   000050   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000053   E0           MOVX    A,@DPTR
   \   000054   54F8         ANL     A,#0xf8
   \   000056   4402         ORL     A,#0x2
   \   000058   F0           MOVX    @DPTR,A
   2487                  ZDO_Config_Node_Descriptor.CapabilityFlags = CAPINFO_DEVICETYPE_RFD | CAPINFO_POWER_AC | CAPINFO_RCVR_ON_IDLE;
   \   000059   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00005C   740C         MOV     A,#0xc
   \   00005E   F0           MOVX    @DPTR,A
   2488                  NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
   \   00005F                ; Setup parameters for call to function NLME_SetBroadcastFilter
   \   00005F   F9           MOV     R1,A
   \   000060   12....       LCALL   ??NLME_SetBroadcastFilter?relay
   2489                }
   2490              }
   2491            }
   2492          }
   \                     ??ZDApp_NodeProfileSync_0:
   \   000063   02....       LJMP    ??Subroutine27_0 & 0xFFFF
   2493          
   2494          /*********************************************************************
   2495           * @fn      ZDApp_StartJoiningCycle()
   2496           *
   2497           * @brief   Starts the joining cycle of a device.  This will only 
   2498           *          continue an already started (or stopped) joining cycle.
   2499           *
   2500           * @param   none
   2501           *
   2502           * @return  TRUE if joining stopped, FALSE if joining or rejoining
   2503           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2504          uint8 ZDApp_StartJoiningCycle( void )
   \                     ZDApp_StartJoiningCycle:
   2505          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2506            if ( devState == DEV_INIT || devState == DEV_NWK_DISC )
   \   000004   90....       MOV     DPTR,#devState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6401         XRL     A,#0x1
   \   00000A   6005         JZ      ??ZDApp_StartJoiningCycle_0
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6402         XRL     A,#0x2
   \   00000F   7011         JNZ     ??ZDApp_StartJoiningCycle_1
   2507            {
   2508              continueJoining = TRUE;
   \                     ??ZDApp_StartJoiningCycle_0:
   \   000011   90....       MOV     DPTR,#continueJoining
   \   000014   7401         MOV     A,#0x1
   \   000016   F0           MOVX    @DPTR,A
   2509              ZDApp_NetworkInit( 0 );
   \   000017                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000017   7A00         MOV     R2,#0x0
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   12....       LCALL   ??ZDApp_NetworkInit?relay
   2510          
   2511              return ( TRUE );
   \   00001E   7901         MOV     R1,#0x1
   \   000020   8002         SJMP    ??ZDApp_StartJoiningCycle_2
   2512            }
   2513            else
   2514              return ( FALSE );
   \                     ??ZDApp_StartJoiningCycle_1:
   \   000022   7900         MOV     R1,#0x0
   \                     ??ZDApp_StartJoiningCycle_2:
   \   000024   02....       LJMP    ?Subroutine2 & 0xFFFF
   2515          }
   2516          
   2517          /*********************************************************************
   2518           * @fn      ZDApp_StopJoiningCycle()
   2519           *
   2520           * @brief   Stops the joining or rejoining process of a device.
   2521           *
   2522           * @param   none
   2523           *
   2524           * @return  TRUE if joining stopped, FALSE if joining or rejoining
   2525           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2526          uint8 ZDApp_StopJoiningCycle( void )
   \                     ZDApp_StopJoiningCycle:
   2527          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2528            if ( devState == DEV_INIT || devState == DEV_NWK_DISC )
   \   000004   90....       MOV     DPTR,#devState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6401         XRL     A,#0x1
   \   00000A   6005         JZ      ??ZDApp_StopJoiningCycle_0
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6402         XRL     A,#0x2
   \   00000F   7009         JNZ     ??ZDApp_StopJoiningCycle_1
   2529            {
   2530              continueJoining = FALSE;
   \                     ??ZDApp_StopJoiningCycle_0:
   \   000011   90....       MOV     DPTR,#continueJoining
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
   2531              return ( TRUE );
   \   000016   7901         MOV     R1,#0x1
   \   000018   8002         SJMP    ??ZDApp_StopJoiningCycle_2
   2532            }
   2533            else
   2534              return ( FALSE );
   \                     ??ZDApp_StopJoiningCycle_1:
   \   00001A   7900         MOV     R1,#0x0
   \                     ??ZDApp_StopJoiningCycle_2:
   \   00001C   02....       LJMP    ?Subroutine2 & 0xFFFF
   2535          }
   2536          
   2537          /*********************************************************************
   2538           * @fn      ZDApp_AnnounceNewAddress()
   2539           *
   2540           * @brief   Send Device Announce and hold all transmissions for 
   2541           *          new address timeout.
   2542           *
   2543           * @param   none
   2544           *
   2545           * @return  none
   2546           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2547          void ZDApp_AnnounceNewAddress( void )
   \                     ZDApp_AnnounceNewAddress:
   2548          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2549          #if defined ( ZIGBEE_NWK_UNIQUE_ADDR_CHECK )
   2550            // Turn off data request hold
   2551            APSME_HoldDataRequests( 0 );
   \   000005                ; Setup parameters for call to function APSME_HoldDataRequests
   \   000005   7A00         MOV     R2,#0x0
   \   000007   7B00         MOV     R3,#0x0
   \   000009   12....       LCALL   ??APSME_HoldDataRequests?relay
   2552          #endif
   2553            
   2554            ZDP_DeviceAnnce( NLME_GetShortAddr(), NLME_GetExtAddr(),
   2555                               ZDO_Config_Node_Descriptor.CapabilityFlags, 0 );
   \   00000C                ; Setup parameters for call to function NLME_GetExtAddr
   \   00000C   12....       LCALL   ??NLME_GetExtAddr?relay
   \   00000F   8A..         MOV     ?V0 + 0,R2
   \   000011   8B..         MOV     ?V0 + 1,R3
   \   000013   AE..         MOV     R6,?V0 + 0
   \   000015                ; Setup parameters for call to function NLME_GetShortAddr
   \   000015   12....       LCALL   ??NLME_GetShortAddr?relay
   \   000018                ; Setup parameters for call to function ZDP_DeviceAnnce
   \   000018   75..00       MOV     ?V0 + 0,#0x0
   \   00001B   78..         MOV     R0,#?V0 + 0
   \   00001D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000020   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F9           MOV     R1,A
   \   000025   EE           MOV     A,R6
   \   000026   FC           MOV     R4,A
   \   000027   AD..         MOV     R5,?V0 + 1
   \   000029   12....       LCALL   ??ZDP_DeviceAnnce?relay
   \   00002C   7401         MOV     A,#0x1
   \   00002E   12....       LCALL   ?DEALLOC_XSTACK8
   2556            
   2557          #if defined ( ZIGBEE_NWK_UNIQUE_ADDR_CHECK )
   2558            // Setup the timeout
   2559            APSME_HoldDataRequests( ZDAPP_HOLD_DATA_REQUESTS_TIMEOUT );
   \   000031                ; Setup parameters for call to function APSME_HoldDataRequests
   \   000031   7A00         MOV     R2,#0x0
   \   000033   7B00         MOV     R3,#0x0
   \   000035   12....       LCALL   ??APSME_HoldDataRequests?relay
   2560          #endif  
   2561          }
   \   000038   02....       LJMP    ??Subroutine27_0 & 0xFFFF
   2562          
   2563          /*********************************************************************
   2564           * @fn          ZDApp_NVUpdate
   2565           *
   2566           * @brief       Set the NV Update Timer.
   2567           *
   2568           * @param       none
   2569           *
   2570           * @return      none
   2571           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2572          void ZDApp_NVUpdate( void )
   \                     ZDApp_NVUpdate:
   2573          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2574          #if defined ( NV_RESTORE )
   2575            osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, ZDAPP_UPDATE_NWK_NV_TIME );
   2576          #endif
   2577          }
   \   000000   02....       LJMP    ?BRET
   2578          
   2579          /*********************************************************************
   2580           * @fn      ZDApp_CoordStartPANIDConflictCB()
   2581           *
   2582           * @brief   Returns a PAN ID for the network layer to use during
   2583           *          a coordinator start and there is another network with 
   2584           *          the intended PANID.
   2585           *
   2586           * @param   panid - the intended PAN ID
   2587           *
   2588           * @return  PANID to try
   2589           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2590          uint16 ZDApp_CoordStartPANIDConflictCB( uint16 panid )
   \                     ZDApp_CoordStartPANIDConflictCB:
   2591          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2592            return ( panid + 1 );
   \   000000   EA           MOV     A,R2
   \   000001   2401         ADD     A,#0x1
   \   000003   0A           INC     R2
   \   000004   EB           MOV     A,R3
   \   000005   3400         ADDC    A,#0x0
   \   000007   FB           MOV     R3,A
   \   000008   02....       LJMP    ?BRET
   2593          }
   2594          
   2595          /*********************************************************************
   2596           * @fn          ZDO_SrcRtgIndCB
   2597           *
   2598           * @brief       This function notifies the ZDO available src route record received.
   2599           *
   2600           * @param       srcAddr - source address of the source route
   2601           * @param       relayCnt - number of devices in the relay list
   2602           * @param       relayList - relay list of the source route
   2603           *
   2604           * @return      none
   2605           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2606          void ZDO_SrcRtgIndCB (uint16 srcAddr, uint8 relayCnt, uint16* pRelayList )
   \                     ZDO_SrcRtgIndCB:
   2607          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   2608            zdoSrcRtg_t srcRtg;
   2609            
   2610            srcRtg.srcAddr = srcAddr;
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EA           MOV     A,R2
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   EB           MOV     A,R3
   \   000014   F0           MOVX    @DPTR,A
   2611            srcRtg.relayCnt = relayCnt;
   \   000015   7402         MOV     A,#0x2
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   E9           MOV     A,R1
   \   00001B   F0           MOVX    @DPTR,A
   2612            srcRtg.pRelayList = pRelayList;
   \   00001C   7403         MOV     A,#0x3
   \   00001E   12....       LCALL   ?XSTACK_DISP0_8
   \   000021   EC           MOV     A,R4
   \   000022   F0           MOVX    @DPTR,A
   \   000023   A3           INC     DPTR
   \   000024   ED           MOV     A,R5
   \   000025   F0           MOVX    @DPTR,A
   2613            
   2614            if( zdoCBFunc[ZDO_SRC_RTG_IND_CBID] != NULL )
   \   000026   90....       MOV     DPTR,#zdoCBFunc
   \   000029   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   00002C   E8           MOV     A,R0
   \   00002D   49           ORL     A,R1
   \   00002E   6015         JZ      ??ZDO_SrcRtgIndCB_0
   2615            {
   2616              zdoCBFunc[ZDO_SRC_RTG_IND_CBID]( (void*)&srcRtg );
   \   000030                ; Setup parameters for indirect call
   \   000030   85..82       MOV     DPL,?XSP + 0
   \   000033   85..83       MOV     DPH,?XSP + 1
   \   000036   AA82         MOV     R2,DPL
   \   000038   AB83         MOV     R3,DPH
   \   00003A   90....       MOV     DPTR,#zdoCBFunc + 1
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   F583         MOV     DPH,A
   \   000040   8882         MOV     DPL,R0
   \   000042   12....       LCALL   ?CALL_IND
   2617            }
   2618          }
   \                     ??ZDO_SrcRtgIndCB_0:
   \   000045   7405         MOV     A,#0x5
   \   000047   12....       LCALL   ?DEALLOC_XSTACK8
   \   00004A   02....       LJMP    ??Subroutine28_0 & 0xFFFF
   2619          
   2620          
   2621          /*********************************************************************
   2622           * @fn          ZDO_RegisterForZdoCB
   2623           *
   2624           * @brief       Call this function to register the higher layer (for 
   2625           *              example, the Application layer or MT layer) with ZDO 
   2626           *              callbacks to get notified of some ZDO indication like
   2627           *              existence of a concentrator or receipt of a source 
   2628           *              route record.
   2629           *
   2630           * @param       indID - ZDO Indication ID
   2631           * @param       pFn   - Callback function pointer
   2632           *
   2633           * @return      ZSuccess - successful, ZInvalidParameter if not
   2634           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2635          ZStatus_t ZDO_RegisterForZdoCB( uint8 indID, pfnZdoCb pFn )
   \                     ZDO_RegisterForZdoCB:
   2636          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   2637            // Check the range of the indication ID
   2638            if ( indID < MAX_ZDO_CB_FUNC )
   \   000005   700C         JNZ     ??ZDO_RegisterForZdoCB_0
   2639            {
   2640              zdoCBFunc[indID] = pFn;
   \   000007   90....       MOV     DPTR,#zdoCBFunc
   \   00000A   EA           MOV     A,R2
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   A3           INC     DPTR
   \   00000D   EB           MOV     A,R3
   \   00000E   F0           MOVX    @DPTR,A
   2641              return ZSuccess;
   \   00000F   7900         MOV     R1,#0x0
   \   000011   8002         SJMP    ??ZDO_RegisterForZdoCB_1
   2642            }
   2643            
   2644            return ZInvalidParameter;
   \                     ??ZDO_RegisterForZdoCB_0:
   \   000013   7902         MOV     R1,#0x2
   \                     ??ZDO_RegisterForZdoCB_1:
   \   000015   02....       LJMP    ?Subroutine2 & 0xFFFF
   2645          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zdoDiscCounter>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for continueJoining>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for devState>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDApp_epDesc>`:
   \   000000   00           DB 0
   \   000001   ....         DW ZDAppTaskID
   \   000003   0000         DW 0H
   \   000005   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDApp_SavedPollRate>`:
   \   000000   E803         DW 1000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1:
   \   000000   01000000     DD 1

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_SecInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SecInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_event_loop?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_event_loop

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ProcessSecEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessSecEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDOInitDevice?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDOInitDevice

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ReadNetworkRestoreState?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ReadNetworkRestoreState

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDAppDetermineDeviceType?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDAppDetermineDeviceType

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NetworkStartEvt?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NetworkStartEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_DeviceAuthEvt?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_DeviceAuthEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_SaveNetworkStateEvt?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SaveNetworkStateEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_RestoreNetworkState?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RestoreNetworkState

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_InitUserDesc?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InitUserDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDAppCheckForHoldKey?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDAppCheckForHoldKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ProcessOSALMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessOSALMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ProcessMsgCBs?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessMsgCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_RegisterCBs?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RegisterCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ProcessSecMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessSecMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ProcessNetworkJoin?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessNetworkJoin

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_SaveNwkKey?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SaveNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ResetNwkKey?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_RestoreNwkKey?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RestoreNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ResetTimerStart?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetTimerStart

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ResetTimerCancel?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetTimerCancel

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveCtrlInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveCtrlSet?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveCtrlBypass?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlBypass

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveCtrlStartup?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlStartup

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveReset?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveUpdate?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_SendEventMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SendEventMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_SendMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SendMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_NetworkDiscoveryConfirmCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_NetworkDiscoveryConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_NetworkFormationConfirmCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_NetworkFormationConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_StartRouterConfirmCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_StartRouterConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_JoinConfirmCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_JoinConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_AddrChangeIndicationCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_AddrChangeIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_JoinIndicationCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_JoinIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ConcentratorIndicationCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ConcentratorIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_LeaveCnf?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_LeaveCnf

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_LeaveInd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_LeaveInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_SyncIndicationCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SyncIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ManytoOneFailureIndicationCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ManytoOneFailureIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_PollConfirmCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_PollConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??AddrMgrWriteNVRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AddrMgrWriteNVRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_UpdateDeviceIndication?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_UpdateDeviceIndication

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_InMsgCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InMsgCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ChangeMatchDescRespPermission?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ChangeMatchDescRespPermission

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NetworkInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NetworkInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NwkStateUpdateCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NwkStateUpdateCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NodeProfileSync?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NodeProfileSync

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_StartJoiningCycle?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_StartJoiningCycle

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_StopJoiningCycle?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_StopJoiningCycle

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_AnnounceNewAddress?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_AnnounceNewAddress

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NVUpdate?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NVUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_CoordStartPANIDConflictCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_CoordStartPANIDConflictCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_SrcRtgIndCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SrcRtgIndCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_RegisterForZdoCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RegisterForZdoCB
   2646          
   2647          /*********************************************************************
   2648          *********************************************************************/

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     AddrMgrWriteNVRequest              0      0      0
     ZDAppCheckForHoldKey               2      0      9
       -> HalKeyRead                    4      0      0
     ZDAppDetermineDeviceType           2      0     12
       -> nwk_ExtPANIDValid             4      0      0
     ZDApp_AnnounceNewAddress           0      0     23
       -> APSME_HoldDataRequests        0      0     20
       -> NLME_GetExtAddr               0      0     20
       -> NLME_GetShortAddr             0      0     20
       -> ZDP_DeviceAnnce               0      0     22
       -> APSME_HoldDataRequests        0      0     20
     ZDApp_ChangeMatchDescRespPermission
                                        0      0      9
       -> afSetMatch                    0      0     18
     ZDApp_CoordStartPANIDConflictCB
                                        0      0      0
     ZDApp_DeviceAuthEvt                2      0      0
       -> ZDApp_ResetTimerCancel        4      0      0
       -> osal_set_event                4      0      0
       -> ZDApp_SaveNwkKey              4      0      0
       -> ZDApp_AnnounceNewAddress      4      0      0
       -> NLME_SetPollRate              4      0      0
     ZDApp_InMsgCB                      0      0     14
       -> ZDP_GenericRsp                0      0     28
     ZDApp_Init                         0      0      9
       -> NLME_GetExtAddr               0      0     18
       -> ZDAppCheckForHoldKey          0      0     18
       -> ZDO_Init                      0      0     18
       -> afRegister                    0      0     18
       -> ZDApp_InitUserDesc            0      0     18
       -> ZDOInitDevice                 0      0     18
       -> HalLedBlink                   0      0     18
       -> ZDApp_RegisterCBs             0      0     18
     ZDApp_InitUserDesc                 0      0     40
       -> osal_memset                   0      0     54
       -> osal_nv_item_init             0      0     58
       -> osal_nv_read                  0      0     62
     ZDApp_LeaveCtrlBypass              2      0      0
     ZDApp_LeaveCtrlInit                0      0     26
       -> osal_nv_item_init             0      0     24
       -> osal_nv_read                  0      0     28
     ZDApp_LeaveCtrlSet                 0      0     23
       -> osal_nv_write                 0      0     28
     ZDApp_LeaveCtrlStartup             0      0     26
       -> osal_nv_write                 0      0     28
     ZDApp_LeaveReset                   0      0     19
       -> ZDApp_LeaveCtrlSet            0      0     18
       -> ZDApp_ResetTimerStart         0      0     18
     ZDApp_LeaveUpdate                  0      0      0
     ZDApp_NVUpdate                     0      0      0
     ZDApp_NetworkInit                  2      0     16
       -> osal_start_timerEx            4      0      0
       -> osal_set_event                4      0      0
     ZDApp_NetworkStartEvt              2      0      0
       -> osal_pwrmgr_device            4      0      0
       -> osal_set_event                4      0      0
       -> NLME_GetEnergyThreshold       4      0      0
       -> NLME_GetEnergyThreshold       4      0      0
       -> NLME_SetEnergyThreshold       4      0      0
       -> osal_set_event                4      0      0
       -> osal_set_event                4      0      0
     ZDApp_NodeProfileSync              0      0     26
       -> nwk_getNetworkDesc            0      0     20
       -> NLME_SetBroadcastFilter       0      0     20
     ZDApp_NwkStateUpdateCB             2      0      0
       -> osal_get_timeoutEx            4      0      0
     ZDApp_ProcessMsgCBs                0      0     47
       -> ZDO_ParseAddrRsp              0      0     62
       -> ZDO_UpdateAddrManager         0      0     62
       -> osal_mem_free                 0      0     62
       -> ZDO_ParseBindUnbindReq        0      0     62
       -> ZDO_ProcessBindUnbindReq      0      0     62
     ZDApp_ProcessNetworkJoin           0      0     28
       -> osal_set_event                0      0     24
       -> ZDApp_AnnounceNewAddress      0      0     24
       -> NLME_GetShortAddr             0      0     24
       -> ZMacSetReq                    0      0     24
       -> nwkNeighborInitTable          0      0     24
       -> NLME_NwkDiscTerm              0      0     24
       -> osal_rand                     0      0     24
       -> ZDApp_NetworkInit             0      0     24
       -> osal_set_event                0      0     24
       -> NLME_SetPollRate              0      0     24
       -> NLME_SetQueuedPollRate        0      0     24
       -> NLME_SetResponseRate          0      0     24
       -> ZDApp_AnnounceNewAddress      0      0     24
       -> nwkNeighborInitTable          0      0     24
       -> NLME_NwkDiscTerm              0      0     24
       -> osal_rand                     0      0     24
       -> ZDApp_NetworkInit             0      0     24
       -> ZDApp_AnnounceNewAddress      0      0     24
       -> osal_set_event                0      0     24
     ZDApp_ProcessOSALMsg               0      0     17
       -> ZDP_IncomingData              0      0     32
       -> ZDApp_ProcessMsgCBs           0      0     32
       -> ZDApp_NodeProfileSync         0      0     32
       -> NLME_JoinRequest              0      0     34
       -> osal_rand                     0      0     32
       -> ZDApp_NetworkInit             0      0     32
       -> osal_rand                     0      0     32
       -> ZMacSetReq                    0      0     32
       -> ZMacSetReq                    0      0     32
       -> ZMacSetReq                    0      0     32
       -> NLME_ReJoinRequest            0      0     32
       -> osal_rand                     0      0     32
       -> ZDApp_NetworkInit             0      0     32
       -> NLME_SetPollRate              0      0     32
       -> NLME_SetQueuedPollRate        0      0     32
       -> NLME_SetResponseRate          0      0     32
       -> osal_rand                     0      0     32
       -> ZDApp_NetworkInit             0      0     32
       -> ZDApp_ProcessNetworkJoin      0      0     32
       -> sAddrExtCpy                   0      0     32
       -> ZDApp_NetworkInit             0      0     32
     ZDApp_ProcessSecEvent              0      0      0
     ZDApp_ProcessSecMsg                2      0      0
       -> ZDSecMgrTransportKeyInd       4      0      0
       -> ZDSecMgrSwitchKeyInd          4      0      0
     ZDApp_ReadNetworkRestoreState      0      0      9
       -> zgReadStartupOptions          0      0     18
     ZDApp_RegisterCBs                  2      0      9
       -> ZDO_RegisterForZDOMsg         4      0      0
       -> ZDO_RegisterForZDOMsg         4      0      0
       -> ZDO_RegisterForZDOMsg         4      0      0
       -> ZDO_RegisterForZDOMsg         4      0      0
     ZDApp_ResetNwkKey                  0      0     35
       -> osal_memset                   0      0     62
       -> osal_nv_write                 0      0     70
     ZDApp_ResetTimerCancel             2      0      0
       -> osal_stop_timerEx             4      0      0
     ZDApp_ResetTimerStart              2      0      9
       -> osal_start_timerEx            4      0      0
     ZDApp_RestoreNetworkState          0      0      9
       -> NLME_InitNV                   0      0     18
       -> NLME_RestoreFromNV            0      0     18
       -> NLME_GetShortAddr             0      0     18
       -> sAddrExtCpy                   0      0     18
     ZDApp_RestoreNwkKey                0      0     37
       -> osal_nv_read                  0      0     74
     ZDApp_SaveNetworkStateEvt          0      0      0
     ZDApp_SaveNwkKey                   0      0     37
       -> SSP_ReadNwkActiveKey          0      0     66
       -> osal_nv_write                 0      0     74
     ZDApp_SecInit                      0      0      9
       -> ZDSecMgrInit                  0      0     18
     ZDApp_SendEventMsg                 0      0      9
       -> ZDApp_SendMsg                 0      0     18
     ZDApp_SendMsg                      1      0     54
       -> osal_msg_allocate             0      0     38
       -> osal_memcpy                   0      0     44
       -> osal_msg_send                 0      0     38
     ZDApp_StartJoiningCycle            2      0      0
       -> ZDApp_NetworkInit             4      0      0
     ZDApp_StopJoiningCycle             2      0      0
     ZDApp_event_loop                   0      0      0
     ZDOInitDevice                      0      0     21
       -> zgInitItems                   0      0     24
       -> ZDConfig_InitDescriptors      0      0     24
       -> ZDApp_LeaveCtrlInit           0      0     24
       -> ZDApp_LeaveCtrlStartup        0      0     24
       -> zgWriteStartupOptions         0      0     24
       -> osal_set_event                0      0     24
       -> ZDAppDetermineDeviceType      0      0     24
       -> osal_rand                     0      0     24
       -> ZDSecMgrInit                  0      0     24
       -> ZDApp_NetworkInit             0      0     24
       -> NLME_SetBroadcastFilter       0      0     24
     ZDO_AddrChangeIndicationCB         2      0      0
       -> osal_set_event                4      0      0
       -> ZDApp_AnnounceNewAddress      4      0      0
     ZDO_ConcentratorIndicationCB       0      0      0
     ZDO_JoinConfirmCB                  0      0      9
       -> HalLedSet                     0      0     18
       -> HalLedSet                     0      0     18
       -> HalLedSet                     0      0     18
       -> ZDApp_SendMsg                 0      0     18
     ZDO_JoinIndicationCB               0      0      1
     ZDO_LeaveCnf                       0      0      9
       -> NLME_GetExtAddr               0      0     18
       -> sAddrExtCmp                   0      0     18
       -> ZDApp_LeaveReset              0      0     18
     ZDO_LeaveInd                       0      0     10
       -> ZDApp_LeaveReset              0      0     20
       -> NLME_GetCoordShortAddr        0      0     20
     ZDO_ManytoOneFailureIndicationCB
                                        2      0      0
       -> RTG_MTORouteReq               4      0      0
     ZDO_NetworkDiscoveryConfirmCB      1      0     32
       -> nwk_ExtPANIDValid             0      0     64
       -> sAddrExtCmp                   0      0     64
       -> sAddrExtCpy                   0      0     64
       -> ZDApp_SendMsg                 0      0     64
     ZDO_NetworkFormationConfirmCB      0      0      9
       -> HalLedSet                     0      0     18
       -> HalLedSet                     0      0     18
       -> HalLedSet                     0      0     18
       -> osal_set_event                0      0     18
     ZDO_PollConfirmCB                  0      0      0
     ZDO_RegisterForZdoCB               2      0      0
     ZDO_SrcRtgIndCB                    1      0     14
     ZDO_StartRouterConfirmCB           0      0      9
       -> HalLedSet                     0      0     18
       -> HalLedSet                     0      0     18
       -> HalLedSet                     0      0     18
       -> osal_set_event                0      0     18
     ZDO_SyncIndicationCB               0      0      9
       -> nwkNeighborInitTable          0      0     18
       -> ZDApp_SendMsg                 0      0     18
     ZDO_UpdateDeviceIndication         0      0      0


   Segment part sizes:

     Function/Label                              Bytes
     --------------                              -----
     zdoDiscCounter                                 1
     ZDAppNwkAddr                                   9
     zdappMgmtNwkDiscRspTransSeq                    1
     zdappMgmtNwkDiscReqInProgress                  1
     zdappMgmtNwkDiscRspAddr                        9
     zdappMgmtNwkDiscStartIndex                     1
     zdappMgmtSavedNwkState                         1
     nwkFrameCounterChanges                         2
     continueJoining                                1
     _tmpRejoinState                                1
     ZDO_UseExtendedPANID                           8
     zdoCBFunc                                      2
     ZDAppTaskID                                    1
     nwkStatus                                      1
     ZDApp_AutoFindMode_epDesc                      2
     ZDApp_LeaveCtrl                                1
     devState                                       1
     devStartMode                                   1
     retryCnt                                       1
     ZDApp_epDesc                                   6
     ZDApp_SavedPollRate                            2
     ZDApp_Init                                    78
     ??Subroutine28_0                               5
     ZDApp_SecInit                                 11
     ZDApp_event_loop                               0
     ?Subroutine1                                   7
     ZDApp_ProcessSecEvent                          2
     ZDOInitDevice                                146
     ?Subroutine11                                  2
     ??Subroutine23_0                              11
     ?Subroutine4                                   2
     ??Subroutine26_0                               3
     ??Subroutine27_0                               5
     ZDApp_ReadNetworkRestoreState                 21
     ZDAppDetermineDeviceType                      74
     ?Subroutine2                                   7
     ZDApp_NetworkStartEvt                         79
     ZDApp_DeviceAuthEvt                           46
     ?Subroutine8                                  19
     ZDApp_SaveNetworkStateEvt                      3
     ZDApp_RestoreNetworkState                     69
     ?Subroutine9                                  13
     ?Subroutine15                                  6
     ZDApp_InitUserDesc                            93
     ?Subroutine20                                 32
     ZDAppCheckForHoldKey                          20
     ZDApp_ProcessOSALMsg                         454
     ?Subroutine19                                 22
     ?Subroutine16                                 15
     ZDApp_ProcessMsgCBs                          127
     ?Subroutine7                                   5
     ??Subroutine29_0                               9
     ZDApp_RegisterCBs                             31
     ?Subroutine12                                  2
     ??Subroutine24_0                               9
     ZDApp_ProcessSecMsg                           56
     ZDApp_ProcessNetworkJoin                     331
     ?Subroutine14                                 12
     ZDApp_SaveNwkKey                              82
     ?Subroutine5                                  10
     ?Subroutine21                                  6
     ??Subroutine25_0                               8
     ZDApp_ResetNwkKey                             38
     ZDApp_RestoreNwkKey                          110
     ZDApp_ResetTimerStart                         23
     ZDApp_ResetTimerCancel                        19
     ZDApp_LeaveCtrlInit                           64
     ?Subroutine10                                 14
     ZDApp_LeaveCtrlSet                            52
     ZDApp_LeaveCtrlBypass                         13
     ZDApp_LeaveCtrlStartup                        75
     ZDApp_LeaveReset                              17
     ZDApp_LeaveUpdate                              3
     ZDApp_SendEventMsg                            11
     ?Subroutine6                                   5
     ?Subroutine13                                  9
     ZDApp_SendMsg                                 99
     ZDO_NetworkDiscoveryConfirmCB                364
     ?Subroutine0                                   3
     ZDO_NetworkFormationConfirmCB                 34
     ?Subroutine22                                 19
     ZDO_StartRouterConfirmCB                      34
     ZDO_JoinConfirmCB                             40
     ZDO_AddrChangeIndicationCB                    13
     ZDO_JoinIndicationCB                           0
     ?Subroutine3                                   5
     ZDO_ConcentratorIndicationCB                   3
     ZDO_LeaveCnf                                  41
     ?Subroutine17                                 13
     ZDO_LeaveInd                                  80
     ?Subroutine18                                  3
     ZDO_SyncIndicationCB                          29
     ZDO_ManytoOneFailureIndicationCB
                                                   10
     ZDO_PollConfirmCB                              3
     AddrMgrWriteNVRequest                          3
     ZDO_UpdateDeviceIndication                     3
     ZDApp_InMsgCB                                 98
     ZDApp_ChangeMatchDescRespPermission
                                                   11
     ZDApp_NetworkInit                             34
     ZDApp_NwkStateUpdateCB                        19
     ZDApp_NodeProfileSync                        102
     ZDApp_StartJoiningCycle                       39
     ZDApp_StopJoiningCycle                        31
     ZDApp_AnnounceNewAddress                      59
     ZDApp_NVUpdate                                 3
     ZDApp_CoordStartPANIDConflictCB
                                                   11
     ZDO_SrcRtgIndCB                               77
     ZDO_RegisterForZdoCB                          24
     ?<Initializer for zdoDiscCounter>              1
     ?<Initializer for continueJoining>             1
     ?<Initializer for devState>                    1
     ?<Initializer for ZDApp_epDesc>                6
     ?<Initializer for ZDApp_SavedPollRate>         2
     __Constant_1                                   4
     __Constant_3e8                                 4
     ??ZDApp_Init?relay                             6
     ??ZDApp_SecInit?relay                          6
     ??ZDApp_event_loop?relay                       6
     ??ZDApp_ProcessSecEvent?relay                  6
     ??ZDOInitDevice?relay                          6
     ??ZDApp_ReadNetworkRestoreState?relay          6
     ??ZDAppDetermineDeviceType?relay               6
     ??ZDApp_NetworkStartEvt?relay                  6
     ??ZDApp_DeviceAuthEvt?relay                    6
     ??ZDApp_SaveNetworkStateEvt?relay              6
     ??ZDApp_RestoreNetworkState?relay              6
     ??ZDApp_InitUserDesc?relay                     6
     ??ZDAppCheckForHoldKey?relay                   6
     ??ZDApp_ProcessOSALMsg?relay                   6
     ??ZDApp_ProcessMsgCBs?relay                    6
     ??ZDApp_RegisterCBs?relay                      6
     ??ZDApp_ProcessSecMsg?relay                    6
     ??ZDApp_ProcessNetworkJoin?relay               6
     ??ZDApp_SaveNwkKey?relay                       6
     ??ZDApp_ResetNwkKey?relay                      6
     ??ZDApp_RestoreNwkKey?relay                    6
     ??ZDApp_ResetTimerStart?relay                  6
     ??ZDApp_ResetTimerCancel?relay                 6
     ??ZDApp_LeaveCtrlInit?relay                    6
     ??ZDApp_LeaveCtrlSet?relay                     6
     ??ZDApp_LeaveCtrlBypass?relay                  6
     ??ZDApp_LeaveCtrlStartup?relay                 6
     ??ZDApp_LeaveReset?relay                       6
     ??ZDApp_LeaveUpdate?relay                      6
     ??ZDApp_SendEventMsg?relay                     6
     ??ZDApp_SendMsg?relay                          6
     ??ZDO_NetworkDiscoveryConfirmCB?relay          6
     ??ZDO_NetworkFormationConfirmCB?relay          6
     ??ZDO_StartRouterConfirmCB?relay               6
     ??ZDO_JoinConfirmCB?relay                      6
     ??ZDO_AddrChangeIndicationCB?relay             6
     ??ZDO_JoinIndicationCB?relay                   6
     ??ZDO_ConcentratorIndicationCB?relay           6
     ??ZDO_LeaveCnf?relay                           6
     ??ZDO_LeaveInd?relay                           6
     ??ZDO_SyncIndicationCB?relay                   6
     ??ZDO_ManytoOneFailureIndicationCB?relay       6
     ??ZDO_PollConfirmCB?relay                      6
     ??AddrMgrWriteNVRequest?relay                  6
     ??ZDO_UpdateDeviceIndication?relay             6
     ??ZDApp_InMsgCB?relay                          6
     ??ZDApp_ChangeMatchDescRespPermission?relay    6
     ??ZDApp_NetworkInit?relay                      6
     ??ZDApp_NwkStateUpdateCB?relay                 6
     ??ZDApp_NodeProfileSync?relay                  6
     ??ZDApp_StartJoiningCycle?relay                6
     ??ZDApp_StopJoiningCycle?relay                 6
     ??ZDApp_AnnounceNewAddress?relay               6
     ??ZDApp_NVUpdate?relay                         6
     ??ZDApp_CoordStartPANIDConflictCB?relay        6
     ??ZDO_SrcRtgIndCB?relay                        6
     ??ZDO_RegisterForZdoCB?relay                   6

 
 3 693 bytes in segment BANKED_CODE
   342 bytes in segment BANK_RELAYS
    11 bytes in segment XDATA_I
    11 bytes in segment XDATA_ID
     8 bytes in segment XDATA_ROM_C
    42 bytes in segment XDATA_Z
 
 4 046 bytes of CODE  memory
     0 bytes of CONST memory (+ 8 bytes shared)
    53 bytes of XDATA memory

Errors: none
Warnings: none
