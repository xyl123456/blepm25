###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         01/Sep/2017  16:24:10 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  E:\PM2.5\Projects\zstack\ZMain\TI2530DB\OnBoard.c  #
#    Command line       =  -f E:\PM2.5\Projects\zstack\Samples\GenericApp\CC2 #
#                          530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg         #
#                          (-DCPU32MHZ -DROOT=__near_func -DBLINK_LEDS) -f    #
#                          E:\PM2.5\Projects\zstack\Samples\GenericApp\CC2530 #
#                          DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg           #
#                          (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          E:\PM2.5\Projects\zstack\ZMain\TI2530DB\OnBoard.c  #
#                          -D ZIGBEEPRO -D NWK_AUTO_POLL -D ZTOOL_P1 -D       #
#                          xMT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D          #
#                          xPOWER_SAVING -lC E:\PM2.5\Projects\zstack\Samples #
#                          \GenericApp\CC2530DB\EndDeviceEB-Pro\List\ -lA     #
#                          E:\PM2.5\Projects\zstack\Samples\GenericApp\CC2530 #
#                          DB\EndDeviceEB-Pro\List\ --diag_suppress           #
#                          Pe001,Pa010 -o E:\PM2.5\Projects\zstack\Samples\Ge #
#                          nericApp\CC2530DB\EndDeviceEB-Pro\Obj\ -e --debug  #
#                          --core=plain --dptr=16,1 --data_model=large        #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I E:\PM2.5\Projects\zstack\S #
#                          amples\GenericApp\CC2530DB\ -I                     #
#                          E:\PM2.5\Projects\zstack\Samples\GenericApp\CC2530 #
#                          DB\..\SOURCE\ -I E:\PM2.5\Projects\zstack\Samples\ #
#                          GenericApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\ -I    #
#                          E:\PM2.5\Projects\zstack\Samples\GenericApp\CC2530 #
#                          DB\..\..\..\..\..\COMPONENTS\MT\ -I                #
#                          E:\PM2.5\Projects\zstack\Samples\GenericApp\CC2530 #
#                          DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I       #
#                          E:\PM2.5\Projects\zstack\Samples\GenericApp\CC2530 #
#                          DB\..\..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\  #
#                          -I E:\PM2.5\Projects\zstack\Samples\GenericApp\CC2 #
#                          530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\    #
#                          -I E:\PM2.5\Projects\zstack\Samples\GenericApp\CC2 #
#                          530DB\..\..\..\..\..\COMPONENTS\OSAL\INCLUDE\ -I   #
#                          E:\PM2.5\Projects\zstack\Samples\GenericApp\CC2530 #
#                          DB\..\..\..\..\..\COMPONENTS\STACK\AF\ -I          #
#                          E:\PM2.5\Projects\zstack\Samples\GenericApp\CC2530 #
#                          DB\..\..\..\..\..\COMPONENTS\STACK\NWK\ -I         #
#                          E:\PM2.5\Projects\zstack\Samples\GenericApp\CC2530 #
#                          DB\..\..\..\..\..\COMPONENTS\STACK\SEC\ -I         #
#                          E:\PM2.5\Projects\zstack\Samples\GenericApp\CC2530 #
#                          DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\ -I        #
#                          E:\PM2.5\Projects\zstack\Samples\GenericApp\CC2530 #
#                          DB\..\..\..\..\..\COMPONENTS\STACK\SYS\ -I         #
#                          E:\PM2.5\Projects\zstack\Samples\GenericApp\CC2530 #
#                          DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\ -I         #
#                          E:\PM2.5\Projects\zstack\Samples\GenericApp\CC2530 #
#                          DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\ -I          #
#                          E:\PM2.5\Projects\zstack\Samples\GenericApp\CC2530 #
#                          DB\..\..\..\..\..\COMPONENTS\ZMAC\ -I              #
#                          E:\PM2.5\Projects\zstack\Samples\GenericApp\CC2530 #
#                          DB\..\..\..\..\..\COMPONENTS\SERVICES\SADDR\ -I    #
#                          E:\PM2.5\Projects\zstack\Samples\GenericApp\CC2530 #
#                          DB\..\..\..\..\..\COMPONENTS\SERVICES\SDATA\ -I    #
#                          E:\PM2.5\Projects\zstack\Samples\GenericApp\CC2530 #
#                          DB\..\..\..\..\..\COMPONENTS\MAC\INCLUDE\ -I       #
#                          E:\PM2.5\Projects\zstack\Samples\GenericApp\CC2530 #
#                          DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I    #
#                          E:\PM2.5\Projects\zstack\Samples\GenericApp\CC2530 #
#                          DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\  #
#                          -I E:\PM2.5\Projects\zstack\Samples\GenericApp\CC2 #
#                          530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf0 #
#                          4\SINGLE_CHIP\ -Ohz                                #
#    List file          =  E:\PM2.5\Projects\zstack\Samples\GenericApp\CC2530 #
#                          DB\EndDeviceEB-Pro\List\OnBoard.lst                #
#    Object file        =  E:\PM2.5\Projects\zstack\Samples\GenericApp\CC2530 #
#                          DB\EndDeviceEB-Pro\Obj\OnBoard.r51                 #
#                                                                             #
#                                                                             #
###############################################################################

E:\PM2.5\Projects\zstack\ZMain\TI2530DB\OnBoard.c
      1          /**************************************************************************************************
      2            Filename:       OnBoard.c
      3            Revised:        $Date: 2009-12-16 17:44:49 -0800 (Wed, 16 Dec 2009) $
      4            Revision:       $Revision: 21351 $
      5          
      6            Description:    This file contains the UI and control for the
      7                            peripherals on the EVAL development board
      8            Notes:          This file targets the Chipcon CC2530
      9          
     10          
     11            Copyright 2005-2009 Texas Instruments Incorporated. All rights reserved.
     12          
     13            IMPORTANT: Your use of this Software is limited to those specific rights
     14            granted under the terms of a software license agreement between the user
     15            who downloaded the software, his/her employer (which must be your employer)
     16            and Texas Instruments Incorporated (the "License").  You may not use this
     17            Software unless you agree to abide by the terms of the License. The License
     18            limits your use, and you acknowledge, that the Software may not be modified,
     19            copied or distributed unless embedded on a Texas Instruments microcontroller
     20            or used solely and exclusively in conjunction with a Texas Instruments radio
     21            frequency transceiver, which is integrated into your product.  Other than for
     22            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     23            works of, modify, distribute, perform, display or sell this Software and/or
     24            its documentation for any purpose.
     25          
     26            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     27            PROVIDED “AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     28            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     29            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     30            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     31            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     32            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     33            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     34            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     35            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     36            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     37          
     38            Should you have any questions regarding your right to use this Software,
     39            contact Texas Instruments Incorporated at www.TI.com.
     40          **************************************************************************************************/
     41          
     42          /*********************************************************************
     43           * INCLUDES
     44           */
     45          
     46          #include "ZComDef.h"
     47          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x9d
   \   unsigned char volatile __sfr SLEEPSTA
   \                     SLEEPSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1
     48          #include "OSAL.h"
     49          #include "MT.h"
     50          #include "MT_SYS.h"
     51          #include "DebugTrace.h"
     52          
     53          /* Hal */
     54          #include "hal_lcd.h"
     55          #include "hal_mcu.h"
     56          #include "hal_timer.h"
     57          #include "hal_key.h"
     58          #include "hal_led.h"
     59          
     60          /* Allow access macRandomByte() */
     61          #include "mac_radio_defs.h"
     62          
     63          /*********************************************************************
     64           * MACROS
     65           */
     66          
     67          /*********************************************************************
     68           * CONSTANTS
     69           */
     70          
     71          // Task ID not initialized
     72          #define NO_TASK_ID 0xFF
     73          
     74          // Minimum length RAM "pattern" for Stack check
     75          #define MIN_RAM_INIT 12
     76          
     77          /*********************************************************************
     78           * TYPEDEFS
     79           */
     80          
     81          /*********************************************************************
     82           * GLOBAL VARIABLES
     83           */
     84          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     85          uint8 OnboardKeyIntEnable;
   \                     OnboardKeyIntEnable:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     86          
     87          #if defined MAKE_CRC_SHDW
     88          #pragma location="CRC_SHDW"
     89          const CODE uint16 _crcShdw = 0xFFFF;
     90          #pragma required=_crcShdw
     91          #endif
     92          
     93          // 64-bit Extended Address of this device

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     94          uint8 aExtendedAddress[8];
   \                     aExtendedAddress:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
     95          
     96          /*********************************************************************
     97           * EXTERNAL VARIABLES
     98           */
     99          
    100          /*********************************************************************
    101           * EXTERNAL FUNCTIONS
    102           */
    103          
    104          /*********************************************************************
    105           * LOCAL VARIABLES
    106           */
    107          
    108          // Registered keys task ID, initialized to NOT USED.

   \                                 In  segment XDATA_I, align 1, keep-with-next
    109          static uint8 registeredKeysTaskID = NO_TASK_ID;
   \                     registeredKeysTaskID:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for registeredKeysTaskID>`
   \   000001                REQUIRE __INIT_XDATA_I
    110          
    111          /*********************************************************************
    112           * LOCAL FUNCTIONS
    113           */
    114          
    115          static void ChkReset( void );
    116          
    117          /*********************************************************************
    118           * @fn      InitBoard()
    119           * @brief   Initialize the CC2420DB Board Peripherals
    120           * @param   level: COLD,WARM,READY
    121           * @return  None
    122           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    123          void InitBoard( uint8 level )
   \                     InitBoard:
    124          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    125            if ( level == OB_COLD )
   \   000006   7053         JNZ     ??InitBoard_0
    126            {
    127              // Interrupts off
    128              osal_int_disable( INTS_ALL );
   \   000008                ; Setup parameters for call to function osal_int_disable
   \   000008   79FF         MOV     R1,#-0x1
   \   00000A   12....       LCALL   ??osal_int_disable?relay
    129              // Turn all LEDs off
    130              HalLedSet( HAL_LED_ALL, HAL_LED_MODE_OFF );
   \   00000D                ; Setup parameters for call to function HalLedSet
   \   00000D   7A00         MOV     R2,#0x0
   \   00000F   790F         MOV     R1,#0xf
   \   000011   12....       LCALL   ??HalLedSet?relay
    131              // Check for Brown-Out reset
    132              ChkReset();
   \   000014   E59D         MOV     A,0x9d
   \   000016   5418         ANL     A,#0x18
   \   000018   F8           MOV     R0,A
   \   000019   604E         JZ      ??InitBoard_1
   \   00001B   7408         MOV     A,#0x8
   \   00001D   68           XRL     A,R0
   \   00001E   6049         JZ      ??InitBoard_1
   \   000020   7410         MOV     A,#0x10
   \   000022   68           XRL     A,R0
   \   000023   6044         JZ      ??InitBoard_1
   \   000025   C2AF         CLR     0xa8.7
   \                     ??InitBoard_2:
   \   000027   7E08         MOV     R6,#0x8
   \                     ??InitBoard_3:
   \   000029                ; Setup parameters for call to function HalLedSet
   \   000029   7A01         MOV     R2,#0x1
   \   00002B   EE           MOV     A,R6
   \   00002C   F9           MOV     R1,A
   \   00002D   12....       LCALL   ??HalLedSet?relay
   \   000030                ; Setup parameters for call to function Onboard_wait
   \   000030   7A24         MOV     R2,#0x24
   \   000032   7BF4         MOV     R3,#-0xc
   \   000034   12....       LCALL   ??Onboard_wait?relay
   \   000037                ; Setup parameters for call to function Onboard_wait
   \   000037   7A24         MOV     R2,#0x24
   \   000039   7BF4         MOV     R3,#-0xc
   \   00003B   12....       LCALL   ??Onboard_wait?relay
   \   00003E                ; Setup parameters for call to function HalLedSet
   \   00003E   7A00         MOV     R2,#0x0
   \   000040   EE           MOV     A,R6
   \   000041   F9           MOV     R1,A
   \   000042   12....       LCALL   ??HalLedSet?relay
   \   000045                ; Setup parameters for call to function Onboard_wait
   \   000045   7A7C         MOV     R2,#0x7c
   \   000047   7B92         MOV     R3,#-0x6e
   \   000049   12....       LCALL   ??Onboard_wait?relay
   \   00004C                ; Setup parameters for call to function Onboard_wait
   \   00004C   7A7C         MOV     R2,#0x7c
   \   00004E   7B92         MOV     R3,#-0x6e
   \   000050   12....       LCALL   ??Onboard_wait?relay
   \   000053   EE           MOV     A,R6
   \   000054   C3           CLR     C
   \   000055   13           RRC     A
   \   000056   FE           MOV     R6,A
   \   000057   70D0         JNZ     ??InitBoard_3
   \   000059   80CC         SJMP    ??InitBoard_2
    133            }
    134            else  // !OB_COLD
    135            {
    136              /* Initialize Key stuff */
    137              //Ä¬ÈÏ²éÑ¯£¬ÉèÖÃÎªÖÐ¶Ï´¦Àí
    138          #ifdef HAL_KEY_INT_METHOD
    139              OnboardKeyIntEnable = HAL_KEY_INTERRUPT_ENABLE;
   \                     ??InitBoard_0:
   \   00005B   90....       MOV     DPTR,#OnboardKeyIntEnable
   \   00005E   7401         MOV     A,#0x1
   \   000060   F0           MOVX    @DPTR,A
    140          #else
    141              OnboardKeyIntEnable = HAL_KEY_INTERRUPT_DISABLE;
    142          #endif    
    143              HalKeyConfig( OnboardKeyIntEnable, OnBoard_KeyCallback);
   \   000061                ; Setup parameters for call to function HalKeyConfig
   \   000061   7A..         MOV     R2,#??OnBoard_KeyCallback?relay & 0xff
   \   000063   7B..         MOV     R3,#(??OnBoard_KeyCallback?relay >> 8) & 0xff
   \   000065   F9           MOV     R1,A
   \   000066   12....       LCALL   ??HalKeyConfig?relay
    144            }
    145          }
   \                     ??InitBoard_1:
   \   000069                REQUIRE ?Subroutine0
   \   000069                REQUIRE SLEEPSTA
   \   000069                REQUIRE _A_IEN0
   \   000069                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    146          
    147          /*********************************************************************
    148           * @fn      ChkReset()
    149           * @brief   Check reset bits - if reset cause is unknown, assume a
    150           *          brown-out (low power), assume batteries are not reliable,
    151           *          hang in a loop and sequence through the LEDs.
    152           * @param   None
    153           * @return  None
    154           *********************************************************************/
    155          void ChkReset( void )
    156          {
    157            uint8 led;
    158            uint8 rib;
    159          
    160            // Isolate reset indicator bits
    161            rib = SLEEPSTA & LRESET;
    162          
    163            if ( rib == RESETPO )
    164            {
    165              // Put code here to handle Power-On reset
    166            }
    167            else if ( rib == RESETEX )
    168            {
    169              // Put code here to handle External reset
    170            }
    171            else if ( rib == RESETWD )
    172            {
    173              // Put code here to handle WatchDog reset
    174            }
    175            else
    176            {
    177              // Unknown, hang and blink
    178              HAL_DISABLE_INTERRUPTS();
    179              led = HAL_LED_4;
    180              while ( 1 ) {
    181                HalLedSet( led, HAL_LED_MODE_ON );
    182                MicroWait( 62500 );
    183                MicroWait( 62500 );
    184                HalLedSet( led, HAL_LED_MODE_OFF );
    185                MicroWait( 37500 );
    186                MicroWait( 37500 );
    187                if ( !(led >>= 1) )
    188                  led = HAL_LED_4;
    189              }
    190            }
    191          }
    192          
    193          /*********************************************************************
    194           *                        "Keyboard" Support
    195           *********************************************************************/
    196          
    197          /*********************************************************************
    198           * Keyboard Register function
    199           *
    200           * The keyboard handler is setup to send all keyboard changes to
    201           * one task (if a task is registered).
    202           *
    203           * If a task registers, it will get all the keys. You can change this
    204           * to register for individual keys.
    205           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    206          uint8 RegisterForKeys( uint8 task_id )
   \                     RegisterForKeys:
    207          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   F8           MOV     R0,A
    208            // Allow only the first task
    209            if ( registeredKeysTaskID == NO_TASK_ID )
   \   000006   90....       MOV     DPTR,#registeredKeysTaskID
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   F4           CPL     A
   \   00000B   7006         JNZ     ??RegisterForKeys_0
    210            {
    211              registeredKeysTaskID = task_id;
   \   00000D   E8           MOV     A,R0
   \   00000E   F0           MOVX    @DPTR,A
    212              return ( true );
   \   00000F   7901         MOV     R1,#0x1
   \   000011   8002         SJMP    ??RegisterForKeys_1
    213            }
    214            else
    215              return ( false );
   \                     ??RegisterForKeys_0:
   \   000013   7900         MOV     R1,#0x0
   \                     ??RegisterForKeys_1:
   \   000015                REQUIRE ?Subroutine1
   \   000015                ; // Fall through to label ?Subroutine1
    216          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    217          
    218          /*********************************************************************
    219           * @fn      OnBoard_SendKeys
    220           *
    221           * @brief   Send "Key Pressed" message to application.
    222           *
    223           * @param   keys  - keys that were pressed
    224           *          state - shifted
    225           *
    226           * @return  status
    227           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    228          uint8 OnBoard_SendKeys( uint8 keys, uint8 state )
   \                     OnBoard_SendKeys:
    229          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EA           MOV     A,R2
   \   000008   FF           MOV     R7,A
    230            keyChange_t *msgPtr;
    231          
    232            if ( registeredKeysTaskID != NO_TASK_ID )
   \   000009   90....       MOV     DPTR,#registeredKeysTaskID
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F4           CPL     A
   \   00000E   602B         JZ      ??OnBoard_SendKeys_0
    233            {
    234              // Send the address to the task
    235              msgPtr = (keyChange_t *)osal_msg_allocate( sizeof(keyChange_t) );
   \   000010                ; Setup parameters for call to function osal_msg_allocate
   \   000010   7A04         MOV     R2,#0x4
   \   000012   7B00         MOV     R3,#0x0
   \   000014   12....       LCALL   ??osal_msg_allocate?relay
    236              if ( msgPtr )
   \   000017   EA           MOV     A,R2
   \   000018   4B           ORL     A,R3
   \   000019   601C         JZ      ??OnBoard_SendKeys_1
    237              {
    238                msgPtr->hdr.event = KEY_CHANGE;
   \   00001B   8A82         MOV     DPL,R2
   \   00001D   8B83         MOV     DPH,R3
   \   00001F   74C0         MOV     A,#-0x40
   \   000021   F0           MOVX    @DPTR,A
    239                msgPtr->state = state;
   \   000022   EF           MOV     A,R7
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   F0           MOVX    @DPTR,A
    240                msgPtr->keys = keys;
   \   000026   EE           MOV     A,R6
   \   000027   8A82         MOV     DPL,R2
   \   000029   8B83         MOV     DPH,R3
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   F0           MOVX    @DPTR,A
    241          
    242                osal_msg_send( registeredKeysTaskID, (uint8 *)msgPtr );
   \   00002F                ; Setup parameters for call to function osal_msg_send
   \   00002F   90....       MOV     DPTR,#registeredKeysTaskID
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F9           MOV     R1,A
   \   000034   12....       LCALL   ??osal_msg_send?relay
    243              }
    244              return ( ZSuccess );
   \                     ??OnBoard_SendKeys_1:
   \   000037   7900         MOV     R1,#0x0
   \   000039   8002         SJMP    ??OnBoard_SendKeys_2
    245            }
    246            else
    247              return ( ZFailure );
   \                     ??OnBoard_SendKeys_0:
   \   00003B   7901         MOV     R1,#0x1
   \                     ??OnBoard_SendKeys_2:
   \   00003D   7F02         MOV     R7,#0x2
   \   00003F   02....       LJMP    ?BANKED_LEAVE_XDATA
    248          }
    249          
    250          /*********************************************************************
    251           * @fn      OnBoard_KeyCallback
    252           *
    253           * @brief   Callback service for keys
    254           *
    255           * @param   keys  - keys that were pressed
    256           *          state - shifted
    257           *
    258           * @return  void
    259           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    260          void OnBoard_KeyCallback ( uint8 keys, uint8 state )
   \                     OnBoard_KeyCallback:
    261          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    262            uint8 shift;
    263            (void)state;
    264          
    265            /* Get shift key status */
    266            shift = ((keys & HAL_KEY_SW_6) ? true : false);
    267          
    268            if ( OnBoard_SendKeys( keys, shift ) != ZSuccess )
   \   000007   A2E5         MOV     C,0xE0 /* A   */.5
   \   000009   5004         JNC     ??OnBoard_KeyCallback_0
   \   00000B   D2F0         SETB    B.0
   \   00000D   8002         SJMP    ??OnBoard_KeyCallback_1
   \                     ??OnBoard_KeyCallback_0:
   \   00000F   C2F0         CLR     B.0
   \                     ??OnBoard_KeyCallback_1:
   \   000011                ; Setup parameters for call to function OnBoard_SendKeys
   \   000011   A2F0         MOV     C,B.0
   \   000013   E4           CLR     A
   \   000014   33           RLC     A
   \   000015   FA           MOV     R2,A
   \   000016   12....       LCALL   ??OnBoard_SendKeys?relay
   \   000019   E9           MOV     A,R1
   \   00001A   600C         JZ      ??OnBoard_KeyCallback_2
    269            {
    270              // Process SW1 here
    271              if ( keys & HAL_KEY_SW_1 )  // Switch 1
   \   00001C   EE           MOV     A,R6
   \   00001D   A2E0         MOV     C,0xE0 /* A   */.0
   \   00001F   5007         JNC     ??OnBoard_KeyCallback_2
    272              {
    273                HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );//¹Ø±ÕPM2.5 
   \   000021                ; Setup parameters for call to function HalLedSet
   \   000021   7A00         MOV     R2,#0x0
   \   000023   7908         MOV     R1,#0x8
   \   000025   12....       LCALL   ??HalLedSet?relay
    274              }
    275              // Process SW2 here
    276              if ( keys & HAL_KEY_SW_2 )  // Switch 2
    277              {
    278              }
    279              // Process SW3 here
    280              if ( keys & HAL_KEY_SW_3 )  // Switch 3
    281              {
    282              }
    283              // Process SW4 here
    284              if ( keys & HAL_KEY_SW_4 )  // Switch 4
    285              {
    286              }
    287              // Process SW5 here
    288              if ( keys & HAL_KEY_SW_5 )  // Switch 5
    289              {
    290              }
    291              // Process SW6 here
    292              if ( keys & HAL_KEY_SW_6 )  // Switch 6
    293              {
    294              }
    295            }
    296          }
   \                     ??OnBoard_KeyCallback_2:
   \   000028   02....       LJMP    ?Subroutine0 & 0xFFFF
    297          
    298          /*********************************************************************
    299           * @fn      OnBoard_stack_used
    300           *
    301           * @brief   Runs through the stack looking for touched memory.
    302           *
    303           * @param   none
    304           *
    305           * @return  Maximum number of bytes used by the stack.
    306           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    307          uint16 OnBoard_stack_used(void)
   \                     OnBoard_stack_used:
    308          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    309            uint8 const *ptr;
    310            uint8 cnt = 0;
   \   000004   7800         MOV     R0,#0x0
    311          
    312            for (ptr = XSTACK_END; ptr > XSTACK_BEG; ptr--)
   \   000006   7582..       MOV     DPL,#(SFE(XSTACK) + 255) & 0xff
   \   000009   7583..       MOV     DPH,#((SFE(XSTACK) - 1) >> 8) & 0xff
   \   00000C   800E         SJMP    ??OnBoard_stack_used_0
    313            {
    314              if (STACK_INIT_VALUE == *ptr)
    315              {
    316                if (++cnt >= MIN_RAM_INIT)
    317                {
    318                  ptr += MIN_RAM_INIT;
    319                  break;
    320                }
    321              }
    322              else
    323              {
    324                cnt = 0;
   \                     ??OnBoard_stack_used_1:
   \   00000E   7800         MOV     R0,#0x0
    325              }
   \                     ??OnBoard_stack_used_2:
   \   000010   E582         MOV     A,DPL
   \   000012   24FF         ADD     A,#-0x1
   \   000014   F582         MOV     DPL,A
   \   000016   E583         MOV     A,DPH
   \   000018   34FF         ADDC    A,#-0x1
   \   00001A   F583         MOV     DPH,A
   \                     ??OnBoard_stack_used_0:
   \   00001C   C3           CLR     C
   \   00001D   74..         MOV     A,#SFB(XSTACK) & 0xff
   \   00001F   9582         SUBB    A,DPL
   \   000021   74..         MOV     A,#(SFB(XSTACK) >> 8) & 0xff
   \   000023   9583         SUBB    A,DPH
   \   000025   5018         JNC     ??OnBoard_stack_used_3
   \   000027   E0           MOVX    A,@DPTR
   \   000028   64CD         XRL     A,#0xcd
   \   00002A   70E2         JNZ     ??OnBoard_stack_used_1
   \   00002C   08           INC     R0
   \   00002D   E8           MOV     A,R0
   \   00002E   C3           CLR     C
   \   00002F   940C         SUBB    A,#0xc
   \   000031   40DD         JC      ??OnBoard_stack_used_2
   \   000033   E582         MOV     A,DPL
   \   000035   240C         ADD     A,#0xc
   \   000037   F582         MOV     DPL,A
   \   000039   E583         MOV     A,DPH
   \   00003B   3400         ADDC    A,#0x0
   \   00003D   F583         MOV     DPH,A
    326            }
    327          
    328            return (uint16)(XSTACK_END - ptr + 1);
   \                     ??OnBoard_stack_used_3:
   \   00003F   74..         MOV     A,#(SFE(XSTACK) + 255) & 0xff
   \   000041   C3           CLR     C
   \   000042   9582         SUBB    A,DPL
   \   000044   F8           MOV     R0,A
   \   000045   74..         MOV     A,#((SFE(XSTACK) - 1) >> 8) & 0xff
   \   000047   9583         SUBB    A,DPH
   \   000049   F9           MOV     R1,A
   \   00004A   E8           MOV     A,R0
   \   00004B   2401         ADD     A,#0x1
   \   00004D   FA           MOV     R2,A
   \   00004E   E9           MOV     A,R1
   \   00004F   3400         ADDC    A,#0x0
   \   000051   FB           MOV     R3,A
   \   000052   02....       LJMP    ?Subroutine1 & 0xFFFF
    329          }
    330          
    331          /*********************************************************************
    332           * @fn      _itoa
    333           *
    334           * @brief   convert a 16bit number to ASCII
    335           *
    336           * @param   num -
    337           *          buf -
    338           *          radix -
    339           *
    340           * @return  void
    341           *
    342           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    343          void _itoa(uint16 num, uint8 *buf, uint8 radix)
   \                     _itoa:
    344          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   8C..         MOV     ?V0 + 0,R4
   \   000010   8D..         MOV     ?V0 + 1,R5
    345            char c,i;
    346            uint8 *p, rst[5];
    347          
    348            p = rst;
   \   000012   85..82       MOV     DPL,?XSP + 0
   \   000015   85..83       MOV     DPH,?XSP + 1
   \   000018   AC82         MOV     R4,DPL
   \   00001A   AD83         MOV     R5,DPH
    349            for ( i=0; i<5; i++,p++ )
   \   00001C   75..00       MOV     ?V0 + 5,#0x0
   \   00001F   8982         MOV     DPL,R1
   \   000021   8582..       MOV     ?V0 + 2,DPL
   \   000024   75..00       MOV     ?V0 + 3,#0x0
    350            {
    351              c = num % radix;  // Isolate a digit
   \                     ??_itoa_0:
   \   000027   EE           MOV     A,R6
   \   000028   F8           MOV     R0,A
   \   000029   EF           MOV     A,R7
   \   00002A   F9           MOV     R1,A
   \   00002B   AA..         MOV     R2,?V0 + 2
   \   00002D   AB..         MOV     R3,?V0 + 3
   \   00002F   12....       LCALL   ?US_DIV_MOD
   \   000032   EA           MOV     A,R2
    352              *p = c + (( c < 10 ) ? '0' : '7');  // Convert to Ascii
   \   000033   940A         SUBB    A,#0xa
   \   000035   5004         JNC     ??_itoa_1
   \   000037   7830         MOV     R0,#0x30
   \   000039   8002         SJMP    ??_itoa_2
   \                     ??_itoa_1:
   \   00003B   7837         MOV     R0,#0x37
   \                     ??_itoa_2:
   \   00003D   E8           MOV     A,R0
   \   00003E   2A           ADD     A,R2
   \   00003F   8C82         MOV     DPL,R4
   \   000041   8D83         MOV     DPH,R5
   \   000043   F0           MOVX    @DPTR,A
    353              num /= radix;
   \   000044   EE           MOV     A,R6
   \   000045   F8           MOV     R0,A
   \   000046   EF           MOV     A,R7
   \   000047   F9           MOV     R1,A
   \   000048   AA..         MOV     R2,?V0 + 2
   \   00004A   AB..         MOV     R3,?V0 + 3
   \   00004C   12....       LCALL   ?US_DIV_MOD
   \   00004F   88..         MOV     ?V0 + 6,R0
   \   000051   89..         MOV     ?V0 + 7,R1
   \   000053   AE..         MOV     R6,?V0 + 6
   \   000055   AF..         MOV     R7,?V0 + 7
    354              if ( !num )
   \   000057   EE           MOV     A,R6
   \   000058   4F           ORL     A,R7
   \   000059   600D         JZ      ??_itoa_3
    355                break;
    356            }
   \   00005B   05..         INC     ?V0 + 5
   \   00005D   A3           INC     DPTR
   \   00005E   AC82         MOV     R4,DPL
   \   000060   AD83         MOV     R5,DPH
   \   000062   E5..         MOV     A,?V0 + 5
   \   000064   9405         SUBB    A,#0x5
   \   000066   40BF         JC      ??_itoa_0
    357          
    358            for ( c=0 ; c<=i; c++ )
   \                     ??_itoa_3:
   \   000068   7A00         MOV     R2,#0x0
    359              *buf++ = *p--;  // Reverse character order
   \                     ??_itoa_4:
   \   00006A   8C82         MOV     DPL,R4
   \   00006C   8D83         MOV     DPH,R5
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   85..82       MOV     DPL,?V0 + 0
   \   000072   85..83       MOV     DPH,?V0 + 1
   \   000075   F0           MOVX    @DPTR,A
   \   000076   EC           MOV     A,R4
   \   000077   24FF         ADD     A,#-0x1
   \   000079   1C           DEC     R4
   \   00007A   ED           MOV     A,R5
   \   00007B   34FF         ADDC    A,#-0x1
   \   00007D   FD           MOV     R5,A
   \   00007E   A3           INC     DPTR
   \   00007F   8582..       MOV     ?V0 + 0,DPL
   \   000082   8583..       MOV     ?V0 + 1,DPH
   \   000085   0A           INC     R2
   \   000086   E5..         MOV     A,?V0 + 5
   \   000088   C3           CLR     C
   \   000089   9A           SUBB    A,R2
   \   00008A   50DE         JNC     ??_itoa_4
    360          
    361            *buf = '\0';
   \   00008C   E4           CLR     A
   \   00008D   F0           MOVX    @DPTR,A
    362          }
   \   00008E   7405         MOV     A,#0x5
   \   000090   12....       LCALL   ?DEALLOC_XSTACK8
   \   000093   7F08         MOV     R7,#0x8
   \   000095   02....       LJMP    ?BANKED_LEAVE_XDATA
    363          
    364          /*********************************************************************
    365           * @fn        Onboard_rand
    366           *
    367           * @brief    Random number generator
    368           *
    369           * @param   none
    370           *
    371           * @return  uint16 - new random number
    372           *
    373           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    374          uint16 Onboard_rand( void )
   \                     Onboard_rand:
    375          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    376            return ( MAC_RADIO_RANDOM_WORD() );
   \   000004                ; Setup parameters for call to function macMcuRandomWord
   \   000004   12....       LCALL   ??macMcuRandomWord?relay
   \   000007   02....       LJMP    ?Subroutine1 & 0xFFFF
    377          }
    378          
    379          /*********************************************************************
    380           * @fn        Onboard_wait
    381           *
    382           * @brief    Delay wait
    383           *
    384           * @param   uint16 - time to wait
    385           *
    386           * @return  none
    387           *
    388           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    389          void Onboard_wait( uint16 timeout )
   \                     Onboard_wait:
    390          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   8003         SJMP    ??Onboard_wait_0
    391            while (timeout--)
    392            {
    393              asm("NOP");
   \                     ??Onboard_wait_1:
   \   000002   00           NOP
    394              asm("NOP");
   \   000003   00           NOP
    395              asm("NOP");
   \   000004   00           NOP
    396            }
   \                     ??Onboard_wait_0:
   \   000005   EA           MOV     A,R2
   \   000006   F8           MOV     R0,A
   \   000007   EB           MOV     A,R3
   \   000008   F9           MOV     R1,A
   \   000009   E8           MOV     A,R0
   \   00000A   24FF         ADD     A,#-0x1
   \   00000C   1A           DEC     R2
   \   00000D   E9           MOV     A,R1
   \   00000E   34FF         ADDC    A,#-0x1
   \   000010   FB           MOV     R3,A
   \   000011   E8           MOV     A,R0
   \   000012   49           ORL     A,R1
   \   000013   70ED         JNZ     ??Onboard_wait_1
    397          }
   \   000015   02....       LJMP    ?BRET
    398          
    399          /*********************************************************************
    400           *                    EXTERNAL I/O FUNCTIONS
    401           *
    402           * User defined functions to control external devices. Add your code
    403           * to the following functions to control devices wired to DB outputs.
    404           *
    405           *********************************************************************/
    406          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    407          void BigLight_On( void )
   \                     BigLight_On:
    408          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    409            // Put code here to turn on an external light
    410          }
   \   000000   02....       LJMP    ?BRET
    411          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    412          void BigLight_Off( void )
   \                     BigLight_Off:
    413          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    414            // Put code here to turn off an external light
    415          }
   \   000000   02....       LJMP    ?BRET
    416          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    417          void BuzzerControl( uint8 on )
   \                     BuzzerControl:
    418          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    419            // Put code here to turn a buzzer on/off
    420            (void)on;
    421          }
   \   000000   02....       LJMP    ?BRET
    422          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    423          void Dimmer( uint8 lvl )
   \                     Dimmer:
    424          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    425            // Put code here to control a dimmer
    426            (void)lvl;
    427          }
   \   000000   02....       LJMP    ?BRET
    428          
    429          // No dip switches on this board

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    430          uint8 GetUserDipSw( void )
   \                     GetUserDipSw:
    431          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    432            return 0;
   \   000000   7900         MOV     R1,#0x0
   \   000002   02....       LJMP    ?BRET
    433          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for registeredKeysTaskID>`:
   \   000000   FF           DB 255

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??InitBoard?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    InitBoard

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??RegisterForKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    RegisterForKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??OnBoard_SendKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    OnBoard_SendKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??OnBoard_KeyCallback?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    OnBoard_KeyCallback

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??OnBoard_stack_used?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    OnBoard_stack_used

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??_itoa?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    _itoa

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Onboard_rand?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Onboard_rand

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Onboard_wait?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Onboard_wait

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??BigLight_On?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BigLight_On

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??BigLight_Off?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BigLight_Off

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??BuzzerControl?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BuzzerControl

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Dimmer?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Dimmer

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GetUserDipSw?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GetUserDipSw
    434          
    435          /*********************************************************************
    436          *********************************************************************/

   Maximum stack usage in bytes:

     Function               ISTACK PSTACK XSTACK
     --------               ------ ------ ------
     BigLight_Off               0      0      0
     BigLight_On                0      0      0
     BuzzerControl              0      0      0
     Dimmer                     0      0      0
     GetUserDipSw               0      0      0
     InitBoard                  0      0      9
       -> osal_int_disable      0      0     18
       -> HalLedSet             0      0     18
       -> HalLedSet             0      0     18
       -> Onboard_wait          0      0     18
       -> Onboard_wait          0      0     18
       -> HalLedSet             0      0     18
       -> Onboard_wait          0      0     18
       -> Onboard_wait          0      0     18
       -> HalKeyConfig          0      0     18
     OnBoard_KeyCallback        0      0      9
       -> OnBoard_SendKeys      0      0     18
       -> HalLedSet             0      0     18
     OnBoard_SendKeys           1      0     19
       -> osal_msg_allocate     0      0     20
       -> osal_msg_send         0      0     20
     OnBoard_stack_used         2      0      0
     Onboard_rand               2      0      0
       -> macMcuRandomWord      4      0      0
     Onboard_wait               0      0      9
     RegisterForKeys            2      0      0
     _itoa                      1      0     21


   Segment part sizes:

     Function/Label                          Bytes
     --------------                          -----
     SLEEPSTA                                   1
     _A_IEN0                                    1
     OnboardKeyIntEnable                        1
     aExtendedAddress                           8
     registeredKeysTaskID                       1
     InitBoard                                105
     ?Subroutine0                               5
     RegisterForKeys                           21
     ?Subroutine1                               7
     OnBoard_SendKeys                          66
     OnBoard_KeyCallback                       43
     OnBoard_stack_used                        85
     _itoa                                    152
     Onboard_rand                              10
     Onboard_wait                              24
     BigLight_On                                3
     BigLight_Off                               3
     BuzzerControl                              3
     Dimmer                                     3
     GetUserDipSw                               5
     ?<Initializer for registeredKeysTaskID>    1
     ??InitBoard?relay                          6
     ??RegisterForKeys?relay                    6
     ??OnBoard_SendKeys?relay                   6
     ??OnBoard_KeyCallback?relay                6
     ??OnBoard_stack_used?relay                 6
     ??_itoa?relay                              6
     ??Onboard_rand?relay                       6
     ??Onboard_wait?relay                       6
     ??BigLight_On?relay                        6
     ??BigLight_Off?relay                       6
     ??BuzzerControl?relay                      6
     ??Dimmer?relay                             6
     ??GetUserDipSw?relay                       6

 
 535 bytes in segment BANKED_CODE
  78 bytes in segment BANK_RELAYS
   2 bytes in segment SFR_AN
   1 byte  in segment XDATA_I
   1 byte  in segment XDATA_ID
   9 bytes in segment XDATA_Z
 
 614 bytes of CODE  memory
   0 bytes of DATA  memory (+ 2 bytes shared)
  10 bytes of XDATA memory

Errors: none
Warnings: none
